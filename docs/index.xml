<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>开发规范 – 开发规范</title><link>/docs/</link><description>Recent content on 开发规范</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 添加新文档</title><link>/docs/about/contributing/addcontent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/about/contributing/addcontent/</guid><description>
&lt;p>贡献新文档到 devSpec，请执行以下步骤：&lt;/p>
&lt;ol>
&lt;li>确定受众和信息的预期用途。&lt;/li>
&lt;li>选择您想要贡献的&lt;a href="#content-types">内容类型&lt;/a>。&lt;/li>
&lt;li>&lt;a href="#choosing-a-title">命名标题&lt;/a>。&lt;/li>
&lt;li>按照&lt;a href="/zh/about/contributing">文档贡献指南&lt;/a>撰写您的贡献。&lt;/li>
&lt;li>将您的贡献提交到 &lt;a href="https://github.com/TaibiaoGuo/devSpec">GitHub 存储库&lt;/a>。&lt;/li>
&lt;li>执行&lt;a href="/zh/about/contributing/review">审核流程&lt;/a>，直到您的贡献被合并。&lt;/li>
&lt;/ol>
&lt;h2 id="identify-the-audience-and-intended-use">确定受众和信息的预期用途&lt;/h2>
&lt;p>好的文档需要从了解读者的阅读目的，知识以及希望他们如何处理这些信息开始。否则，您无法确定要提供的信息的范围和深度、理想结构和必要的支持信息。
下述示例描述如何在实际操作中践行该准则：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>读者需要执行特定的任务：告诉他们如何识别哪些是需要执行的任务，并以编号步骤列表的形式提供任务细节，而不是简单地概括性地描述任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读者在执行任务之前必须理解一个概念：在执行任务之前，请先介绍先决条件并提供指向该信息的链接。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读者需要做出决定：提供必要的概念性信息，以了解何时做出决定，可用选项以及何时选择一个选项而不是另一个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读者需要扩展 devSpec 的内容：提供一个如何扩展功能的示例，并使用简化方案进行说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>读者需要理解复杂的功能关系：提供一个显示关系的图表，而不是编写大量文字信息供阅读理解。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>要避免的最重要也是最常见的错误，是简单地向读者提供您拥有的所有信息，因为您不确定他们需要什么信息。&lt;/p>
&lt;h2 id="content-types">内容类型&lt;/h2>
&lt;p>了解受众和所提供信息的预期用途后，您可以选择最能满足他们需求的内容类型。为了方便您选择，
下表提供了受支持的内容类型、预期受众及每种类型文档的实施目标：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>内容类型&lt;/th>
&lt;th>目标&lt;/th>
&lt;th>受众&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>概念&lt;/td>
&lt;td>解释 devSepc 中涉及的相关概念。 概念页面不应该包含具体的步骤，而是指向相应规范或定义的链接。&lt;/td>
&lt;td>想要理解 devSpec 所需的一些基础知识或 devSpec 定义的一些关键定义。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>规范&lt;/td>
&lt;td>定义了具体的 devSpec 规范。 规范应该是可以指导开发的可实施的规范。&lt;/td>
&lt;td>项目成员可以直接理解并遵守的开发规范&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>例子&lt;/td>
&lt;td>描述实施 devSpec 的独立示例，该示例突出 devSpec 中的一个功能或特征。 例子必须使用现有的 devSpec 规范为背景知识。 若例子为代码项目，则必须包含自动测试。&lt;/td>
&lt;td>希望自己能快速实施 devSpec 规范或进行实验的读者。 理想情况下，读者应该能够轻松更改示例以产生自己的解决方案。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>模板&lt;/td>
&lt;td>给出了软件项目全生命周期中可以复用的文档模板。&lt;/td>
&lt;td>devSpec 实施过程中想要降低工作复杂度的项目成员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>博客&lt;/td>
&lt;td>独立的栏目，专注于 devSpec 相关的概念和技术和实际案例分析。 博客文章属于以下二个类别之一： &lt;ul>&lt;li>文章详细介绍了实施和定制化 devSpec 的经验，尤其是那些表达新颖经验或观点的经验。&lt;/li> &lt;li> 文章详细介绍了如何使用 devSpec 中的技术完成特定开发任务的实例。与 devSpec 规范文档中的任务和示例不同，博客文章的技术准确性在发布后不会得到维护和测试。&lt;/li> &lt;/ul>&lt;/td>
&lt;td>对规范有基本了解的读者想以更加无拘束的方式，通过案例、实践来了解它，并了解一些还未包含在规范中的开发思想和未来规划。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="choosing-a-title">命名标题&lt;/h2>
&lt;p>为您的主题选择一个标题， devSpec 的内容大致可以是嵌套的结构，其典型结构包括两个部分：章节索引文件 &lt;code>_index.md&lt;/code> 和正文文件 &lt;code>xxx.md&lt;/code>。
每个正文文件的标题应尽可能短，便于交叉引用时的创建和维护。&lt;/p>
&lt;h2 id="submit-your-contribution-to-GitHub">将您的贡献提交到 GitHub&lt;/h2>
&lt;p>如果您不熟悉 GitHub，请参阅&lt;a href="/zh/about/contributing/github">使用 GitHub 参与&lt;/a>，以了解如何提交文档更改。&lt;/p>
&lt;p>如果您想了解有关发表文稿的方式和时间的更多信息，请参阅&lt;a href="/zh/about/contributing/github#branching-strategy">分支策略&lt;/a>，
以了解我们如何使用分支和 &lt;code>cherry picking&lt;/code> 来发布我们的内容。&lt;/p></description></item><item><title>Docs: devSpec Go 编程指南</title><link>/docs/gocodestandards/codestandards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/gocodestandards/codestandards/</guid><description>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>样式 (style) 是支配我们代码的惯例。术语&lt;code>样式&lt;/code>有点用词不当，因为这些约定涵盖的范围不限于由 gofmt 替我们处理的源文件格式。&lt;/p>
&lt;p>本指南的目的是通过详细描述编写 Go 代码的注意事项来管理这种复杂性。这些规则的存在是为了使代码库易于管理，同时仍然允许工程师更有效地使用 Go 语言功能。&lt;/p>
&lt;p>本文档记录了 Go 代码中的惯用约定。其中许多是 Go 的通用准则，而其他扩展准则依赖于下面外部的指南：&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://golang.org/doc/effective_go.html">Effective Go&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/CommonMistakes">Go Common Mistakes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/golang/go/wiki/CodeReviewComments">Go Code Review Comments&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>所有代码都应该通过&lt;code>golint&lt;/code>和&lt;code>go vet&lt;/code>的检查并无错误。我们建议您将编辑器设置为：&lt;/p>
&lt;ul>
&lt;li>保存时运行 &lt;code>goimports&lt;/code>&lt;/li>
&lt;li>运行 &lt;code>golint&lt;/code> 和 &lt;code>go vet&lt;/code> 检查错误&lt;/li>
&lt;/ul>
&lt;p>您可以在以下 Go 编辑器工具支持页面中找到更为详细的信息：
&lt;a href="https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins">https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins&lt;/a>&lt;/p>
&lt;h2 id="指导原则">指导原则&lt;/h2>
&lt;h3 id="指向-interface-的指针">指向 interface 的指针&lt;/h3>
&lt;p>您几乎不需要指向接口类型的指针。您应该将接口作为值进行传递，在这样的传递过程中，实质上传递的底层数据仍然可以是指针。&lt;/p>
&lt;p>接口实质上在底层用两个字段表示：&lt;/p>
&lt;ol>
&lt;li>一个指向某些特定类型信息的指针。您可以将其视为&amp;quot;type&amp;quot;。&lt;/li>
&lt;li>数据指针。如果存储的数据是指针，则直接存储。如果存储的数据是一个值，则存储指向该值的指针。&lt;/li>
&lt;/ol>
&lt;p>如果希望接口方法修改基础数据，则必须使用指针传递(将对象指针赋值给接口变量)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">F&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">S1&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">S1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">S2&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">S2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// f1.f()无法修改底层数据
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// f2.f() 可以修改底层数据,给接口变量f2赋值时使用的是对象指针
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">f1&lt;/span> &lt;span style="color:#000">F&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">S1&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">f2&lt;/span> &lt;span style="color:#000">F&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">S2&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="interface-合理性验证">Interface 合理性验证&lt;/h3>
&lt;p>在编译时验证接口的符合性。这包括：&lt;/p>
&lt;ul>
&lt;li>将实现特定接口的导出类型作为接口API 的一部分进行检查&lt;/li>
&lt;li>实现同一接口的(导出和非导出)类型属于实现类型的集合&lt;/li>
&lt;li>任何违反接口合理性检查的场景,都会终止编译,并通知给用户&lt;/li>
&lt;/ul>
&lt;p>补充:上面3条是编译器对接口的检查机制,
大体意思是错误使用接口会在编译期报错.
所以可以利用这个机制让部分问题在编译期暴露.&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// 如果Handler没有实现http.Handler,会在运行时报错
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Handler&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">h&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Handler&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">ServeHTTP&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ResponseWriter&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">r&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Request&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Handler&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 用于触发编译期的接口的合理性检查机制
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// 如果Handler没有实现http.Handler,会在编译期报错
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Handler&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Handler&lt;/span>&lt;span style="color:#000;font-weight:bold">)(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">h&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Handler&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">ServeHTTP&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ResponseWriter&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">r&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Request&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>如果 &lt;code>*Handler&lt;/code> 与 &lt;code>http.Handler&lt;/code> 的接口不匹配,
那么语句 &lt;code>var _ http.Handler = (*Handler)(nil)&lt;/code> 将无法编译通过.&lt;/p>
&lt;p>赋值的右边应该是断言类型的零值。
对于指针类型（如 &lt;code>*Handler&lt;/code>）、切片和映射，这是 &lt;code>nil&lt;/code>；
对于结构类型，这是空结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">LogHandler&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">h&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Handler&lt;/span>
&lt;span style="color:#000">log&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Logger&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Handler&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">LogHandler&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">h&lt;/span> &lt;span style="color:#000">LogHandler&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">ServeHTTP&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ResponseWriter&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">r&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Request&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接收器-receiver-与接口">接收器 (receiver) 与接口&lt;/h3>
&lt;p>使用值接收器的方法既可以通过值调用，也可以通过指针调用。&lt;/p>
&lt;p>带指针接收器的方法只能通过指针或 &lt;a href="https://golang.org/ref/spec#Method_values">addressable values&lt;/a>调用.&lt;/p>
&lt;p>例如，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">S&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">S&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">S&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">str&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">str&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">sVals&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">S&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 你只能通过值调用 Read
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">sVals&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">].&lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 这不能编译通过：
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// sVals[1].Write(&amp;#34;test&amp;#34;)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">sPtrs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">S&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 通过指针既可以调用 Read，也可以调用 Write 方法
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">sPtrs&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">].&lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">sPtrs&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">].&lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>类似的,即使方法有了值接收器,也同样可以用指针接收器来满足接口.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">F&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">S1&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000">S1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">S2&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">S2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000">s1Val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">S1&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000">s1Ptr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">S1&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000">s2Val&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">S2&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000">s2Ptr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">S2&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000">F&lt;/span>
&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">s1Val&lt;/span>
&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">s1Ptr&lt;/span>
&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">s2Ptr&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 下面代码无法通过编译。因为 s2Val 是一个值，而 S2 的 f 方法中没有使用值接收器
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// i = s2Val
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://golang.org/doc/effective_go.html">Effective Go&lt;/a> 中有一段关于 &lt;a href="https://golang.org/doc/effective_go.html#pointers_vs_values">pointers vs. values&lt;/a> 的精彩讲解。&lt;/p>
&lt;p>补充:&lt;/p>
&lt;ul>
&lt;li>一个类型可以有值接收器方法集和指针接收器方法集
&lt;ul>
&lt;li>值接收器方法集是指针接收器方法集的子集,反之不是&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>规则
&lt;ul>
&lt;li>值对象只可以使用值接收器方法集&lt;/li>
&lt;li>指针对象可以使用 值接收器方法集 + 指针接收器方法集&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>接口的匹配(或者叫实现)
&lt;ul>
&lt;li>类型实现了接口的所有方法,叫匹配&lt;/li>
&lt;li>具体的讲,要么是类型的值方法集匹配接口,要么是指针方法集匹配接口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>具体的匹配分两种:&lt;/p>
&lt;ul>
&lt;li>值方法集和接口匹配
&lt;ul>
&lt;li>给接口变量赋值的不管是值还是指针对象,都ok,因为都包含值方法集&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>指针方法集和接口匹配
&lt;ul>
&lt;li>只能将指针对象赋值给接口变量,因为只有指针方法集和接口匹配&lt;/li>
&lt;li>如果将值对象赋值给接口变量,会在编译期报错(会触发接口合理性检查机制)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>为啥 i = s2Val 会报错,因为值方法集和接口不匹配.&lt;/p>
&lt;h3 id="零值-mutex-是有效的">零值 Mutex 是有效的&lt;/h3>
&lt;p>零值 &lt;code>sync.Mutex&lt;/code> 和 &lt;code>sync.RWMutex&lt;/code> 是有效的。所以指向 mutex 的指针基本是不必要的。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">mu&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">new&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Lock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">mu&lt;/span> &lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>
&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Lock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>如果你使用结构体指针，mutex 可以非指针形式作为结构体的组成字段，或者更好的方式是直接嵌入到结构体中。
如果是私有结构体类型或是要实现 Mutex 接口的类型，我们可以使用嵌入 mutex 的方法：&lt;/p>
&lt;table>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">smap&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// only for unexported types（仅适用于非导出类型）
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">newSMap&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">smap&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">smap&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">smap&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">k&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Lock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unlock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">SMap&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mu&lt;/span> &lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 对于导出类型，请使用私有锁
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">NewSMap&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SMap&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">SMap&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">m&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SMap&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">k&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Lock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unlock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tr>
&lt;tr>
&lt;td>为私有类型或需要实现互斥接口的类型嵌入。&lt;/td>
&lt;td>对于导出的类型，请使用专用字段。&lt;/td>
&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="在边界处拷贝-slices-和-maps">在边界处拷贝 Slices 和 Maps&lt;/h3>
&lt;p>slices 和 maps 包含了指向底层数据的指针，因此在需要复制它们时要特别注意。&lt;/p>
&lt;h4 id="接收-slices-和-maps">接收 Slices 和 Maps&lt;/h4>
&lt;p>请记住，当 map 或 slice 作为函数参数传入时，如果您存储了对它们的引用，则用户可以对其进行修改。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th> &lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Driver&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">SetTrips&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">trips&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#000">Trip&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">trips&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">trips&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">trips&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000">d1&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetTrips&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">trips&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 你是要修改 d1.trips 吗？
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">trips&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>
&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Driver&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">SetTrips&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">trips&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#000">Trip&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">trips&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#000">Trip&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">trips&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87">copy&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">d&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">trips&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">trips&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">trips&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000">d1&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetTrips&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">trips&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 这里我们修改 trips[0]，但不会影响到 d1.trips
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">trips&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="返回-slices-或-maps">返回 slices 或 maps&lt;/h4>
&lt;p>同样，请注意用户对暴露内部状态的 map 或 slice 的修改。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Stats&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mu&lt;/span> &lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>
&lt;span style="color:#000">counters&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Snapshot 返回当前状态。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Stats&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Snapshot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Lock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unlock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">counters&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// snapshot 不再受互斥锁保护
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// 因此对 snapshot 的任何访问都将受到数据竞争的影响
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// 影响 stats.counters
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">snapshot&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">stats&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Snapshot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Stats&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mu&lt;/span> &lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>
&lt;span style="color:#000">counters&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Stats&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Snapshot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Lock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">mu&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unlock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">counters&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">counters&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">result&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// snapshot 现在是一个拷贝
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">snapshot&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">stats&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Snapshot&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="使用-defer-释放资源">使用 defer 释放资源&lt;/h3>
&lt;p>使用 defer 释放资源，诸如文件和锁。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Lock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">count&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unlock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">count&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">count&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>
&lt;span style="color:#000">newCount&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">count&lt;/span>
&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unlock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">newCount&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 当有多个 return 分支时，很容易遗忘 unlock
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Lock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unlock&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">count&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">count&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">count&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">count&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 更可读
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>Defer 的开销非常小，只有在您可以证明函数执行时间处于纳秒级的程度时，才应避免这样做。使用 defer 提升可读性是值得的，因为使用它们的成本微不足道。尤其适用于那些不仅仅是简单内存访问的较大的方法，在这些方法中其他计算的资源消耗远超过 &lt;code>defer&lt;/code>。&lt;/p>
&lt;h3 id="channel-的-size-要么是-1要么是无缓冲的">Channel 的 size 要么是 1，要么是无缓冲的&lt;/h3>
&lt;p>channel 通常 size 应为 1 或是无缓冲的。默认情况下，channel 是无缓冲的，其 size 为零。任何其他尺寸都必须经过严格的审查。我们需要考虑如何确定大小，考虑是什么阻止了 channel 在高负载下和阻塞写时的写入，以及当这种情况发生时系统逻辑有哪些变化。(翻译解释：按照原文意思是需要界定通道边界，竞态条件，以及逻辑上下文梳理)&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// 应该足以满足任何情况！
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">chan&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">64&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// 大小：1
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">chan&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 或者
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// 无缓冲 channel，大小为 0
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">chan&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="枚举从-1-开始">枚举从 1 开始&lt;/h3>
&lt;p>在 Go 中引入枚举的标准方法是声明一个自定义类型和一个使用了 iota 的 const 组。由于变量的默认值为 0，因此通常应以非零值开头枚举。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Operation&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">Add&lt;/span> &lt;span style="color:#000">Operation&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">iota&lt;/span>
&lt;span style="color:#000">Subtract&lt;/span>
&lt;span style="color:#000">Multiply&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Add=0, Subtract=1, Multiply=2
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Operation&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">Add&lt;/span> &lt;span style="color:#000">Operation&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">iota&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#000">Subtract&lt;/span>
&lt;span style="color:#000">Multiply&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Add=1, Subtract=2, Multiply=3
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>在某些情况下，使用零值是有意义的（枚举从零开始），例如，当零值是理想的默认行为时。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">LogOutput&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">LogToStdout&lt;/span> &lt;span style="color:#000">LogOutput&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">iota&lt;/span>
&lt;span style="color:#000">LogToFile&lt;/span>
&lt;span style="color:#000">LogToRemote&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// LogToStdout=0, LogToFile=1, LogToRemote=2
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-time-处理时间">使用 time 处理时间&lt;/h3>
&lt;p>时间处理很复杂。关于时间的错误假设通常包括以下几点。&lt;/p>
&lt;ol>
&lt;li>一天有 24 小时&lt;/li>
&lt;li>一小时有 60 分钟&lt;/li>
&lt;li>一周有七天&lt;/li>
&lt;li>一年 365 天&lt;/li>
&lt;li>&lt;a href="https://infiniteundo.com/post/25326999628/falsehoods-programmers-believe-about-time">还有更多&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>例如，&lt;em>1&lt;/em> 表示在一个时间点上加上 24 小时并不总是产生一个新的日历日。&lt;/p>
&lt;p>因此，在处理时间时始终使用 &lt;a href="https://golang.org/pkg/time/">&lt;code>&amp;quot;time&amp;quot;&lt;/code>&lt;/a> 包，因为它有助于以更安全、更准确的方式处理这些不正确的假设。&lt;/p>
&lt;h4 id="使用-timetime-表达瞬时时间">使用 &lt;code>time.Time&lt;/code> 表达瞬时时间&lt;/h4>
&lt;p>在处理时间的瞬间时使用 &lt;a href="https://golang.org/pkg/time/#Time">&lt;code>time.Time&lt;/code>&lt;/a>，在比较、添加或减去时间时使用 &lt;code>time.Time&lt;/code> 中的方法。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">isActive&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">stop&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">start&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#000">now&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">now&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">stop&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">isActive&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">stop&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Time&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Before&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Before&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">stop&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h4 id="使用-timeduration-表达时间段">使用 &lt;code>time.Duration&lt;/code> 表达时间段&lt;/h4>
&lt;p>在处理时间段时使用 &lt;a href="https://golang.org/pkg/time/#Duration">&lt;code>time.Duration&lt;/code>&lt;/a> .&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">poll&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">delay&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sleep&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Duration&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">delay&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Millisecond&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">poll&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 是几秒钟还是几毫秒?
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">poll&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">delay&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Duration&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sleep&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">delay&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">poll&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Second&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>回到第一个例子，在一个时间瞬间加上 24 小时，我们用于添加时间的方法取决于意图。如果我们想要下一个日历日(当前天的下一天)的同一个时间点，我们应该使用 &lt;a href="https://golang.org/pkg/time/#Time.AddDate">&lt;code>Time.AddDate&lt;/code>&lt;/a>。但是，如果我们想保证某一时刻比前一时刻晚 24 小时，我们应该使用 &lt;a href="https://golang.org/pkg/time/#Time.Add">&lt;code>Time.Add&lt;/code>&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">newDay&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddDate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* years */&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* months */&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* days */&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">maybeNewDay&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Hour&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="对外部系统使用-timetime-和-timeduration">对外部系统使用 &lt;code>time.Time&lt;/code> 和 &lt;code>time.Duration&lt;/code>&lt;/h4>
&lt;p>尽可能在与外部系统的交互中使用 &lt;code>time.Duration&lt;/code> 和 &lt;code>time.Time&lt;/code> 例如 :&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Command-line 标志: &lt;a href="https://golang.org/pkg/flag/">&lt;code>flag&lt;/code>&lt;/a> 通过 &lt;a href="https://golang.org/pkg/time/#ParseDuration">&lt;code>time.ParseDuration&lt;/code>&lt;/a> 支持 &lt;code>time.Duration&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>JSON: &lt;a href="https://golang.org/pkg/encoding/json/">&lt;code>encoding/json&lt;/code>&lt;/a> 通过其 &lt;a href="https://golang.org/pkg/time/#Time.UnmarshalJSON">&lt;code>UnmarshalJSON&lt;/code> method&lt;/a> 方法支持将 &lt;code>time.Time&lt;/code> 编码为 &lt;a href="https://tools.ietf.org/html/rfc3339">RFC 3339&lt;/a> 字符串&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SQL: &lt;a href="https://golang.org/pkg/database/sql/">&lt;code>database/sql&lt;/code>&lt;/a> 支持将 &lt;code>DATETIME&lt;/code> 或 &lt;code>TIMESTAMP&lt;/code> 列转换为 &lt;code>time.Time&lt;/code>，如果底层驱动程序支持则返回&lt;/p>
&lt;/li>
&lt;li>
&lt;p>YAML: &lt;a href="https://godoc.org/gopkg.in/yaml.v2">&lt;code>gopkg.in/yaml.v2&lt;/code>&lt;/a> 支持将 &lt;code>time.Time&lt;/code> 作为 &lt;a href="https://tools.ietf.org/html/rfc3339">RFC 3339&lt;/a> 字符串，并通过 &lt;a href="https://golang.org/pkg/time/#ParseDuration">&lt;code>time.ParseDuration&lt;/code>&lt;/a> 支持 &lt;code>time.Duration&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>当不能在这些交互中使用 &lt;code>time.Duration&lt;/code> 时，请使用 &lt;code>int&lt;/code> 或 &lt;code>float64&lt;/code>，并在字段名称中包含单位。&lt;/p>
&lt;p>例如，由于 &lt;code>encoding/json&lt;/code> 不支持 &lt;code>time.Duration&lt;/code>，因此该单位包含在字段的名称中。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// {&amp;#34;interval&amp;#34;: 2}
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Config&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Interval&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#4e9a06">`json:&amp;#34;interval&amp;#34;`&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// {&amp;#34;intervalMillis&amp;#34;: 2000}
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Config&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">IntervalMillis&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#4e9a06">`json:&amp;#34;intervalMillis&amp;#34;`&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>当在这些交互中不能使用 &lt;code>time.Time&lt;/code> 时，除非达成一致，否则使用 &lt;code>string&lt;/code> 和 &lt;a href="https://tools.ietf.org/html/rfc3339">RFC 3339&lt;/a> 中定义的格式时间戳。默认情况下，&lt;a href="https://golang.org/pkg/time/#Time.UnmarshalText">&lt;code>Time.UnmarshalText&lt;/code>&lt;/a> 使用此格式，并可通过 &lt;a href="https://golang.org/pkg/time/#RFC3339">&lt;code>time.RFC3339&lt;/code>&lt;/a> 在 &lt;code>Time.Format&lt;/code> 和 &lt;code>time.Parse&lt;/code> 中使用。&lt;/p>
&lt;p>尽管这在实践中并不成问题，但请记住，&lt;code>&amp;quot;time&amp;quot;&lt;/code> 包不支持解析闰秒时间戳（&lt;a href="https://github.com/golang/go/issues/8728">8728&lt;/a>），也不在计算中考虑闰秒（&lt;a href="https://github.com/golang/go/issues/15190">15190&lt;/a>）。如果您比较两个时间瞬间，则差异将不包括这两个瞬间之间可能发生的闰秒。&lt;/p>
&lt;!-- TODO: section on String methods for enums -->
&lt;h3 id="错误类型">错误类型&lt;/h3>
&lt;p>Go 中有多种声明错误（Error) 的选项：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://golang.org/pkg/errors/#New">&lt;code>errors.New&lt;/code>&lt;/a> 对于简单静态字符串的错误&lt;/li>
&lt;li>&lt;a href="https://golang.org/pkg/fmt/#Errorf">&lt;code>fmt.Errorf&lt;/code>&lt;/a> 用于格式化的错误字符串&lt;/li>
&lt;li>实现 &lt;code>Error()&lt;/code> 方法的自定义类型&lt;/li>
&lt;li>用 &lt;a href="https://godoc.org/github.com/pkg/errors#Wrap">&lt;code>&amp;quot;pkg/errors&amp;quot;.Wrap&lt;/code>&lt;/a> 的 Wrapped errors&lt;/li>
&lt;/ul>
&lt;p>返回错误时，请考虑以下因素以确定最佳选择：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>这是一个不需要额外信息的简单错误吗？如果是这样，&lt;a href="https://golang.org/pkg/errors/#New">&lt;code>errors.New&lt;/code>&lt;/a> 足够了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>客户需要检测并处理此错误吗？如果是这样，则应使用自定义类型并实现该 &lt;code>Error()&lt;/code> 方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您是否正在传播下游函数返回的错误？如果是这样，请查看本文后面有关错误包装 &lt;a href="#%E9%94%99%E8%AF%AF%E5%8C%85%E8%A3%85" title="Error-Wrapping">section on error wrapping&lt;/a> 部分的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>否则 &lt;a href="https://golang.org/pkg/fmt/#Errorf">&lt;code>fmt.Errorf&lt;/code>&lt;/a> 就可以了。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>如果客户端需要检测错误，并且您已使用创建了一个简单的错误 &lt;a href="https://golang.org/pkg/errors/#New">&lt;code>errors.New&lt;/code>&lt;/a>，请使用一个错误变量。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// package foo
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">errors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;could not open&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// package bar
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">use&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;could not open&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// handle
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;unknown error&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// package foo
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">ErrCouldNotOpen&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">errors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;could not open&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">ErrCouldNotOpen&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// package bar
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">errors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Is&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ErrCouldNotOpen&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// handle
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;unknown error&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>如果您有可能需要客户端检测的错误，并且想向其中添加更多信息（例如，它不是静态字符串），则应使用自定义类型。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">file&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;file %q not found&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">file&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">use&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;testfile.txt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">strings&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Contains&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;not found&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// handle
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;unknown error&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">errNotFound&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">file&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">errNotFound&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;file %q not found&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">file&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">file&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">errNotFound&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">file&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">file&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">use&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;testfile.txt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#000">errNotFound&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// handle
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;unknown error&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>直接导出自定义错误类型时要小心，因为它们已成为程序包公共 API 的一部分。最好公开匹配器功能以检查错误。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// package foo
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">errNotFound&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">file&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">errNotFound&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;file %q not found&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">file&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">IsNotFoundError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#000">errNotFound&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">ok&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">file&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">errNotFound&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">file&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">file&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// package bar
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IsNotFoundError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// handle
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;unknown error&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;!-- TODO: Exposing the information to callers with accessor functions. -->
&lt;h3 id="错误包装-error-wrapping">错误包装 (Error Wrapping)&lt;/h3>
&lt;p>一个（函数/方法）调用失败时，有三种主要的错误传播方式：&lt;/p>
&lt;ul>
&lt;li>如果没有要添加的其他上下文，并且您想要维护原始错误类型，则返回原始错误。&lt;/li>
&lt;li>添加上下文，使用 &lt;a href="https://godoc.org/github.com/pkg/errors#Wrap">&lt;code>&amp;quot;pkg/errors&amp;quot;.Wrap&lt;/code>&lt;/a> 以便错误消息提供更多上下文 ,&lt;a href="https://godoc.org/github.com/pkg/errors#Cause">&lt;code>&amp;quot;pkg/errors&amp;quot;.Cause&lt;/code>&lt;/a> 可用于提取原始错误。&lt;/li>
&lt;li>如果调用者不需要检测或处理的特定错误情况，使用 &lt;a href="https://golang.org/pkg/fmt/#Errorf">&lt;code>fmt.Errorf&lt;/code>&lt;/a>。&lt;/li>
&lt;/ul>
&lt;p>建议在可能的地方添加上下文，以使您获得诸如“调用服务 foo：连接被拒绝”之类的更有用的错误，而不是诸如“连接被拒绝”之类的模糊错误。&lt;/p>
&lt;p>在将上下文添加到返回的错误时，请避免使用“failed to”之类的短语以保持上下文简洁，这些短语会陈述明显的内容，并随着错误在堆栈中的渗透而逐渐堆积：&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">store&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;failed to create new store: %v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">store&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;new store: %v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;tr>&lt;td>
&lt;pre tabindex="0">&lt;code>failed to x: failed to y: failed to create new store: the error
&lt;/code>&lt;/pre>&lt;/td>&lt;td>
&lt;pre tabindex="0">&lt;code>x: y: new store: the error
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>但是，一旦将错误发送到另一个系统，就应该明确消息是错误消息（例如使用&lt;code>err&lt;/code>标记，或在日志中以”Failed”为前缀）。&lt;/p>
&lt;p>另请参见 &lt;a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully">Don&amp;rsquo;t just check errors, handle them gracefully&lt;/a>. 不要只是检查错误，要优雅地处理错误&lt;/p>
&lt;h3 id="处理类型断言失败">处理类型断言失败&lt;/h3>
&lt;p>&lt;a href="https://golang.org/ref/spec#Type_assertions">type assertion&lt;/a> 的单个返回值形式针对不正确的类型将产生 panic。因此，请始终使用“comma ok”的惯用法。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 优雅地处理错误
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;!-- TODO: There are a few situations where the single assignment form is
fine. -->
&lt;h3 id="不要-panic">不要 panic&lt;/h3>
&lt;p>在生产环境中运行的代码必须避免出现 panic。panic 是 &lt;a href="https://en.wikipedia.org/wiki/Cascading_failure">cascading failures&lt;/a> 级联失败的主要根源 。如果发生错误，该函数必须返回错误，并允许调用方决定如何处理它。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;an argument is required&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">run&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Args&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:])&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">args&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">errors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;an argument is required&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">run&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Args&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">:]);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Fprintln&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Stderr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Exit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>panic/recover 不是错误处理策略。仅当发生不可恢复的事情（例如：nil 引用）时，程序才必须 panic。程序初始化是一个例外：程序启动时应使程序中止的不良情况可能会引起 panic。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_statusTemplate&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">template&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Must&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">template&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">).&lt;/span>&lt;span style="color:#000">Parse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;_statusHTML&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>即使在测试代码中，也优先使用&lt;code>t.Fatal&lt;/code>或者&lt;code>t.FailNow&lt;/code>而不是 panic 来确保失败被标记。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// func TestFoo(t *testing.T)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TempFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;failed to set up test&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// func TestFoo(t *testing.T)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TempFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;test&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Fatal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;failed to set up test&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;!-- TODO: Explain how to use _test packages. -->
&lt;h3 id="使用-gouberorgatomic">使用 go.uber.org/atomic&lt;/h3>
&lt;p>使用 &lt;a href="https://golang.org/pkg/sync/atomic/">sync/atomic&lt;/a> 包的原子操作对原始类型 (&lt;code>int32&lt;/code>, &lt;code>int64&lt;/code>等）进行操作，因为很容易忘记使用原子操作来读取或修改变量。&lt;/p>
&lt;p>&lt;a href="https://godoc.org/go.uber.org/atomic">go.uber.org/atomic&lt;/a> 通过隐藏基础类型为这些操作增加了类型安全性。此外，它包括一个方便的&lt;code>atomic.Bool&lt;/code>类型。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">running&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int32&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// atomic
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">atomic&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SwapInt32&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">running&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// already running…
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// start the Foo
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">isRunning&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">running&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// race!
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">running&lt;/span> &lt;span style="color:#000">atomic&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Bool&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">running&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Swap&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// already running…
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// start the Foo
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">isRunning&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">running&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Load&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="避免可变全局变量">避免可变全局变量&lt;/h3>
&lt;p>使用选择依赖注入方式避免改变全局变量。
既适用于函数指针又适用于其他值类型&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// sign.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_timeNow&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Now&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">sign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msg&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">now&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">_timeNow&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">signWithTime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// sign.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">signer&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">now&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Time&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">newSigner&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">signer&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">signer&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Now&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">signer&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Sign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msg&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">now&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">signWithTime&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">now&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// sign_test.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">TestSign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">testing&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">oldTimeNow&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">_timeNow&lt;/span>
&lt;span style="color:#000">_timeNow&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Time&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">someFixedTime&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">_timeNow&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">oldTimeNow&lt;/span> &lt;span style="color:#000;font-weight:bold">}()&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">want&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">give&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// sign_test.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">TestSigner&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">testing&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">newSigner&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">now&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Time&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">someFixedTime&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">want&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sign&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">give&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="避免在公共结构中嵌入类型">避免在公共结构中嵌入类型&lt;/h3>
&lt;p>这些嵌入的类型泄漏实现细节、禁止类型演化和模糊的文档。&lt;/p>
&lt;p>假设您使用共享的 &lt;code>AbstractList&lt;/code> 实现了多种列表类型，请避免在具体的列表实现中嵌入 &lt;code>AbstractList&lt;/code>。
相反，只需手动将方法写入具体的列表，该列表将委托给抽象列表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">AbstractList&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 添加将实体添加到列表中。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">AbstractList&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">Entity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 移除从列表中移除实体。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">AbstractList&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">Entity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// ConcreteList 是一个实体列表。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">ConcreteList&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">AbstractList&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// ConcreteList 是一个实体列表。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">ConcreteList&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">list&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">AbstractList&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 添加将实体添加到列表中。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">ConcreteList&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">Entity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">list&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 移除从列表中移除实体。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">ConcreteList&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">Entity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">list&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>Go 允许 &lt;a href="https://golang.org/doc/effective_go.html#embedding">类型嵌入&lt;/a> 作为继承和组合之间的折衷。
外部类型获取嵌入类型的方法的隐式副本。
默认情况下，这些方法委托给嵌入实例的同一方法。&lt;/p>
&lt;p>结构还获得与类型同名的字段。
所以，如果嵌入的类型是 public，那么字段是 public。为了保持向后兼容性，外部类型的每个未来版本都必须保留嵌入类型。&lt;/p>
&lt;p>很少需要嵌入类型。
这是一种方便，可以帮助您避免编写冗长的委托方法。&lt;/p>
&lt;p>即使嵌入兼容的抽象列表 &lt;em>interface&lt;/em>，而不是结构体，这将为开发人员提供更大的灵活性来改变未来，但仍然泄露了具体列表使用抽象实现的细节。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// AbstractList 是各种实体列表的通用实现。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">AbstractList&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Entity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">Remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Entity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ConcreteList 是一个实体列表。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">ConcreteList&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">AbstractList&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// ConcreteList 是一个实体列表。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">ConcreteList&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">list&lt;/span> &lt;span style="color:#000">AbstractList&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 添加将实体添加到列表中。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">ConcreteList&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">Entity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">list&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 移除从列表中移除实体。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">ConcreteList&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">Entity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">list&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Remove&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">e&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>无论是使用嵌入式结构还是使用嵌入式接口，嵌入式类型都会限制类型的演化.&lt;/p>
&lt;ul>
&lt;li>向嵌入式接口添加方法是一个破坏性的改变。&lt;/li>
&lt;li>删除嵌入类型是一个破坏性的改变。&lt;/li>
&lt;li>即使使用满足相同接口的替代方法替换嵌入类型，也是一个破坏性的改变。&lt;/li>
&lt;/ul>
&lt;p>尽管编写这些委托方法是乏味的，但是额外的工作隐藏了实现细节，留下了更多的更改机会，还消除了在文档中发现完整列表接口的间接性操作。&lt;/p>
&lt;h3 id="避免使用内置名称">避免使用内置名称&lt;/h3>
&lt;p>Go语言规范&lt;a href="https://golang.org/ref/spec">language specification&lt;/a> 概述了几个内置的，
不应在Go项目中使用的名称标识&lt;a href="https://golang.org/ref/spec#Predeclared_identifiers">predeclared identifiers&lt;/a>。&lt;/p>
&lt;p>根据上下文的不同，将这些标识符作为名称重复使用，
将在当前作用域（或任何嵌套作用域）中隐藏原始标识符，或者混淆代码。
在最好的情况下，编译器会报错；在最坏的情况下，这样的代码可能会引入潜在的、难以恢复的错误。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// `error` 作用域隐式覆盖
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// or
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">handleErrorMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// `error` 作用域隐式覆盖
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">errorMessage&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// `error` 指向内置的非覆盖
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// or
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">handleErrorMessage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msg&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// `error` 指向内置的非覆盖
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 虽然这些字段在技术上不构成阴影，但`error`或`string`字符串的重映射现在是不明确的。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// `error` 和 `f.error` 在视觉上是相似的
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">error&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// `string` and `f.string` 在视觉上是相似的
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// `error` and `string` 现在是明确的。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>
&lt;span style="color:#000">str&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">str&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>注意，编译器在使用预先分隔的标识符时不会生成错误，
但是诸如&lt;code>go vet&lt;/code>之类的工具会正确地指出这些和其他情况下的隐式问题。&lt;/p>
&lt;h3 id="避免使用-init">避免使用 &lt;code>init()&lt;/code>&lt;/h3>
&lt;p>尽可能避免使用&lt;code>init()&lt;/code>。当&lt;code>init()&lt;/code>是不可避免或可取的，代码应先尝试：&lt;/p>
&lt;ol>
&lt;li>无论程序环境或调用如何，都要完全确定。&lt;/li>
&lt;li>避免依赖于其他&lt;code>init()&lt;/code>函数的顺序或副作用。虽然&lt;code>init()&lt;/code>顺序是明确的，但代码可以更改，
因此&lt;code>init()&lt;/code>函数之间的关系可能会使代码变得脆弱和容易出错。&lt;/li>
&lt;li>避免访问或操作全局或环境状态，如机器信息、环境变量、工作目录、程序参数/输入等。&lt;/li>
&lt;li>避免&lt;code>I/O&lt;/code>，包括文件系统、网络和系统调用。&lt;/li>
&lt;/ol>
&lt;p>不能满足这些要求的代码可能属于要作为&lt;code>main()&lt;/code>调用的一部分（或程序生命周期中的其他地方），
或者作为&lt;code>main()&lt;/code>本身的一部分写入。特别是，打算由其他程序使用的库应该特别注意完全确定性，
而不是执行“init magic”&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_defaultFoo&lt;/span> &lt;span style="color:#000">Foo&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">init&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">_defaultFoo&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_defaultFoo&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// or, 为了更好的可测试性:
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_defaultFoo&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">defaultFoo&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">defaultFoo&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Config&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_config&lt;/span> &lt;span style="color:#000">Config&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">init&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Bad: 基于当前目录
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">cwd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Getwd&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Bad: I/O
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">raw&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cwd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;config&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;config.yaml&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">yaml&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unmarshal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">raw&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">_config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Config&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">loadConfig&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">Config&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">cwd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Getwd&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// handle err
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">raw&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">path&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cwd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;config&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;config.yaml&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// handle err
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">config&lt;/span> &lt;span style="color:#000">Config&lt;/span>
&lt;span style="color:#000">yaml&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Unmarshal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">raw&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">config&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">config&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>考虑到上述情况，在某些情况下，&lt;code>init()&lt;/code>可能更可取或是必要的，可能包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不能表示为单个赋值的复杂表达式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可插入的钩子，如&lt;code>database/sql&lt;/code>、编码类型注册表等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对&lt;a href="https://cloud.google.com/functions/docs/bestpractices/tips#use_global_variables_to_reuse_objects_in_future_invocations">Google Cloud Functions&lt;/a>和其他形式的确定性预计算的优化。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="追加时优先指定切片容量">追加时优先指定切片容量&lt;/h3>
&lt;p>追加时优先指定切片容量&lt;/p>
&lt;p>在尽可能的情况下，在初始化要追加的切片时为&lt;code>make()&lt;/code>提供一个容量值。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;pre tabindex="0">&lt;code>BenchmarkBad-4 100000000 2.48s
&lt;/code>&lt;/pre>&lt;/td>&lt;td>
&lt;pre tabindex="0">&lt;code>BenchmarkGood-4 100000000 0.21s
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h2 id="性能">性能&lt;/h2>
&lt;p>性能方面的特定准则只适用于高频场景。&lt;/p>
&lt;h3 id="优先使用-strconv-而不是-fmt">优先使用 strconv 而不是 fmt&lt;/h3>
&lt;p>将原语转换为字符串或从字符串转换时，&lt;code>strconv&lt;/code>速度比&lt;code>fmt&lt;/code>快。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sprint&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">rand&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Int&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">strconv&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Itoa&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">rand&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Int&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;pre tabindex="0">&lt;code>BenchmarkFmtSprint-4 143 ns/op 2 allocs/op
&lt;/code>&lt;/pre>&lt;/td>&lt;td>
&lt;pre tabindex="0">&lt;code>BenchmarkStrconv-4 64.2 ns/op 1 allocs/op
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="避免字符串到字节的转换">避免字符串到字节的转换&lt;/h3>
&lt;p>不要反复从固定字符串创建字节 slice。相反，请执行一次转换并捕获结果。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">w&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#204a87">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello world&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">w&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/tr>
&lt;tr>&lt;td>
&lt;pre tabindex="0">&lt;code>BenchmarkBad-4 50000000 22.2 ns/op
&lt;/code>&lt;/pre>&lt;/td>&lt;td>
&lt;pre tabindex="0">&lt;code>BenchmarkGood-4 500000000 3.25 ns/op
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="指定容器容量">指定容器容量&lt;/h3>
&lt;p>尽可能指定容器容量，以便为容器预先分配内存。这将在添加元素时最小化后续分配（通过复制和调整容器大小）。&lt;/p>
&lt;h4 id="指定map容量提示">指定Map容量提示&lt;/h4>
&lt;p>在尽可能的情况下，在使用 &lt;code>make()&lt;/code> 初始化的时候提供容量信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">T2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">hint&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>向&lt;code>make()&lt;/code>提供容量提示会在初始化时尝试调整map的大小，这将减少在将元素添加到map时为map重新分配内存。&lt;/p>
&lt;p>注意，与slices不同。map capacity提示并不保证完全的抢占式分配，而是用于估计所需的hashmap bucket的数量。
因此，在将元素添加到map时，甚至在指定map容量时，仍可能发生分配。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">m&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FileInfo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">files&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadDir&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;./files&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">files&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Name&lt;/span>&lt;span style="color:#000;font-weight:bold">()]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">f&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">
&lt;span style="color:#000">files&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">_&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadDir&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;./files&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">m&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FileInfo&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">files&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">files&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Name&lt;/span>&lt;span style="color:#000;font-weight:bold">()]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">f&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;p>&lt;code>m&lt;/code> 是在没有大小提示的情况下创建的； 在运行时可能会有更多分配。&lt;/p>
&lt;/td>&lt;td>
&lt;p>&lt;code>m&lt;/code> 是有大小提示创建的；在运行时可能会有更少的分配。&lt;/p>
&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h4 id="指定切片容量">指定切片容量&lt;/h4>
&lt;p>在尽可能的情况下，在使用&lt;code>make()&lt;/code>初始化切片时提供容量信息，特别是在追加切片时。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">length&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">capacity&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>与maps不同，slice capacity不是一个提示：编译器将为提供给&lt;code>make()&lt;/code>的slice的容量分配足够的内存，
这意味着后续的append()`操作将导致零分配（直到slice的长度与容量匹配，在此之后，任何append都可能调整大小以容纳其他元素）。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">N&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">k&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">size&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;pre tabindex="0">&lt;code>BenchmarkBad-4 100000000 2.48s
&lt;/code>&lt;/pre>&lt;/td>&lt;td>
&lt;pre tabindex="0">&lt;code>BenchmarkGood-4 100000000 0.21s
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h2 id="规范">规范&lt;/h2>
&lt;h3 id="一致性">一致性&lt;/h3>
&lt;p>本文中概述的一些标准都是客观性的评估，是根据场景、上下文、或者主观性的判断；&lt;/p>
&lt;p>但是最重要的是，&lt;strong>保持一致&lt;/strong>.&lt;/p>
&lt;p>一致性的代码更容易维护、是更合理的、需要更少的学习成本、并且随着新的约定出现或者出现错误后更容易迁移、更新、修复 bug&lt;/p>
&lt;p>相反，在一个代码库中包含多个完全不同或冲突的代码风格会导致维护成本开销、不确定性和认知偏差。所有这些都会直接导致速度降低、代码审查痛苦、而且增加 bug 数量。&lt;/p>
&lt;p>将这些标准应用于代码库时，建议在 package（或更大）级别进行更改，子包级别的应用程序通过将多个样式引入到同一代码中，违反了上述关注点。&lt;/p>
&lt;h3 id="相似的声明放在一组">相似的声明放在一组&lt;/h3>
&lt;p>Go 语言支持将相似的声明放在一个组内。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;a&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;b&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;a&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;b&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>这同样适用于常量、变量和类型声明：&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Area&lt;/span> &lt;span style="color:#204a87;font-weight:bold">float64&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Volume&lt;/span> &lt;span style="color:#204a87;font-weight:bold">float64&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">Area&lt;/span> &lt;span style="color:#204a87;font-weight:bold">float64&lt;/span>
&lt;span style="color:#000">Volume&lt;/span> &lt;span style="color:#204a87;font-weight:bold">float64&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>仅将相关的声明放在一组。不要将不相关的声明放在一组。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Operation&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">Add&lt;/span> &lt;span style="color:#000">Operation&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">iota&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#000">Subtract&lt;/span>
&lt;span style="color:#000">Multiply&lt;/span>
&lt;span style="color:#000">EnvVar&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;MY_ENV&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Operation&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">Add&lt;/span> &lt;span style="color:#000">Operation&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">iota&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#000">Subtract&lt;/span>
&lt;span style="color:#000">Multiply&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">EnvVar&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;MY_ENV&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>分组使用的位置没有限制，例如：你可以在函数内部使用它们：&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">red&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xff0000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">green&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x00ff00&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">blue&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x0000ff&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">red&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xff0000&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">green&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x00ff00&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">blue&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">New&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x0000ff&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="import-分组">import 分组&lt;/h3>
&lt;p>导入应该分为两组：&lt;/p>
&lt;ul>
&lt;li>标准库&lt;/li>
&lt;li>其他库&lt;/li>
&lt;/ul>
&lt;p>默认情况下，这是 goimports 应用的分组。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;go.uber.org/atomic&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;golang.org/x/sync/errgroup&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;go.uber.org/atomic&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;golang.org/x/sync/errgroup&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="包名">包名&lt;/h3>
&lt;p>当命名包时，请按下面规则选择一个名称：&lt;/p>
&lt;ul>
&lt;li>全部小写。没有大写或下划线。&lt;/li>
&lt;li>大多数使用命名导入的情况下，不需要重命名。&lt;/li>
&lt;li>简短而简洁。请记住，在每个使用的地方都完整标识了该名称。&lt;/li>
&lt;li>不用复数。例如&lt;code>net/url&lt;/code>，而不是&lt;code>net/urls&lt;/code>。&lt;/li>
&lt;li>不要用“common”，“util”，“shared”或“lib”。这些是不好的，信息量不足的名称。&lt;/li>
&lt;/ul>
&lt;p>另请参阅 &lt;a href="https://blog.golang.org/package-names">Package Names&lt;/a> 和 &lt;a href="https://rakyll.org/style-packages/">Go 包样式指南&lt;/a>.&lt;/p>
&lt;h3 id="函数名">函数名&lt;/h3>
&lt;p>我们遵循 Go 社区关于使用 &lt;a href="https://golang.org/doc/effective_go.html#mixed-caps">MixedCaps 作为函数名&lt;/a> 的约定。有一个例外，为了对相关的测试用例进行分组，函数名可能包含下划线，如：&lt;code>TestMyFunction_WhatIsBeingTested&lt;/code>.&lt;/p>
&lt;h3 id="导入别名">导入别名&lt;/h3>
&lt;p>如果程序包名称与导入路径的最后一个元素不匹配，则必须使用导入别名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span style="color:#000">client&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example.com/client-go&amp;#34;&lt;/span>
&lt;span style="color:#000">trace&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;example.com/trace/v2&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在所有其他情况下，除非导入之间有直接冲突，否则应避免导入别名。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#000">nettrace&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;golang.net/x/trace&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;runtime/trace&amp;#34;&lt;/span>
&lt;span style="color:#000">nettrace&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;golang.net/x/trace&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="函数分组与顺序">函数分组与顺序&lt;/h3>
&lt;ul>
&lt;li>函数应按粗略的调用顺序排序。&lt;/li>
&lt;li>同一文件中的函数应按接收者分组。&lt;/li>
&lt;/ul>
&lt;p>因此，导出的函数应先出现在文件中，放在&lt;code>struct&lt;/code>, &lt;code>const&lt;/code>, &lt;code>var&lt;/code>定义的后面。&lt;/p>
&lt;p>在定义类型之后，但在接收者的其余方法之前，可能会出现一个 &lt;code>newXYZ()&lt;/code>/&lt;code>NewXYZ()&lt;/code>&lt;/p>
&lt;p>由于函数是按接收者分组的，因此普通工具函数应在文件末尾出现。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">something&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Cost&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">calcCost&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">weights&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">something&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">calcCost&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">something&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Stop&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">newSomething&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">something&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">something&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">something&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">newSomething&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">something&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">something&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">something&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Cost&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">calcCost&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">weights&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">something&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Stop&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">calcCost&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="减少嵌套">减少嵌套&lt;/h3>
&lt;p>代码应通过尽可能先处理错误情况/特殊情况并尽早返回或继续循环来减少嵌套。减少嵌套多个级别的代码的代码量。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">F1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">v&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">process&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Call&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Send&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Invalid v: %v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">F1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Invalid v: %v&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">continue&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">v&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">process&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Call&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Send&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="不必要的-else">不必要的 else&lt;/h3>
&lt;p>如果在 if 的两个分支中都设置了变量，则可以将其替换为单个 if。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="顶层变量声明">顶层变量声明&lt;/h3>
&lt;p>在顶层，使用标准&lt;code>var&lt;/code>关键字。请勿指定类型，除非它与表达式的类型不同。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_s&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">F&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">F&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;A&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_s&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">F&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 由于 F 已经明确了返回一个字符串类型，因此我们没有必要显式指定_s 的类型
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// 还是那种类型
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">F&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;A&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>如果表达式的类型与所需的类型不完全匹配，请指定类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">myError&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">myError&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Error&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;error&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">F&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">myError&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">myError&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">_e&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">F&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// F 返回一个 myError 类型的实例，但是我们要 error 类型
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="对于未导出的顶层常量和变量使用_作为前缀">对于未导出的顶层常量和变量，使用_作为前缀&lt;/h3>
&lt;p>在未导出的顶级&lt;code>vars&lt;/code>和&lt;code>consts&lt;/code>， 前面加上前缀_，以使它们在使用时明确表示它们是全局符号。&lt;/p>
&lt;p>例外：未导出的错误值，应以&lt;code>err&lt;/code>开头。&lt;/p>
&lt;p>基本依据：顶级变量和常量具有包范围作用域。使用通用名称可能很容易在其他文件中意外使用错误的值。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// foo.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">defaultPort&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>
&lt;span style="color:#000">defaultUser&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;user&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// bar.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Bar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">defaultPort&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">9090&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Default port&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">defaultPort&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// We will not see a compile error if the first line of
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Bar() is deleted.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// foo.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">_defaultPort&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>
&lt;span style="color:#000">_defaultUser&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;user&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="结构体中的嵌入">结构体中的嵌入&lt;/h3>
&lt;p>嵌入式类型（例如 mutex）应位于结构体内的字段列表的顶部，并且必须有一个空行将嵌入式字段与常规字段分隔开。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Client&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">version&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Client&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Client&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Client&lt;/span>
&lt;span style="color:#000">version&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>内嵌应该提供切实的好处，比如以语义上合适的方式添加或增强功能。
它应该在对用户不利影响的情况下完成这项工作（另请参见：&lt;code>避免在公共结构中嵌入类型&lt;/code>&lt;a href="#avoid-embedding-types-in-public-structs">Avoid Embedding Types in Public Structs&lt;/a>）。&lt;/p>
&lt;p>嵌入 &lt;strong>不应该&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>纯粹是为了美观或方便。&lt;/li>
&lt;li>使外部类型更难构造或使用。&lt;/li>
&lt;li>影响外部类型的零值。如果外部类型有一个有用的零值，则在嵌入内部类型之后应该仍然有一个有用的零值。&lt;/li>
&lt;li>作为嵌入内部类型的副作用，从外部类型公开不相关的函数或字段。&lt;/li>
&lt;li>公开未导出的类型。&lt;/li>
&lt;li>影响外部类型的复制形式。&lt;/li>
&lt;li>更改外部类型的API或类型语义。&lt;/li>
&lt;li>嵌入内部类型的非规范形式。&lt;/li>
&lt;li>公开外部类型的实现详细信息。&lt;/li>
&lt;li>允许用户观察或控制类型内部。&lt;/li>
&lt;li>通过包装的方式改变内部函数的一般行为，这种包装方式会给用户带来一些意料之外情况。&lt;/li>
&lt;/ul>
&lt;p>简单地说，有意识地和有目的地嵌入。一种很好的测试体验是，
&amp;ldquo;是否所有这些导出的内部方法/字段都将直接添加到外部类型&amp;rdquo;
如果答案是&lt;code>some&lt;/code>或&lt;code>no&lt;/code>，不要嵌入内部类型-而是使用字段。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">A&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Bad: A.Lock() and A.Unlock() 现在可用
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 不提供任何功能性好处，并允许用户控制有关A的内部细节。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">countingWriteCloser&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Good: Write() 在外层提供用于特定目的，
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 并且委托工作到内部类型的Write()中。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">io&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteCloser&lt;/span>
&lt;span style="color:#000">count&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">countingWriteCloser&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bs&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">w&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">count&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bs&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">w&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteCloser&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bs&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Book&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Bad: 指针更改零值的有用性
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">io&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadWriter&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// other fields
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// later
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000">Book&lt;/span>
&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// panic: nil pointer
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// panic: nil pointer
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// panic: nil pointer
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Book&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Good: 有用的零值
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Buffer&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// other fields
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// later
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000">Book&lt;/span>
&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// ok
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// ok
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// ok
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Client&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>
&lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WaitGroup&lt;/span>
&lt;span style="color:#000">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Buffer&lt;/span>
&lt;span style="color:#000">url&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">URL&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Client&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">mtx&lt;/span> &lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Mutex&lt;/span>
&lt;span style="color:#000">wg&lt;/span> &lt;span style="color:#000">sync&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WaitGroup&lt;/span>
&lt;span style="color:#000">buf&lt;/span> &lt;span style="color:#000">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Buffer&lt;/span>
&lt;span style="color:#000">url&lt;/span> &lt;span style="color:#000">url&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">URL&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="使用字段名初始化结构体">使用字段名初始化结构体&lt;/h3>
&lt;p>初始化结构体时，应该指定字段名称。现在由 &lt;a href="https://golang.org/cmd/vet/">&lt;code>go vet&lt;/code>&lt;/a> 强制执行。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">k&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;John&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">k&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">FirstName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;John&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">LastName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">Admin&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>例外：如果有 3 个或更少的字段，则可以在测试表中省略字段名称。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">tests&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">op&lt;/span> &lt;span style="color:#000">Operation&lt;/span>
&lt;span style="color:#000">want&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}{&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;add&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Subtract&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;subtract&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="本地变量声明">本地变量声明&lt;/h3>
&lt;p>如果将变量明确设置为某个值，则应使用短变量声明形式 (&lt;code>:=&lt;/code>)。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>但是，在某些情况下，&lt;code>var&lt;/code> 使用关键字时默认值会更清晰。例如，声明空切片。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">list&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">filtered&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">list&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">filtered&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filtered&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">list&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">filtered&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">list&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">filtered&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filtered&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="nil-是一个有效的-slice">nil 是一个有效的 slice&lt;/h3>
&lt;p>&lt;code>nil&lt;/code> 是一个有效的长度为 0 的 slice，这意味着，&lt;/p>
&lt;ul>
&lt;li>
&lt;p>您不应明确返回长度为零的切片。应该返回&lt;code>nil&lt;/code> 来代替。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/li>
&lt;li>
&lt;p>要检查切片是否为空，请始终使用&lt;code>len(s) == 0&lt;/code>。而非 &lt;code>nil&lt;/code>。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">isEmpty&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">isEmpty&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/li>
&lt;li>
&lt;p>零值切片（用&lt;code>var&lt;/code>声明的切片）可立即使用，无需调用&lt;code>make()&lt;/code>创建。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">nums&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// or, nums := make([]int)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">add1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">nums&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nums&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">add2&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">nums&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nums&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">nums&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">add1&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">nums&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nums&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">add2&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">nums&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">nums&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;/li>
&lt;/ul>
&lt;p>记住，虽然nil切片是有效的切片，但它不等于长度为0的切片（一个为nil，另一个不是），并且在不同的情况下（例如序列化），这两个切片的处理方式可能不同。&lt;/p>
&lt;h3 id="缩小变量作用域">缩小变量作用域&lt;/h3>
&lt;p>如果有可能，尽量缩小变量作用范围。除非它与 &lt;a href="#%E5%87%8F%E5%B0%91%E5%B5%8C%E5%A5%97">减少嵌套&lt;/a>的规则冲突。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0644&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WriteFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0644&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>如果需要在 if 之外使用函数调用的结果，则不应尝试缩小范围。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">cfg&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Decode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cfg&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">ioutil&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReadFile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">cfg&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Decode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Println&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cfg&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="避免参数语义不明确avoid-naked-parameters">避免参数语义不明确(Avoid Naked Parameters)&lt;/h3>
&lt;p>函数调用中的&lt;code>意义不明确的参数&lt;/code>可能会损害可读性。当参数名称的含义不明显时，请为参数添加 C 样式注释 (&lt;code>/* ... */&lt;/code>)&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// func printInfo(name string, isLocal, done bool)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">printInfo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// func printInfo(name string, isLocal, done bool)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">printInfo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* isLocal */&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* done */&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>对于上面的示例代码，还有一种更好的处理方式是将上面的 &lt;code>bool&lt;/code> 类型换成自定义类型。将来，该参数可以支持不仅仅局限于两个状态（true/false）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Region&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">UnknownRegion&lt;/span> &lt;span style="color:#000">Region&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">iota&lt;/span>
&lt;span style="color:#000">Local&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Status&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">StatusReady&lt;/span> &lt;span style="color:#000">Status&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">iota&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#000">StatusDone&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Maybe we will have a StatusInProgress in the future.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">printInfo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">region&lt;/span> &lt;span style="color:#000">Region&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">status&lt;/span> &lt;span style="color:#000">Status&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用原始字符串字面值避免转义">使用原始字符串字面值，避免转义&lt;/h3>
&lt;p>Go 支持使用 &lt;a href="https://golang.org/ref/spec#raw_string_lit">原始字符串字面值&lt;/a>，也就是 &amp;quot; ` &amp;quot; 来表示原生字符串，在需要转义的场景下，我们应该尽量使用这种方案来替换。&lt;/p>
&lt;p>可以跨越多行并包含引号。使用这些字符串可以避免更难阅读的手工转义的字符串。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">wantError&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;unknown name:\&amp;#34;test\&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">wantError&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">`unknown error:&amp;#34;test&amp;#34;`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="初始化结构体">初始化结构体&lt;/h3>
&lt;h4 id="使用字段名初始化结构">使用字段名初始化结构&lt;/h4>
&lt;p>初始化结构时，几乎应该始终指定字段名。目前由&lt;a href="https://golang.org/cmd/vet/">&lt;code>go vet&lt;/code>&lt;/a>强制执行。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">k&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;John&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">k&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">FirstName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;John&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">LastName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">Admin&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>例外：当有3个或更少的字段时，测试表中的字段名&lt;em>may&lt;/em>可以省略。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">tests&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">op&lt;/span> &lt;span style="color:#000">Operation&lt;/span>
&lt;span style="color:#000">want&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}{&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Add&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;add&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Subtract&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;subtract&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="省略结构中的零值字段">省略结构中的零值字段&lt;/h4>
&lt;p>初始化具有字段名的结构时，除非提供有意义的上下文，否则忽略值为零的字段。
也就是，让我们自动将这些设置为零值&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">user&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">FirstName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;John&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">LastName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">MiddleName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">Admin&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">user&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">FirstName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;John&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">LastName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>这有助于通过省略该上下文中的默认值来减少阅读的障碍。只指定有意义的值。&lt;/p>
&lt;p>在字段名提供有意义上下文的地方包含零值。例如，&lt;a href="#%E8%A1%A8%E9%A9%B1%E5%8A%A8%E6%B5%8B%E8%AF%95">表驱动测试&lt;/a> 中的测试用例可以受益于字段的名称，即使它们是零值的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">tests&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">give&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000">want&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span>
&lt;span style="color:#000;font-weight:bold">}{&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">give&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">want&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="对零值结构使用-var">对零值结构使用 &lt;code>var&lt;/code>&lt;/h4>
&lt;p>如果在声明中省略了结构的所有字段，请使用 &lt;code>var&lt;/code> 声明结构。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">user&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">User&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">user&lt;/span> &lt;span style="color:#000">User&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>这将零值结构与那些具有类似于为[初始化 Maps]创建的,区别于非零值字段的结构区分开来，
并与我们更喜欢的&lt;a href="https://github.com/golang/go/wiki/CodeReviewComments#declaring-empty-slices">declare empty slices&lt;/a>方式相匹配。&lt;/p>
&lt;h4 id="初始化-struct-引用">初始化 Struct 引用&lt;/h4>
&lt;p>在初始化结构引用时，请使用&lt;code>&amp;amp;T{}&lt;/code>代替&lt;code>new(T)&lt;/code>，以使其与结构体初始化一致。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">sval&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// inconsistent
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">sptr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">new&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">sptr&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Name&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bar&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">sval&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">sptr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;bar&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="初始化-maps">初始化 Maps&lt;/h3>
&lt;p>对于空 map 请使用 &lt;code>make(..)&lt;/code> 初始化， 并且 map 是通过编程方式填充的。
这使得 map 初始化在表现上不同于声明，并且它还可以方便地在 make 后添加大小提示。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// m1 读写安全;
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// m2 在写入时会 panic
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">m1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">T2&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#000">m2&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">T2&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// m1 读写安全;
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// m2 在写入时会 panic
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">m1&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">T2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">m2&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">T2&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;p>声明和初始化看起来非常相似的。&lt;/p>
&lt;/td>&lt;td>
&lt;p>声明和初始化看起来差别非常大。&lt;/p>
&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>在尽可能的情况下，请在初始化时提供 map 容量大小，详细请看 &lt;a href="#%E6%8C%87%E5%AE%9AMap%E5%AE%B9%E9%87%8F%E6%8F%90%E7%A4%BA">指定Map容量提示&lt;/a>。&lt;/p>
&lt;p>另外，如果 map 包含固定的元素列表，则使用 map literals(map 初始化列表) 初始化映射。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">m&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">T2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">k1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v1&lt;/span>
&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">k2&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v2&lt;/span>
&lt;span style="color:#000">m&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">k3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">v3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">m&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">map&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#000">T2&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">k1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">v1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">k2&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">v2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">k3&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">v3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>基本准则是：在初始化时使用 map 初始化列表 来添加一组固定的元素。否则使用 &lt;code>make&lt;/code> (如果可以，请尽量指定 map 容量)。&lt;/p>
&lt;h3 id="字符串-string-format">字符串 string format&lt;/h3>
&lt;p>如果你在函数外声明&lt;code>Printf&lt;/code>-style 函数的格式字符串，请将其设置为&lt;code>const&lt;/code>常量。&lt;/p>
&lt;p>这有助于&lt;code>go vet&lt;/code>对格式字符串执行静态分析。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">msg&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;unexpected values %v, %v\n&amp;#34;&lt;/span>
&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#000">msg&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;unexpected values %v, %v\n&amp;#34;&lt;/span>
&lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">msg&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;h3 id="命名-printf-样式的函数">命名 Printf 样式的函数&lt;/h3>
&lt;p>声明&lt;code>Printf&lt;/code>-style 函数时，请确保&lt;code>go vet&lt;/code>可以检测到它并检查格式字符串。&lt;/p>
&lt;p>这意味着您应尽可能使用预定义的&lt;code>Printf&lt;/code>-style 函数名称。&lt;code>go vet&lt;/code>将默认检查这些。有关更多信息，请参见 &lt;a href="https://golang.org/cmd/vet/#hdr-Printf_family">Printf 系列&lt;/a>。&lt;/p>
&lt;p>如果不能使用预定义的名称，请以 f 结束选择的名称：&lt;code>Wrapf&lt;/code>，而不是&lt;code>Wrap&lt;/code>。&lt;code>go vet&lt;/code>可以要求检查特定的 Printf 样式名称，但名称必须以&lt;code>f&lt;/code>结尾。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ go vet -printfuncs&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>wrapf,statusf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>另请参阅 &lt;a href="https://kuzminva.wordpress.com/2017/11/07/go-vet-printf-family-check/">go vet: Printf family check&lt;/a>.&lt;/p>
&lt;h2 id="编程模式">编程模式&lt;/h2>
&lt;h3 id="表驱动测试">表驱动测试&lt;/h3>
&lt;p>当测试逻辑是重复的时候，通过 &lt;a href="https://blog.golang.org/subtests">subtests&lt;/a> 使用 table 驱动的方式编写 case 代码看上去会更简洁。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// func TestSplitHostPort(t *testing.T)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">net&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SplitHostPort&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;192.0.2.0:8000&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">require&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NoError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;192.0.2.0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;8000&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">net&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SplitHostPort&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;192.0.2.0:http&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">require&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NoError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;192.0.2.0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">net&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SplitHostPort&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;:8000&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">require&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NoError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;8000&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">net&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SplitHostPort&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;1:8&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">require&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NoError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;8&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// func TestSplitHostPort(t *testing.T)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">tests&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">give&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000">wantHost&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000">wantPort&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}{&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">give&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;192.0.2.0:8000&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wantHost&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;192.0.2.0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wantPort&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;8000&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">give&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;192.0.2.0:http&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wantHost&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;192.0.2.0&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wantPort&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;http&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">give&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;:8000&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wantHost&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wantPort&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;8000&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">give&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;1:8&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wantHost&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">wantPort&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;8&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">},&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tt&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">tests&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Run&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">give&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">testing&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">net&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SplitHostPort&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">tt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">give&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">require&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NoError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">wantHost&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">assert&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Equal&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">wantPort&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>很明显，使用 test table 的方式在代码逻辑扩展的时候，比如新增 test case，都会显得更加的清晰。&lt;/p>
&lt;p>我们遵循这样的约定：将结构体切片称为&lt;code>tests&lt;/code>。 每个测试用例称为&lt;code>tt&lt;/code>。此外，我们鼓励使用&lt;code>give&lt;/code>和&lt;code>want&lt;/code>前缀说明每个测试用例的输入和输出值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">tests&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">give&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000">wantHost&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000">wantPort&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#000;font-weight:bold">}{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tt&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">tests&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="功能选项">功能选项&lt;/h3>
&lt;p>功能选项是一种模式，您可以在其中声明一个不透明 Option 类型，该类型在某些内部结构中记录信息。您接受这些选项的可变编号，并根据内部结构上的选项记录的全部信息采取行动。&lt;/p>
&lt;p>将此模式用于您需要扩展的构造函数和其他公共 API 中的可选参数，尤其是在这些功能上已经具有三个或更多参数的情况下。&lt;/p>
&lt;table>
&lt;thead>&lt;tr>&lt;th>Bad&lt;/th>&lt;th>Good&lt;/th>&lt;/tr>&lt;/thead>
&lt;tbody>
&lt;tr>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// package db
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">addr&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">cache&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">logger&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Logger&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Connection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// package db
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Option&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">WithCache&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Option&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">WithLogger&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">log&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Logger&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Option&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Open creates a connection.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">addr&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">opts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000">Option&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Connection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;tr>&lt;td>
&lt;p>必须始终提供缓存和记录器参数，即使用户希望使用默认值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DefaultCache&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewNop&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">DefaultCache&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* cache */&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewNop&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* cache */&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;td>
&lt;p>只有在需要时才提供选项。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithLogger&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithCache&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithCache&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">WithLogger&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/td>&lt;/tr>
&lt;/tbody>&lt;/table>
&lt;p>Our suggested way of implementing this pattern is with an &lt;code>Option&lt;/code> interface
that holds an unexported method, recording options on an unexported &lt;code>options&lt;/code>
struct.&lt;/p>
&lt;p>我们建议实现此模式的方法是使用一个 &lt;code>Option&lt;/code> 接口，该接口保存一个未导出的方法，在一个未导出的 &lt;code>options&lt;/code> 结构上记录选项。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">options&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">cache&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>
&lt;span style="color:#000">logger&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Logger&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Option&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">apply&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">cacheOption&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#000">cacheOption&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">apply&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">opts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cache&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">WithCache&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Option&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">cacheOption&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">loggerOption&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">Log&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Logger&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span> &lt;span style="color:#000">loggerOption&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">apply&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">opts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">opts&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">logger&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Log&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">WithLogger&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">log&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Logger&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Option&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">loggerOption&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">Log&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">log&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Open creates a connection.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">addr&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">opts&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>&lt;span style="color:#000">Option&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Connection&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">options&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">cache&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">defaultCache&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">logger&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">zap&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewNop&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">o&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">range&lt;/span> &lt;span style="color:#000">opts&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">o&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">apply&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">options&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意: 还有一种使用闭包实现这个模式的方法，但是我们相信上面的模式为作者提供了更多的灵活性，并且更容易对用户进行调试和测试。特别是，在不可能进行比较的情况下它允许在测试和模拟中对选项进行比较。此外，它还允许选项实现其他接口，包括 &lt;code>fmt.Stringer&lt;/code>，允许用户读取选项的字符串表示形式。&lt;/p>
&lt;p>还可以参考下面资料：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html">Self-referential functions and the design of options&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis">Functional options for friendly APIs&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;!-- TODO: replace this with parameter structs and functional options, when to
use one vs other -->
&lt;h2 id="linting">Linting&lt;/h2>
&lt;p>比任何 &amp;ldquo;blessed&amp;rdquo; linter 集更重要的是，lint在一个代码库中始终保持一致。&lt;/p>
&lt;p>我们建议至少使用以下linters，因为我认为它们有助于发现最常见的问题，并在不需要规定的情况下为代码质量建立一个高标准：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/kisielk/errcheck">errcheck&lt;/a> 以确保错误得到处理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://godoc.org/golang.org/x/tools/cmd/goimports">goimports&lt;/a> 格式化代码和管理 imports&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/golang/lint">golint&lt;/a> 指出常见的文体错误&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://golang.org/cmd/vet/">govet&lt;/a> 分析代码中的常见错误&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://staticcheck.io/">staticcheck&lt;/a> 各种静态分析检查&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="lint-runners">Lint Runners&lt;/h3>
&lt;p>我们推荐 &lt;a href="https://github.com/golangci/golangci-lint">golangci-lint&lt;/a> 作为go-to lint的运行程序，这主要是因为它在较大的代码库中的性能以及能够同时配置和使用许多规范。这个repo有一个示例配置文件&lt;a href="https://github.com/uber-go/guide/blob/master/.golangci.yml">.golangci.yml&lt;/a>和推荐的linter设置。&lt;/p>
&lt;p>golangci-lint 有&lt;a href="https://golangci-lint.run/usage/linters/">various-linters&lt;/a>可供使用。建议将上述linters作为基本set，我们鼓励团队添加对他们的项目有意义的任何附加linters。&lt;/p></description></item><item><title>Docs: Python集成开发环境/编辑工具代码检查插件设置</title><link>/docs/pythoncodingstyle/python_ide_settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/pythoncodingstyle/python_ide_settings/</guid><description>
&lt;h2 id="常用编辑器">常用编辑器&lt;/h2>
&lt;p>区别于Java或者C这类需要编译的软件，Python在开发时几乎不需要专用的编辑软件，但是一个优秀的IDE总是能在开发时提供巨大的帮助。&lt;/p>
&lt;p>Python常用的编辑器有PyCharm、VS Code、vim、Eclipse with PyDev、Sublime Text、Emacs、Wing、PyScripter、The Eric Python IDE等，选择一款适自己喜欢的就好。这里主要介绍的 是PyCharm和VS Code。&lt;/p>
&lt;h2 id="pylint">PyLint&lt;/h2>
&lt;p>Pylint 是一个 Python 代码分析工具，它分析 Python 代码中的错误，查找不符合代码风格标准（Pylint 默认使用的代码风格是 PEP 8，具体信息，请参阅参考资料）和有潜在问题的代码。&lt;/p>
&lt;ul>
&lt;li>Pylint 是一个 Python 工具，除了平常代码分析工具的作用之外，它提供了更多的功能：如检查一行代码的长度，变量名是否符合命名标准，一个声明过的接口是否被真正实现等等。&lt;/li>
&lt;li>Pylint 的一个很大的好处是它的高可配置性，高可定制性，并且可以很容易写小插件来添加功能。&lt;/li>
&lt;li>如果运行两次 Pylint，它会同时显示出当前和上次的运行结果，从而可以看出代码质量是否得到了改进。&lt;/li>
&lt;/ul>
&lt;h2 id="yapf">YAPF&lt;/h2>
&lt;p>目前用于Python的格式化程序（如autopep8和pep8ify）都用于删除代码中的lint错误。这有很明显的局限性。&lt;/p>
&lt;p>YAPF采用了不同的方法，基于Daniel Jasper开发的“&amp;lsquo;clang-format”。从本质上来说，该算法取走代码并重新排版，以符合样式指南的最佳格式，即便原始代码没有违反样式指南。这个想法也是类似于Go编程语言的gofmt工具。&lt;/p>
&lt;p>其最终目标是让YAPE所产生的代码可以与程序员所写的代码一样好（前提是程序员遵循样式指南），它取代了一些维护代码的苦差。&lt;/p>
&lt;h2 id="pycharm安装代码审查插件">PyCharm安装代码审查插件&lt;/h2>
&lt;h3 id="安装插件">安装插件&lt;/h3>
&lt;p>不管是否安装IDE的代码格式化插件，要使用PyLint及YAPF 首先得安装他们：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pip install pylint
pip install yapf
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Tip: 由于PyLint审查代码时的一下问题，如果项目存在&lt;code>虚拟环境&lt;/code>，为了避免PyLint误报找不到module，建议将&lt;code>pylint&lt;/code>安装在虚拟环境中。&lt;/p>
&lt;/blockquote>
&lt;p>在PyCharm插件市场中搜索&lt;code>PyLint&lt;/code>和&lt;code>yapf-pycharm&lt;/code>两个插件，然后重启PyCharm。&lt;/p>
&lt;p>&lt;img src="/images/image-20210909154713560.png" alt="image-20210909154713560">&lt;/p>
&lt;p>&lt;img src="/images/image-20210909154858917.png" alt="image-20210909154858917">&lt;/p>
&lt;h3 id="配置pylint">配置PyLint&lt;/h3>
&lt;p>可以通过执行&lt;code>pylint --generate-rcfile&lt;/code>生成配置文件模板（默认会在pylint可执行文件的所在的目录下），可以在模板文件上定制相关的统一的配置文件。配置完成后将配置文件路径填入PyCharm：&lt;/p>
&lt;p>&lt;img src="/images/image-20210909160427685.png" alt="image-20210909160427685">&lt;/p>
&lt;p>下面是Google推荐的pylintrc配置：&lt;/p>
&lt;pre tabindex="0">&lt;code># This Pylint rcfile contains a best-effort configuration to uphold the
# best-practices and style described in the Google Python style guide:
# https://google.github.io/styleguide/pyguide.html
#
# Its canonical open-source location is:
# https://google.github.io/styleguide/pylintrc
[MASTER]
# Files or directories to be skipped. They should be base names, not paths.
ignore=third_party
# Files or directories matching the regex patterns are skipped. The regex
# matches against base names, not paths.
ignore-patterns=
# Pickle collected data for later comparisons.
persistent=no
# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=
# Use multiple processes to speed up Pylint.
jobs=4
# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no
[MESSAGES CONTROL]
# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=
# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the &amp;quot;--disable&amp;quot; option for examples.
#enable=
# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use &amp;quot;--disable=all&amp;quot; to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use &amp;quot;--disable=all
# --enable=similarities&amp;quot;. If you want to run only the classes checker, but have
# no Warning level messages displayed, use&amp;quot;--disable=all --enable=classes
# --disable=W&amp;quot;
disable=abstract-method,
apply-builtin,
arguments-differ,
attribute-defined-outside-init,
backtick,
bad-option-value,
basestring-builtin,
buffer-builtin,
c-extension-no-member,
consider-using-enumerate,
cmp-builtin,
cmp-method,
coerce-builtin,
coerce-method,
delslice-method,
div-method,
duplicate-code,
eq-without-hash,
execfile-builtin,
file-builtin,
filter-builtin-not-iterating,
fixme,
getslice-method,
global-statement,
hex-method,
idiv-method,
implicit-str-concat-in-sequence,
import-error,
import-self,
import-star-module-level,
inconsistent-return-statements,
input-builtin,
intern-builtin,
invalid-str-codec,
locally-disabled,
long-builtin,
long-suffix,
map-builtin-not-iterating,
misplaced-comparison-constant,
missing-function-docstring,
metaclass-assignment,
next-method-called,
next-method-defined,
no-absolute-import,
no-else-break,
no-else-continue,
no-else-raise,
no-else-return,
no-init, # added
no-member,
no-name-in-module,
no-self-use,
nonzero-method,
oct-method,
old-division,
old-ne-operator,
old-octal-literal,
old-raise-syntax,
parameter-unpacking,
print-statement,
raising-string,
range-builtin-not-iterating,
raw_input-builtin,
rdiv-method,
reduce-builtin,
relative-import,
reload-builtin,
round-builtin,
setslice-method,
signature-differs,
standarderror-builtin,
suppressed-message,
sys-max-int,
too-few-public-methods,
too-many-ancestors,
too-many-arguments,
too-many-boolean-expressions,
too-many-branches,
too-many-instance-attributes,
too-many-locals,
too-many-nested-blocks,
too-many-public-methods,
too-many-return-statements,
too-many-statements,
trailing-newlines,
unichr-builtin,
unicode-builtin,
unnecessary-pass,
unpacking-in-except,
useless-else-on-loop,
useless-object-inheritance,
useless-suppression,
using-cmp-argument,
wrong-import-order,
xrange-builtin,
zip-builtin-not-iterating,
[REPORTS]
# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text
# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name &amp;quot;pylint_global.[txt|html]&amp;quot;. This option is deprecated
# and it will be removed in Pylint 2.0.
files-output=no
# Tells whether to display a full report or only the messages
reports=no
# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)
# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=
[BASIC]
# Good variable names which should always be accepted, separated by a comma
good-names=main,_
# Bad variable names which should always be refused, separated by a comma
bad-names=
# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=
# Include a hint for the correct naming format with invalid-name
include-naming-hint=no
# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
property-classes=abc.abstractproperty,cached_property.cached_property,cached_property.threaded_cached_property,cached_property.cached_property_with_ttl,cached_property.threaded_cached_property_with_ttl
# Regular expression matching correct function names
function-rgx=^(?:(?P&amp;lt;exempt&amp;gt;setUp|tearDown|setUpModule|tearDownModule)|(?P&amp;lt;camel_case&amp;gt;_?[A-Z][a-zA-Z0-9]*)|(?P&amp;lt;snake_case&amp;gt;_?[a-z][a-z0-9_]*))$
# Regular expression matching correct variable names
variable-rgx=^[a-z][a-z0-9_]*$
# Regular expression matching correct constant names
const-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$
# Regular expression matching correct attribute names
attr-rgx=^_{0,2}[a-z][a-z0-9_]*$
# Regular expression matching correct argument names
argument-rgx=^[a-z][a-z0-9_]*$
# Regular expression matching correct class attribute names
class-attribute-rgx=^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$
# Regular expression matching correct inline iteration names
inlinevar-rgx=^[a-z][a-z0-9_]*$
# Regular expression matching correct class names
class-rgx=^_?[A-Z][a-zA-Z0-9]*$
# Regular expression matching correct module names
module-rgx=^(_?[a-z][a-z0-9_]*|__init__)$
# Regular expression matching correct method names
method-rgx=(?x)^(?:(?P&amp;lt;exempt&amp;gt;_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P&amp;lt;camel_case&amp;gt;_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P&amp;lt;snake_case&amp;gt;_{0,2}[a-z][a-z0-9_]*))$
# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=(__.*__|main|test.*|.*test|.*Test)$
# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=10
[TYPECHECK]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager,contextlib2.contextmanager
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with &amp;quot;mixin&amp;quot; (case insensitive).
ignore-mixin-members=yes
# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=
# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local
# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=
[FORMAT]
# Maximum number of characters on a single line.
max-line-length=80
# TODO(https://github.com/PyCQA/pylint/issues/3352): Direct pylint to exempt
# lines made too long by directives to pytype.
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=(?x)(
^\s*(\#\ )?&amp;lt;?https?://\S+&amp;gt;?$|
^\s*(from\s+\S+\s+)?import\s+.+$)
# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=yes
# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1 : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check=
# Maximum number of lines in a module
max-module-lines=99999
# String used as indentation unit. The internal Google style guide mandates 2
# spaces. Google's externaly-published style guide says 4, consistent with
# PEP 8. Here, we use 2 spaces, for conformity with many open-sourced Google
# projects (like TensorFlow).
indent-string=' '
# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=
[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes=TODO
[STRING]
# This flag controls whether inconsistent-quotes generates a warning when the
# character used as a quote delimiter is used inconsistently within a module.
check-quote-consistency=yes
[VARIABLES]
# Tells whether we should check for unused import in __init__ files.
init-import=no
# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=^\*{0,2}(_$|unused_|dummy_)
# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=
# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,_cb
# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six,six.moves,past.builtins,future.builtins,functools
[LOGGING]
# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging,absl.logging,tensorflow.io.logging
[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines=4
# Ignore comments when computing similarities.
ignore-comments=yes
# Ignore docstrings when computing similarities.
ignore-docstrings=yes
# Ignore imports when computing similarities.
ignore-imports=no
[SPELLING]
# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict=
# List of comma separated words that should not be checked.
spelling-ignore-words=
# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file=
# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no
[IMPORTS]
# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,
TERMIOS,
Bastion,
rexec,
sets
# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=
# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=
# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=
# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=
# Force import order to recognize a module as part of a third party library.
known-third-party=enchant, absl
# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no
[CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,
__new__,
setUp
# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,
_fields,
_replace,
_source,
_make
# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls,
class_
# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs
[EXCEPTIONS]
# Exceptions that will emit a warning when being caught. Defaults to
# &amp;quot;Exception&amp;quot;
overgeneral-exceptions=StandardError,
Exception,
BaseException
&lt;/code>&lt;/pre>&lt;h3 id="配置yapf">配置YAPF&lt;/h3>
&lt;p>使用命令&lt;code>yapf --style-help &amp;gt; yapf_style.cfg&lt;/code>生成YAPF的配置文件，将&lt;code>yapf_style.cfg&lt;/code>放在工程目录下，或者与要格式化的文件在同一目录&lt;/p>
&lt;p>如果想一劳永逸的话，可以将&lt;code>yapf_style.cfg&lt;/code>改名为&lt;code>style&lt;/code>，直接放入&lt;code>$HOME/.config/yapf/&lt;/code>下，其中HOME目录在windows上需要自己设置添加进PATH，Linux和Mac os就是~，这时yapfArgs可以不写入配置。&lt;/p>
&lt;p>如果要使用&lt;code>Google-Python-Style-Guide&lt;/code>中的代码规范，可以在配置文件中加入下列语句：&lt;/p>
&lt;pre tabindex="0">&lt;code># YAPF uses the Google Python style
based_on_style = google
indent_width: 4
&lt;/code>&lt;/pre>&lt;h3 id="使用yapf插件">使用YAPF插件&lt;/h3>
&lt;p>PyCharm中使用YAPF及PyLint工具还是比较方便的：&lt;/p>
&lt;p>&lt;img src="/images/image-20210909163242645.png" alt="image-20210909163242645">&lt;/p>
&lt;p>如上图，我们可以在&lt;code>Code &amp;gt; Reformat code (YAPF)&lt;/code>中格式化文件，也可以在编写时直接使用快捷键(&lt;code>Meta+Alt+L&lt;/code>)。&lt;/p>
&lt;h3 id="使用pylint插件">使用PyLint插件&lt;/h3>
&lt;p>一般来讲，安装完之后PyCharm底部会出现如下窗口：&lt;/p>
&lt;p>&lt;img src="/images/image-20210909163656145.png" alt="image-20210909163656145">&lt;/p>
&lt;p>在本窗口可以选择单文件扫描、模块扫描或工程扫描，扫描完成PyLint会有相应结果提示。&lt;/p></description></item><item><title>Docs: 可行性研究报告</title><link>/docs/documentationstyleguide/gb856t88/feasibilityanalysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/feasibilityanalysis/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>说明编写本可行性研究报告的目的，指出预期的读者。&lt;/p>
&lt;h3 id="12背景">1.2背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>所建议开发的软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本项目的任务提出者、开发者、用户及实现该软件的计算中心或计算机网络；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该软件系统同其他系统或其他机构的基本的相互来往关系。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到的专门术语的定义和外文首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出用得着的参考资料，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的经核准的计划任务书或合同、上级机关的批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表的文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处引用的文件、资料，包括所需用到的软件开发标准。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>列出这些文件资料的标题、文件编号、发表日期和出版单位，说明能够得到这些文件资料的来源。&lt;/p>
&lt;h2 id="2可行性研究的前提">2可行性研究的前提&lt;/h2>
&lt;p>说明对所建议的开发项目进行可行性研究的前提，如要求、目标、假定、限制等。&lt;/p>
&lt;h3 id="21要求">2.1要求&lt;/h3>
&lt;p>说明对所建议开发的软件的基本要求，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>功能；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>性能；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输出如报告、文件或数据，对每项输出要说明其特征，如用途、产生频度、接口以及分发对象；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输入说明系统的输入，包括数据的来源、类型、数量、数据的组织以及提供的频度；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>处理流程和数据流程用图表的方式表示出最基本的数据流程和处理流程，并辅之以叙述；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在安全与保密方面的要求；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同本系统相连接的其他系统；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>完成期限。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22目标">2.2目标&lt;/h3>
&lt;p>说明所建议系统的主要开发目标，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>人力与设备费用的减少；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>处理速度的提高；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>控制精度或生产能力的提高；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>管理信息服务的改进；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动决策系统的改进；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>人员利用率的改进。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="23条件假定和限制">2.3条件、假定和限制&lt;/h3>
&lt;p>说明对这项开发中给出的条件、假定和所受到的限制，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>所建议系统的运行寿命的最小值；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进行系统方案选择比较的时间；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>经费、投资方面的来源和限制；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>法律和政策方面的限制；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>硬件、软件、运行环境和开发环境方面的条件和限制；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可利用的信息和资源；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>系统投入使用的最晚时间。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="24进行可行性研究的方法">2.4进行可行性研究的方法&lt;/h3>
&lt;p>说明这项可行性研究将是如何进行的，所建议的系统将是如何评价的。摘要说明所使用的基本方法
和策略，如调查、加权、确定模型、建立基准点或仿真等。&lt;/p>
&lt;h3 id="25评价尺度">2.5评价尺度&lt;/h3>
&lt;p>说明对系统进行评价时所使用的主要尺度，如费用的多少、各项功能的优先次序、开发时间的长短
及使用中的难易程度。&lt;/p>
&lt;h2 id="3对现有系统的分析">3对现有系统的分析&lt;/h2>
&lt;p>这里的现有系统是指当前实际使用的系统，这个系统可能是计算机系统，也可能是一个机械系统甚
至是一个人工系统。&lt;/p>
&lt;p>分析现有系统的目的是为了进一步阐明建议中的开发新系统或修改现有系统的必要性。&lt;/p>
&lt;h3 id="31处理流程和数据流程">3.1处理流程和数据流程&lt;/h3>
&lt;p>说明现有系统的基本的处理流程和数据流程。此流程可用图表即流程图的形式表示，并加以叙述。&lt;/p>
&lt;h3 id="32工作负荷">3.2工作负荷&lt;/h3>
&lt;p>列出现有系统所承担的工作及工作量。&lt;/p>
&lt;h3 id="33费用开支">3.3费用开支&lt;/h3>
&lt;p>列出由于运行现有系统所引起的费用开支，如人力、设备、空间、支持性服务、材料等项开支以及开
支总额。&lt;/p>
&lt;h3 id="34人员">3.4人员&lt;/h3>
&lt;p>列出为了现有系统的运行和维护所需要的人员的专业技术类别和数量。&lt;/p>
&lt;h3 id="35设备">3.5设备&lt;/h3>
&lt;p>列出现有系统所使用的各种设备。&lt;/p>
&lt;h3 id="36局限性">3.6局限性&lt;/h3>
&lt;p>列出本系统的主要的局限性，例如处理时间赶不上需要，响应不及时，数据存储能力不足，处理功能
不够等。并且要说明，为什么对现有系统的改进性维护已经不能解决问题。&lt;/p>
&lt;h2 id="4所建议的系统">4所建议的系统&lt;/h2>
&lt;p>本章将用来说明所建议系统的目标和要求将如何被满足。&lt;/p>
&lt;h3 id="41对所建议系统的说明">4.1对所建议系统的说明&lt;/h3>
&lt;p>概括地说明所建议系统，并说明在第2章中列出的那些要求将如何得到满足，说明所使用的基本方法及理论根据。&lt;/p>
&lt;h3 id="42处理流程和数据流程">4.2处理流程和数据流程&lt;/h3>
&lt;p>给出所建议系统的处理流程和数据流程。&lt;/p>
&lt;h3 id="43改进之处">4.3改进之处&lt;/h3>
&lt;p>按2.2条中列出的目标，逐项说明所建议系统相对于现存系统具有的改进。&lt;/p>
&lt;h3 id="44影响">4.4影响&lt;/h3>
&lt;p>说明在建立所建议系统时，预期将带来的影响，包括：&lt;/p>
&lt;h4 id="441对设备的影响">4.4.1对设备的影响&lt;/h4>
&lt;p>说明新提出的设备要求及对现存系统中尚可使用的设备须作出的修改。&lt;/p>
&lt;h4 id="442对软件的影响">4.4.2对软件的影响&lt;/h4>
&lt;p>说明为了使现存的应用软件和支持软件能够同所建议系统相适应。而需要对这些软件所进行的修改和补充。&lt;/p>
&lt;h4 id="443对用户单位机构的影响">4.4.3对用户单位机构的影响&lt;/h4>
&lt;p>说明为了建立和运行所建议系统，对用户单位机构、人员的数量和技术水平等方面的全部要求。&lt;/p>
&lt;h4 id="444对系统运行过程的影响">4.4.4对系统运行过程的影响&lt;/h4>
&lt;p>说明所建议系统对运行过程的影响，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>用户的操作规程；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行中心的操作规程；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行中心与用户之间的关系；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>源数据的处理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据进入系统的过程；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对数据保存的要求，对数据存储、恢复的处理；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输出报告的处理过程、存储媒体和调度方法；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>系统失效的后果及恢复的处理办法。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="445对开发的影响">4.4.5对开发的影响&lt;/h4>
&lt;p>说明对开发的影响，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>为了支持所建议系统的开发，用户需进行的工作；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为了建立一个数据库所要求的数据资源；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>为了开发和测验所建议系统而需要的计算机资源；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所涉及的保密与安全问题。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="446对地点和设施的影响">4.4.6对地点和设施的影响&lt;/h4>
&lt;p>说明对建筑物改造的要求及对环境设施的要求。&lt;/p>
&lt;h4 id="447对经费开支的影响">4.4.7对经费开支的影响&lt;/h4>
&lt;p>扼要说明为了所建议系统的开发，设计和维持运行而需要的各项经费开支。&lt;/p>
&lt;h3 id="45局限性">4.5局限性&lt;/h3>
&lt;p>说明所建议系统尚存在的局限性以及这些问题未能消除的原因。&lt;/p>
&lt;h3 id="46技术条件方面的可行性">4.6技术条件方面的可行性&lt;/h3>
&lt;p>本节应说明技术条件方面的可行性，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在当前的限制条件下，该系统的功能目标能否达到；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>利用现有的技术，该系统的功能能否实现；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对开发人员的数量和质量的要求并说明这些要求能否满足；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在规定的期限内，本系统的开发能否完成。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="5可选择的其他系统方案">5可选择的其他系统方案&lt;/h2>
&lt;p>扼要说明曾考虑过的每一种可选择的系统方案，包括需开发的和可从国内国外直接购买的，如果没有供选择的系统方案可考虑，则说明这一点。&lt;/p>
&lt;h3 id="51可选择的系统方案1">5.1可选择的系统方案1&lt;/h3>
&lt;p>参照第4章的提纲，说明可选择的系统方案1，并说明它未被选中的理由。&lt;/p>
&lt;h3 id="52可选择的系统方案2">5.2可选择的系统方案2&lt;/h3>
&lt;p>按类似5.1条的方式说明第2个乃至第n个可选择的系统方案。&lt;/p>
&lt;p>&amp;hellip;&amp;hellip;&lt;/p>
&lt;h2 id="6投资及效益分析">6投资及效益分析&lt;/h2>
&lt;h3 id="61支出">6.1支出&lt;/h3>
&lt;p>对于所选择的方案，说明所需的费用。如果已有一个现存系统，则包括该系统继续运行期间所需的费用。&lt;/p>
&lt;h4 id="611基本建设投资">6.1.1基本建设投资&lt;/h4>
&lt;p>包括采购、开发和安装下列各项所需的费用，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>房屋和设施；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ADP设备；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据通讯设备；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>环境保护设备；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安全与保密设备；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ADP操作系统的和应用的软件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库管理软件。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="612其他一次性支出">6.1.2其他一次性支出&lt;/h4>
&lt;p>包括下列各项所需的费用，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>研究（需求的研究和设计的研究）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发计划与测量基准的研究；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库的建立；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ADP软件的转换；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>检查费用和技术管理性费用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>培训费、旅差费以及开发安装人员所需要的一次性支出；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>人员的退休及调动费用等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="613非一次性支出">6.1.3非一次性支出&lt;/h4>
&lt;p>列出在该系统生命期内按月或按季或按年支出的用于运行和维护的费用，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>设备的租金和维护费用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>软件的租金和维护费用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据通讯方面的租金和维护费用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>人员的工资、奖金；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>房屋、空间的使用开支；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>公用设施方面的开支；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保密安全方面的开支；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他经常性的支出等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="62收益">6.2收益&lt;/h3>
&lt;p>对于所选择的方案，说明能够带来的收益，这里所说的收益，表现为开支费用的减少或避免、差错的减少、灵活性的增加、动作速度的提高和管理计划方面的改进等，包括；&lt;/p>
&lt;h4 id="621一次性收益">6.2.1一次性收益&lt;/h4>
&lt;p>说明能够用人民币数目表示的一次性收益，可按数据处理、用户、管理和支持等项分类叙述，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>开支的缩减包括改进了的系统的运行所引起的开支缩减，如资源要求的减少，运行效率的改进，数据进入、存贮和恢复技术的改进，系统性能的可监控，软件的转换和优化，数据压缩技术的采用，处理的集中化／分布化等；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>价值的增升包括由于一个应用系统的使用价值的增升所引起的收益，如资源利用的改进，管理和运行效率的改进以及出错率的减少等；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他如从多余设备出售回收的收入等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="622非一次性收益">6.2.2非一次性收益&lt;/h4>
&lt;p>说明在整个系统生命期内由于运行所建议系统而导致的按月的、按年的能用人民币数目表示的收益，包括开支的减少和避免。&lt;/p>
&lt;h4 id="623不可定量的收益">6.2.3不可定量的收益&lt;/h4>
&lt;p>逐项列出无法直接用人民币表示的收益，如服务的改进，由操作失误引起的风险的减少，信息掌握情况的改进，组织机构给外界形象的改善等。有些不可捉摸的收益只能大概估计或进行极值估计（按最好和最差情况估计）。&lt;/p>
&lt;h3 id="63收益投资比">6.3收益／投资比&lt;/h3>
&lt;p>求出整个系统生命期的收益／投资比值。&lt;/p>
&lt;h3 id="64投资回收周期">6.4投资回收周期&lt;/h3>
&lt;p>求出收益的累计数开始超过支出的累计数的时间。&lt;/p>
&lt;h3 id="65敏感性分析">6.5敏感性分析&lt;/h3>
&lt;p>所谓敏感性分析是指一些关键性因素如系统生命期长度、系统的工作负荷量、工作负荷的类型与这些不同类型之间的合理搭配、处理速度要求、设备和软件的配置等变化时，对开支和收益的影响最灵敏的范围的估计。在敏感性分析的基础上做出的选择当然会比单一选择的结果要好一些。&lt;/p>
&lt;h2 id="7社会因素方面的可行性">7社会因素方面的可行性&lt;/h2>
&lt;p>本章用来说明对社会因素方面的可行性分析的结果，包括：&lt;/p>
&lt;h3 id="71法律方面的可行性">7.1法律方面的可行性&lt;/h3>
&lt;p>法律方面的可行性问题很多，如合同责任、侵犯专利权、侵犯版权等方面的陷井，软件人员通常是不熟悉的，有可能陷入，务必要注意研究。&lt;/p>
&lt;h3 id="72使用方面的可行性">7.2使用方面的可行性&lt;/h3>
&lt;p>例如从用户单位的行政管理、工作制度等方面来看，是否能够使用该软件系统；从用户单位的工作人员的素质来看，是否能满足使用该软件系统的要求等等，都是要考虑的。&lt;/p>
&lt;h2 id="8结论">8结论&lt;/h2>
&lt;p>在进行可行性研究报告的编制时，必须有一个研究的结论。结论可以是：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>可以立即开始进行；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要推迟到某些条件（例如资金、人力、设备等）落实之后才能开始进行；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>需要对开发目标进行某些修改之后才能开始进行；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不能进行或不必进行（例如因技术不成熟、经济上不合算等）。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: 源代码API参考文档</title><link>/docs/documentationstyleguide/codecomment/apireference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/codecomment/apireference/</guid><description>
&lt;p>创建API后，需要提供对应的API参考文档，通常是从源代码中生成的公开类、方法、常量及其他成员。根据不同的编程语言，依照本指南给出的基本准则，
并参照特定语言样式指南。&lt;/p>
&lt;p>此指南不含该 Web API 的参考文档样式，编写 Web API 的参考文档样式时，请参考 Web API 的参考文档样式说明。&lt;/p>
&lt;h2 id="基础知识">基础知识&lt;/h2>
&lt;p>API参考文档必须提供以下各项的描述：&lt;/p>
&lt;ul>
&lt;li>API的每个类、接口、结构体和其他类似的成员；&lt;/li>
&lt;li>每个常量、字段、枚举、类型定义等；&lt;/li>
&lt;li>每个方法、以及每个参数的说明、返回值和可能的异常说明。&lt;/li>
&lt;/ul>
&lt;p>以下是具体的规则。在某些情况下，它们对于特定的API或特定的语言没有意义，但一般来说，请遵循以下准则：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>在每个唯一类，界面等上，在顶部都包含一个5-20行代码示例：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将所有API名称，类，方法，常量等放入代码中，并将每个名称链接到相应的参考文档（大多数文档生成器会自动为您执行此操作）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将参数名用斜体表示。例如，当您引用类似 &lt;code>doSomething(Uri data, int count)&lt;/code> 的参数时，将 &lt;em>data&lt;/em>、&lt;em>count&lt;/em> 斜体化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确保文档中的类的拼写和代码中相同。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>不要使类名复数（Intents，Activities）; 而是添加一个复数名词（Intent对象，Activity实例）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果一个类的名称是一个常用术语，则可以使用相应的英语单词来引用它，该单词要小写而不是使用代码字体（activities, action bar）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="类接口结构体">类、接口、结构体&lt;/h2>
&lt;p>在类的注释的第一句话中，简要说明类或接口的预期用途和功能，以及一些无法从类名称或签名中得到的信息。文档工具和IDE会自动提取每个类的第一句话，
展示到类的文档列表，因此第一句话应精炼。然后，详细说明API的使用方法，包括：
如何调用或实例化API、一些关键功能以及最佳实践或陷阱。&lt;/p>
&lt;p>&lt;strong>例子&lt;/strong>&lt;/p>
&lt;p>ActionBar 类的第一句注释：&lt;/p>
&lt;p>处于活动状态的主工具栏，可以显示活动标题、应用程序级别的功能导航以及其他交互的对象。&lt;/p>
&lt;h2 id="成员">成员&lt;/h2>
&lt;p>成员（常量、属性）的注释应尽可能简短，并链接到使用了该常量或属性的相关方法。&lt;/p>
&lt;p>&lt;strong>例子&lt;/strong>&lt;/p>
&lt;p>ActionBar 类的 &lt;code>DISPLAY_SHOW_HOME&lt;/code> 常量的注释：&lt;/p>
&lt;p>在此操作栏中显示“主页”元素，从而为徽标、图标等其他导航元素留出更多空间。&lt;/p>
&lt;p>另请参阅： &lt;code>setDisplayOptions(int)&lt;/code>，&lt;code>setDisplayOptions(int, int)&lt;/code>&lt;/p>
&lt;h2 id="方法">方法&lt;/h2>
&lt;p>在方法注释的第一句话中，简要说明该方法执行的操作。在随后的句子中，解释为什么以及如何使用该方法，声明在调用之前必须满足的所有先决条件，
提供有关可能发生的异常的详细信息，并指定任何相关的API。&lt;/p>
&lt;p>同时，描述调用该方法所需的任何依赖项，以及缺少此依赖时该方法的行为（例如该方法抛出 &lt;code>SecurityException&lt;/code>或该方法返回&lt;code>null&lt;/code>）。&lt;/p>
&lt;p>&lt;strong>例子&lt;/strong>&lt;/p>
&lt;p>&lt;code>Activity.isChangingConfigurations()&lt;/code> 方法的注释：&lt;/p>
&lt;p>检查此活动是否正在销毁中，以便使用新配置重新创建此活动。这通常用于 &lt;code>onStop()&lt;/code>
来确定状态从而判断是否要清除活动或者将活动传递给活动的下一个实例&lt;code>onRetainNonConfigurationInstance()&lt;/code>&lt;/p>
&lt;p>另请参阅： &lt;code>setDisplayOptions(int)&lt;/code>，&lt;code>setDisplayOptions(int, int)&lt;/code>&lt;/p>
&lt;h3 id="描述">描述&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>如果某个方法执行某个操作并返回一些数据，请以描述该操作的动词开始描述，例如：&lt;/p>
&lt;ul>
&lt;li>添加新的鸟到鸟类列表中，并返回新条目的 ID；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>如何它是 getter 方法并返回布尔值， 描述以 “检查是否&amp;hellip;” 开始；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果它是 getter 方法并且返回的不是布尔值，则以 “获取&amp;hellip;” 开始；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何它没有返回值，请使用类似下述的动词作为开头：&lt;/p>
&lt;ul>
&lt;li>启用一项新技能或设置： “设置&amp;hellip;”；&lt;/li>
&lt;li>更新属性：“更新&amp;hellip;”；&lt;/li>
&lt;li>删除内容：“删除&amp;hellip;”；&lt;/li>
&lt;li>注册回调或其他元素以供以后参考：“Registers&amp;hellip;”；&lt;/li>
&lt;li>对于回调：“由&amp;hellip;调用”（例如：有注册器在&amp;hellip;时调用，然后，子类将此方法实现为&amp;hellip;）；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="弃用">弃用&lt;/h3>
&lt;p>如果该方法将在未来弃用，则需要在第一句话中告知用户该方法的最后支持版本。随后，可以向开发者解释为什么不推荐使用该API以及其他对开发人员有用的信息。&lt;/p>
&lt;p>&lt;strong>例子&lt;/strong>：&lt;/p>
&lt;p>不推荐使用，请改用 &lt;code>CameraPose&lt;/code>&lt;/p>
&lt;p>不推荐使用，使用 &lt;code>getField()&lt;/code>方法访问此字段&lt;/p></description></item><item><title>Docs: devSpec Go 代码审核指南</title><link>/docs/gocodestandards/gocodereviewguide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/gocodestandards/gocodereviewguide/</guid><description>
&lt;p>本篇文章收集了 Go 代码审核过程中的常见的评论，所以一个详细的解释可以用缩写来指代。 这是一个常见错误的清单，而不是一个全面的风格指南。&lt;/p>
&lt;p>你可以将此作为 &lt;a href="https://learnku.com/docs/effective-go/2020">Effective Go&lt;/a> 的补充。&lt;/p>
&lt;h3 id="gofmt">Gofmt&lt;/h3>
&lt;p>在你的代码上运行 gofmt 来自动修复大部分的机械样式问题。几乎所有的 Go 代码都使用 gofmt。本文档的其余部分针对非机械的样式点。&lt;/p>
&lt;p>另一种方法是在 goimports 中使用 gofmt 的超集，该超集可根据需要额外添加 (和删除) 导入行。&lt;/p>
&lt;p>###注释语句&lt;/p>
&lt;p>参考 golang.org/doc/effective_go.html#c&amp;hellip; 。 记录声明的注释应该是完整的句子，即使这似乎有点多余。 这种方法使它们在提取到
godoc 文档时能够很好地格式化。注释应从所描述的事物的名称开始，并以句号结束：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// Request 表示运行命令的请求。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Request&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Encode 将 req 的 JSON 编码写入 w 。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Encode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">w&lt;/span> &lt;span style="color:#000">io&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Writer&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">req&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Request&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000">等等&lt;/span>&lt;span style="color:#a40000">。&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="上下文">上下文&lt;/h3>
&lt;p>上下文的值。上下文类型携带跨越 API 和进程边界的安全证书、跟踪信息、截止日期和取消信号。 Go 程序沿着整个函数调用链显式地传递 Contexts ，包含从传入的 RPC 和 HTTP 请求到传出的请求。&lt;/p>
&lt;p>大部分使用上下文的函数都要将其作为第一个参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">F&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#8f5902;font-style:italic">/* 其他参数 */&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>从来没有具体要求需要使用 &lt;code>context.Background()&lt;/code> 的函数，但是即使你认为不需要传递上下文 ，也有可能出现错误。默认情况下，都需要传递一个上下文。当你有充分的理由认为替代方案有误的时候，才可以直接使用 &lt;code>context.Background()&lt;/code>。&lt;/p>
&lt;p>不要将上下文作为一个成员添加到结构类型；而是将 ctx 参数添加到该类型的每个方法上。一个例外是方法的签名必须要和标准库或者第三方库中的接口匹配的时候。&lt;/p>
&lt;p>不要在函数签名中创建自定义的上下文类型或者使用上下文以外的接口。&lt;/p>
&lt;p>如果要传递应用程序数据，请将其放在参数，方法接收器，全局变量中，或者如果它确实应该属于 Context，则放在 Context 的 Value 属性中。&lt;/p>
&lt;p>所有的 Context 都是不可变的，因此可以将相同的 ctx 传递给多个共享相同截止日期，取消信号，安全凭据，跟踪等的调用。&lt;/p>
&lt;h3 id="复制">复制&lt;/h3>
&lt;p>为避免意外的别名，从另一个包复制 struct 时要小心。例如，&lt;code>bytes.Buffer&lt;/code> 类型包含一个 []byte 的 slice。如果复制一个 Buffer，副本中的 slice 可能会对原始数组进行别名操作，从而导致后续方法调用产生令人惊讶的效果。&lt;/p>
&lt;p>通常，如果 T 类型的方法与其指针类型 *T 相关联，请不要复制 T 类型的值。&lt;/p>
&lt;h3 id="crypto-rand">Crypto Rand&lt;/h3>
&lt;p>不要使用 math/rand 来生成密钥，即使是一次性密钥。在没有种子（seed）的情况下，生成器是完全可以被预测的。使用 &lt;code>time.Nanoseconds()&lt;/code> 作为种子值，熵只有几位。请使用 &lt;code>crypto/rand&lt;/code> 的 &lt;code>Reader&lt;/code> 作为替代，如果你倾向于使用文本，请输出成十六进制或 base64 编码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;crypto/rand&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// &amp;#34;encoding/base64&amp;#34;
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// &amp;#34;encoding/hex&amp;#34;
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Key&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">buf&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#204a87">make&lt;/span>&lt;span style="color:#000;font-weight:bold">([]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">byte&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">_&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">rand&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Read&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87">panic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">err&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 出于随机性，永远都不会发生
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Sprintf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%x&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// or hex.EncodeToString(buf)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// or base64.StdEncoding.EncodeToString(buf)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="声明空的切片">声明空的切片&lt;/h3>
&lt;p>当声明一个空 slice 时，倾向于用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">t&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而不是&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>前者声明了一个 nil slice 值，而后者声明了一个非 nil 但是零长度的 slice。两者在功能上等同，len 和 cap 均为零，而 nil slice 是首选的风格。&lt;/p>
&lt;p>请注意，在部分场景下，首选非 nil 但零长度的切片，例如编码 JSON 对象时（nil 切片编码为 null，而则 []string{} 可以正确编码为 JSON array []）。&lt;/p>
&lt;p>在设计 interface 时，避免区分 nil slice 和 非 nil，零长度的 slice，因为这会导致细微的编程错误。&lt;/p>
&lt;p>有关 Go 中对于 nil 的更多讨论，请参阅 Francesc Campoy 的演讲 Understanding Nil。&lt;/p>
&lt;h3 id="文档注释">文档注释&lt;/h3>
&lt;p>所有的顶级导出的名称都应该有 doc 注释，重要的未导出类型或函数声明也应如此。有关注释约束的更多信息，请参阅 golang.org/doc/effective_go.html#c&amp;hellip;。&lt;/p>
&lt;h3 id="不要-panic">不要 Panic&lt;/h3>
&lt;p>请参阅 golang.org/doc/effective_go.html#e&amp;hellip;。不要将 panic 用于正常的错误处理。使用 error 和多返回值。&lt;/p>
&lt;h3 id="错误信息">错误信息&lt;/h3>
&lt;p>错误信息不应大写（除非以专有名词或首字母缩略词开头）或以标点符号结尾，因为它们通常是在其他上下文后打印的。即使用 &lt;code>fmt.Errorf(&amp;quot;something bad&amp;quot;)&lt;/code> 而不要使用 &lt;code>fmt.Errorf(&amp;quot;Something bad&amp;quot;)&lt;/code>，因此 &lt;code>log.Printf(&amp;quot;Reading %s: %v&amp;quot;, filename, err)&lt;/code> 的格式中将不会出现额外的大写字母。否则这将不适用于日志记录，因为它是隐式的面向行，而不是在其他消息中组合。&lt;/p>
&lt;h3 id="例子">例子&lt;/h3>
&lt;p>添加新包时，请包含预期用法的示例：可运行的示例，或是演示完整调用链的简单测试。&lt;/p>
&lt;p>阅读有关 testable Example() functions 的更多信息。&lt;/p>
&lt;h3 id="goroutine-生存周期">Goroutine 生存周期&lt;/h3>
&lt;p>当你生成 goroutines 时，要清楚它们何时或是否会退出。&lt;/p>
&lt;p>通过阻塞 channel 的发送或接收可能会引起 goroutines 的内存泄漏：即使被阻塞的 channel 无法访问，垃圾收集器也不会终止 goroutine。&lt;/p>
&lt;p>即使 goroutines 没有泄漏，当它们不再需要时却仍然将其留在内存中会导致其他细微且难以诊断的问题。往已经关闭的 channel 发送数据将会引发 panic。在 “结果不被需要之后” 修改仍在使用的输入仍然可能导致数据竞争。并且将 goroutines 留在内存中任意长时间将会导致不可预测的内存使用。&lt;/p>
&lt;p>请尽量让并发代码足够简单，从而更容易地确认 goroutine 的生命周期。如果这不可行，请记录 goroutines 退出的时间和原因。&lt;/p>
&lt;h3 id="处理错误">处理错误&lt;/h3>
&lt;p>请参阅 &lt;a href="https://golang.org/doc/effective_go.html#errors">https://golang.org/doc/effective_go.html#errors&lt;/a>。不要使用 _ 变量丢弃 error。如果函数返回 error，请检查它以确保函数成功。处理 error，返回 error，或者在真正特殊的情况下使用 panic。&lt;/p>
&lt;h3 id="包的导入">包的导入&lt;/h3>
&lt;p>避免包重命名导入，防止名称冲突；好的包名称不需要重命名。如果发生命名冲突，则更倾向于重命名最接近本地的包或特定于项目的包。&lt;/p>
&lt;p>包导入按组进行组织，组与组之间有空行。标准库包始终位于第一组中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;hash/adler32&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;appengine/foo&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;appengine/user&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;github.com/foo/bar&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;rsc.io/goversion/version&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>goimports 会为你做这件事。&lt;/p>
&lt;h3 id="包的匿名导入">包的匿名导入&lt;/h3>
&lt;p>仅出于副作用而导入的软件包（使用语法 import _&amp;ldquo;pkg&amp;rdquo;）应仅在程序的 main 包或需要它们的测试中导入。&lt;/p>
&lt;h3 id="import-dot">Import Dot&lt;/h3>
&lt;p>部分包由于循环依赖，不能作为测试包的一部分进行测试时，以。形式导入它们可能很有用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">foo_test&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;bar/testutil&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// also imports &amp;#34;foo&amp;#34;
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">.&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这种情况下，测试文件不能位于 foo 包中，因为它使用的 bar/testutil 依赖于 foo 包。所以我们使用 import . 形式使得测试文件伪装成 foo 包的一部分，即使它不是。除了这种情况，不要在程序中使用 import .。它将使程序更难阅读 —— 因为不清楚如 Quux 这样的名称是否是当前包中或导入包中的顶级标识符。&lt;/p>
&lt;h3 id="内联错误">内联错误&lt;/h3>
&lt;p>在 C 和类 C 语言中，通常使函数返回 -1 或 null 之类的值用来发出错误信号或缺少结果：&lt;/p>
&lt;p>// 查找返回键的值，如果没有键的映射，则返回空字符串。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// Failing to check a for an in-band error value can lead to bugs:
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">Parse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 返回 &amp;#34;parse failure for value&amp;#34; 而不是 &amp;#34;no value for key&amp;#34;
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">Go&lt;/span> &lt;span style="color:#000">对多返回值的支持提供了一种更好的解决方案&lt;/span>&lt;span style="color:#a40000">。&lt;/span>&lt;span style="color:#000">函数应返回一个附加值以指示其他返回值是否有效&lt;/span>&lt;span style="color:#a40000">，&lt;/span>&lt;span style="color:#000">而不是要求客户端检查内联错误值&lt;/span>&lt;span style="color:#a40000">。&lt;/span>&lt;span style="color:#000">此附加值可能是一个&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#a40000">，&lt;/span>&lt;span style="color:#000">或者在不需要解释时可以是布尔值&lt;/span>&lt;span style="color:#a40000">。&lt;/span>&lt;span style="color:#000">它应该是最终的返回值&lt;/span>&lt;span style="color:#a40000">。&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 查找并返回键的值，如果没有键的映射，则ok = false。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">这可以防止调用者错误地使用返回结果&lt;/span>&lt;span style="color:#a40000">：&lt;/span>
&lt;span style="color:#000">Parse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">Lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 编译时错误
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">并有利于写出更健壮和可读性更强的代码&lt;/span>&lt;span style="color:#a40000">：&lt;/span>
&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">Lookup&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#000">ok&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">fmt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;no value for %q&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Parse&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此规则适用于公共导出函数，但对于未导出函数也很有用。&lt;/p>
&lt;p>返回值如 nil，&amp;quot;&amp;quot;，0 和 -1 在他们是函数的有效返回结果时是可接收的，即调用者不需要将它们与其他值做分别处理。&lt;/p>
&lt;p>某些标准库函数（如 “strings” 包中的函数）会返回内联错误值。这大大简化了字符串操作，代价是需要程序员做更多事。通常，Go 代码应返回表示错误的附加值。&lt;/p>
&lt;h3 id="缩进错误处理">缩进错误处理&lt;/h3>
&lt;p>要缩进错误处理逻辑，不要缩进常规代码。这样可以改进代码的可读性，读者可以快速地浏览逻辑主干。例如，不要写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// error handling
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// normal code
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">相反&lt;/span>&lt;span style="color:#a40000">，&lt;/span>&lt;span style="color:#000">应该这样写&lt;/span>&lt;span style="color:#a40000">：&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 错误处理
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// 或者继续执行。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 一般代码
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">如果&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">语句中有初始化逻辑&lt;/span>&lt;span style="color:#a40000">，&lt;/span>&lt;span style="color:#000">像这样&lt;/span>&lt;span style="color:#a40000">：&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 错误处理
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 使用变量 x
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">那就把初始化移到外面&lt;/span>&lt;span style="color:#a40000">，&lt;/span>&lt;span style="color:#000">改成这样&lt;/span>&lt;span style="color:#a40000">：&lt;/span>
&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 错误处理
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// 使用变量 x
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="首字母缩写">首字母缩写&lt;/h3>
&lt;p>名称中的单词是首字母或首字母缩略词（例如 &amp;ldquo;URL&amp;rdquo; 或 &amp;ldquo;NATO&amp;rdquo; ）需要具有相同的大小写规则。例如，&amp;ldquo;URL&amp;rdquo; 应显示为 &amp;ldquo;URL&amp;rdquo; 或 &amp;ldquo;url&amp;rdquo; （如 &amp;ldquo;urlPony&amp;rdquo; 或 &amp;ldquo;URLPony&amp;rdquo; ），而不是 &amp;ldquo;Url&amp;rdquo;。举个例子：ServeHTTP 不是 ServeHttp。对于具有多个初始化 “单词” 的标识符，也应当显示为 &amp;ldquo;xmlHTTPRequest&amp;rdquo; 或 &amp;ldquo;XMLHTTPRequest&amp;rdquo;。&lt;/p>
&lt;p>当 &amp;ldquo;ID&amp;rdquo; 是 &amp;ldquo;identifier&amp;rdquo; 的缩写时，此规则也适用于 &amp;ldquo;ID&amp;rdquo; ，因此请写 &amp;ldquo;appID&amp;rdquo; 而不是 &amp;ldquo;appId&amp;rdquo;。&lt;/p>
&lt;p>protocol buffer 生成的代码是个例外，对人和对机器的要求不能一样，人编写的代码要比机器编写的代码保持更高的标准。&lt;/p>
&lt;h3 id="接口">接口&lt;/h3>
&lt;p>总的来说，Go 的接口要包含在使用方的包里，不应该包含在实现方的包里。实现方只需要返回具体类型（通常是指针或结构体），这样一来可以将新方法添加到实现中，而不需要扩展重构。&lt;/p>
&lt;p>不要在 API 的实现者端定义 &amp;ldquo;for mocking&amp;rdquo; 接口；反而是要定义公开的 API，用真实的实现进行测试。&lt;/p>
&lt;p>不要先定义接口再用它。脱离真实的使用场景，我们都不能确定一个接口是否有存在的价值，更别提设计接口的方法了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">consumer&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// consumer.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Thinger&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">Thing&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#000">Thinger&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">consumer&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// consumer_test.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">fakeThinger&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#000">fakeThinger&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Thing&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#a40000">…&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fakeThinger&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">…&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;x&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// 不要这样做！！！
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">producer&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Thinger&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">Thing&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">defaultThinger&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#000">defaultThinger&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Thing&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">NewThinger&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">Thinger&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">defaultThinger&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>应该返回具体的类型，让消费者来 mock 生产者的实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">producer&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">Thinger&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#000">Thinger&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Thing&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">NewThinger&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000">Thinger&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Thinger&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#a40000">…&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="代码行长度">代码行长度&lt;/h3>
&lt;p>在 Go 代码中没有行长度的标准规定，避免不舒服的长度就好；类似的，长一些代码可读性更强时，也不要刻意换行。&lt;/p>
&lt;p>大多数非自然（在方法调用和声明的过程中）的换行，都是可以避免的，只要选择合理数量的参数列表和合适的变量名。一行代码过长，往往是因为代码中的各个名字太长了，去掉那些长名字就好了。&lt;/p>
&lt;p>换句话说，在语义的分割点换行，而不是单单看行的长度。万一你发现某一行太长了，要么改名，要么调整语义，往往就解决问题了。&lt;/p>
&lt;p>实际上，关于一个函数有多长也是一样的建议。这里没有一个 “一个方法不能超过 N 行” 的规定，但是程序中肯定会存在行数太多的函数、功能过于微弱的函数，而解决方案是改变这个函数边界，而不是执着在代码行数上。&lt;/p>
&lt;h3 id="混合首字母大小写">混合首字母大小写&lt;/h3>
&lt;p>参考 golang.org/doc/effective_go.html#m&amp;hellip;，即使 Go 中混合大小写的规则打破了其他语言的惯例，也是适用的。例如，非导出的常量要命名成 maxLength，而不是 MaxLength 或者 MAX_LENGTH。&lt;/p>
&lt;p>也可以参阅 Initialisms.&lt;/p>
&lt;h3 id="命名结果参数">命名结果参数&lt;/h3>
&lt;p>考虑一下 godoc 中的样式。命名结果参数如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Parent1&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">node&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Parent2&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">node&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 godoc 中会卡顿；最好使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Parent1&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Node&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">n&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Parent2&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Node&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>另一方面，如果函数返回两个或三个相同类型的参数，或者从上下文中看不出结果的含义，则在某些上下文中添加名称可能会很有用。不要仅仅为了避免在函数内部声明 var 而命名结果参数；可能牺牲了一些简短的实现方式，但付出了不必要的 API 冗长性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Location&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">float64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">float64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不够清晰：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// Location 返回 f 的经度和纬度。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">// 负值分别表示南和西。
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">f&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">Location&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">lat&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">long&lt;/span> &lt;span style="color:#204a87;font-weight:bold">float64&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果函数只有几行，则可以使用裸返回。一旦它是一个中等大小的函数，请明确说明您的返回值。结论：仅仅因为它使您能够使用裸返回值而命名结果参数是不值得的。文档的清晰性始终比在函数中保存一两行更为重要。&lt;/p>
&lt;p>最后，在某些情况下，您需要命名结果参数，以便在延迟的闭包中对其进行更改。这么做总是对的。&lt;/p>
&lt;h3 id="裸返回">裸返回&lt;/h3>
&lt;p>请参阅 Named Result Parameters.&lt;/p>
&lt;h3 id="包注释">包注释&lt;/h3>
&lt;p>像 godoc 提出的所有注释一样，包注释必须出现在 package 子句的旁边，且不能有空行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// Package math provides basic constants and mathematical functions.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">math&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">/*
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">Package template implements data-driven templates for generating textual
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">output such as HTML.
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">....
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">*/&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">template&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 「package main」 的注释，在二进制名称后可以使用其他样式的注释 (并且可以使用大写形式，如果使用的话请大写)，例如，对于 package main 目录中的 seedgen 您可以这样写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// Binary seedgen ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// Command seedgen ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// Program seedgen ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// The seedgen command ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// The seedgen program ...
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>或&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#8f5902;font-style:italic">// Seedgen ..
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">package&lt;/span> &lt;span style="color:#000">main&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上都是举例，它们的合理变体是可以接受的。&lt;/p>
&lt;p>请注意，以小写单词开头的句子不属于程序包注释的可接受选项。因为这些都是公开可见的，应该用适当的英语写，包括大写句子的第一个单词。 当二进制名是第一个单词时，即使它与命令行调用的拼写不完全匹配，也需要将其大写。&lt;/p>
&lt;p>有关评注惯例的更多信息，参见 &lt;a href="https://golang.org/doc/effective_go.html%3E">https://golang.org/doc/effective_go.html&amp;gt;&lt;/a> 。&lt;/p>
&lt;h3 id="包名">包名&lt;/h3>
&lt;p>对包中名称的所有引用都将使用包名完成，因此可以从标识符中省略该名称。 例如，如果你正在使用 chubby 包，则不需键入 ChubbyFile ，因为客户端会将其写为 &lt;code>chubby.ChubbyFile&lt;/code>。 相反，命名为 File 的这种方式，客户端会将它写为 &lt;code>chubby.File&lt;/code> 。 避免使用像 util 、 common 、 misc 、 api 、 types 和 interfaces 这样无意义的包名。 详见 &lt;a href="http://golang.org/doc/effective_go.html#%E5%8C%85-%E5%90%8D%E7%A7%B0">http://golang.org/doc/effective_go.html#包-名称&lt;/a> 及 &lt;a href="http://blog.golang.org/package-names">http://blog.golang.org/package-names&lt;/a> 。&lt;/p>
&lt;h3 id="参数传递">参数传递&lt;/h3>
&lt;p>不要只是为了节省几个字节就将指针作为函数参数传递。如果一个函数在整个过程中只引用它的参数 x 作为 *x，那么这个参数不应该是一个指针。常见的例子包括传递指向字符串 (*string) 的指针或指向接口值 (*io.Reader) 的指针。在这两种情况下，值本身都是固定大小，可以直接传递。这个建议不适用于大型结构体 ，甚至不适用于可能变大的小型结构体。&lt;/p>
&lt;h3 id="方法接收者命名">方法接收者命名&lt;/h3>
&lt;p>方法接收者的名称应该反映其身份；通常，其类型的一个或两个字母缩写就足够了（例如用 &amp;ldquo;c&amp;rdquo; 或 &amp;ldquo;cl&amp;rdquo; 表示 &amp;ldquo;client&amp;rdquo; ）。不要使用通用名称，例如 &amp;ldquo;me&amp;rdquo;，&amp;ldquo;this&amp;rdquo; 或 &amp;ldquo;self&amp;rdquo;，这是面向对象语言的典型标识符，这些标识符赋予该方法特殊的含义。在 Go 语言中，方法接收者只是函数的一个参数而已。方法接收者的命名不必像方法的其他参数那样具有描述性，因为它的作用是显而易见的，没有任何文档目的。命名可以非常短，因为它几乎将出现在该类型的每个方法的每一行中；熟悉意味着简洁。使用上也要保持一致：如果你在一个方法中叫将接收器命名为 &amp;ldquo;c&amp;rdquo;，那么在其他方法中不要把它命名为 &amp;ldquo;cl&amp;rdquo;。&lt;/p>
&lt;h3 id="方法接收者类型">方法接收者类型&lt;/h3>
&lt;p>选择到底是在方法上使用值接收者还是使用指针接收者可能会很困难，尤其是对于 Go 新手程序员。如有疑问，请使用指针接收者，但有些情况下用值接收者更有道理，性能更好，例如小的不变结构或基本类型的值。以下是一些有用的指导：&lt;/p>
&lt;p>如果接收者是 map，func 或 chan，则不要使用指针。如果接收者是 slice 并且该方法不重新切片或不重新分配切片，则不要使用指针
如果该方法需要改变接收者的值，则必须用指针。
接收者内含有 &lt;code>sync.Mutex&lt;/code> 或者类似的同步域，那就必须指针，以避免拷贝。
接收者是一个大数据结构或者数组，指针会效率更高。 多大才算大？假设它相当于将其包含的所有元素作为参数传递给方法。如果感觉太大，那么对接收者来说也太大了。
函数或方法（同时执行或调用某方法时继续调用相关方法或函数）是否会使接收者发生变化？在调用方法时，值类型会创建接收者的副本，因此外部更新将不会应用于此接收者。如果必须在原始接收者中看到更改效果，则接收者必须是指针。
如果接收者是一个结构、数组、slice，且内部的元素有指针指向一些可变元素，那更倾向于用指针接收，来提供更明确的语义。
若接收者是一个小对象或数组，概念上是一个值类型（比如 &lt;code>time.Time&lt;/code>），并且没有可变域和指针域，或者干脆就是 int、string 这种基本类型，适合用值接收者。值接收者可以减少垃圾内存，通过它传递值时，会优先尝试从栈上分配内存，而不是堆上。但保不齐在某些情况下编译器没那么聪明，所以这个在用之前要 profiling 一下。
最后，要是把握不准，就用指针。&lt;/p>
&lt;h3 id="同步函数">同步函数&lt;/h3>
&lt;p>首选同步函数 - 直接返回结果或在返回异步函数之前完成任何回调或通道操作的函数。&lt;/p>
&lt;p>同步函数使 goroutines 能够在调用中本地化，从而使其在生命周期中更显得合理，避免泄漏和数据竞争。它们也更容易测试：调用者可以传递输入并检查输出，而不需要轮询或同步。&lt;/p>
&lt;p>如果调用者需要更多的并发，可以从一个单独的 goroutine 调用函数来轻松地添加它。 但是，在调用方删除不必要的并发是相当困难的，有时是不可能的。&lt;/p>
&lt;h3 id="有用的失败测试">有用的失败测试&lt;/h3>
&lt;p>失败的测试应该体现有用的信息，说明什么是错误的，什么是输入，什么是实际得到的，什么是预期的。 编写一组 assertFoo 帮助程序可能很诱人，但请确保您的帮助程序产生有用的错误消息。假设调试失败测试的人不是您，也不是您的团队。 典型的 Go 测试失败案例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">got&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#000">tt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">want&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Errorf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Foo(%q) = %d; want %d&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">in&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">got&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">tt&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">want&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic">//或 Fatalf ，如果测试不能测试任何超过此时的点
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>请注意，这条命令结果 != 预期，消息也使用该命令。 一些测试框架鼓励反写这些内容： 0 != x 表示 “预期 0 ，得到 x ” 等等。 但 Go 并不鼓励这样写。&lt;/p>
&lt;p>如果看起来需要不少的代码，那您可能希望编写一个表格驱动测试。&lt;/p>
&lt;p>在使用具有不同输入的测试助手时，另一种消除失败测试歧义的常见技术是用不同的 TestFoo 函数将每个调用者包装起来，因此使用该名称测试时失败：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">TestSingleValue&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">testing&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">testHelper&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">80&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">TestNoValues&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">testing&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">testHelper&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">t&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span>&lt;span style="color:#000;font-weight:bold">{})&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在任何情况下，您都有义务在测试失败时将有用的信息传递给将来调试代码的人。&lt;/p>
&lt;h3 id="变量名称">变量名称&lt;/h3>
&lt;p>Go 中的变量名称尽可能短为妙，言简意赅，尤其是对于那些处于有限空间中的局部变量更是如此。例如： 用 c 而不是 lineCount； 用 i 而不是 sliceIndex 。&lt;/p>
&lt;p>基本准则：当变量首次被使用时离声明的位置越远，变量名称必须更具描述性。对于方法接收者的名称来说，一个或者两个字母就足够了。普通变量比如 loop indices 、 readers 的名称用一个字母（i , r）指代就可以。非常规事物和全局变量则需使用更具描述性的名字。&lt;/p></description></item><item><title>Docs: Python语言规范</title><link>/docs/pythoncodingstyle/python_language_rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/pythoncodingstyle/python_language_rules/</guid><description>
&lt;h2 id="lint">Lint&lt;/h2>
&lt;p>使用该 &lt;a href="https://google.github.io/styleguide/pylintrc">pylintrc&lt;/a> 对你的代码运行&lt;code>pylint&lt;/code>&lt;/p>
&lt;ol>
&lt;li>定义:&lt;/li>
&lt;/ol>
&lt;p>pylint是一个在Python源代码中查找bug的工具. 对于C和C++这样的不那么动态的(译者注: 原文是less dynamic)语言, 这些bug通常由编译器来捕获. 由于Python的动态特性, 有些警告可能不对. 不过伪告警应该很少。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>可以捕获容易忽视的错误, 例如输入错误, 使用未赋值的变量等.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>pylint不完美. 要利用其优势, 我们有时侯需要:&lt;/p>
&lt;ul>
&lt;li>围绕着它来写代码&lt;/li>
&lt;li>抑制其告警&lt;/li>
&lt;li>改进它&lt;/li>
&lt;li>忽略它&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>确保对你的代码运行&lt;code>pylint&lt;/code>。&lt;/p>
&lt;p>抑制不准确的警告，以便能够将其他警告暴露出来。你可以通过设置一个行注释来抑制警告。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87">dict&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;something awful&amp;#39;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Bad Idea... pylint: disable=redefined-builtin&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pylint&lt;/code>警告是以符号名(如 &lt;code>empty-docstring&lt;/code> )来标识的，google特定的警告则是以&lt;code>g-&lt;/code>开头。&lt;/p>
&lt;p>如果警告的符号名不够见名知意，那么请对其增加一个详细解释。&lt;/p>
&lt;p>采用这种抑制方式的好处是我们可以轻松查找抑制并回顾它们。&lt;/p>
&lt;p>你可以使用以下命令来获取pylint告警列表。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pylint --list-msgs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以使用以下命令来获取关于特定消息的更多信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pylint --help-msg&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>C6409
&lt;/code>&lt;/pre>&lt;/div>&lt;p>相比较于之前使用的过时的 &lt;code>pylint: disable-msg&lt;/code> ，本文推荐使用 &lt;code>pylint: disable&lt;/code> .&lt;/p>
&lt;p>在函数体中删除未使用的变量可以消除参数未使用告警.记得要加一条注释说明你为何删除它们,注释使用&amp;quot;Unused&amp;quot;就可以,例如:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">viking_cafe_order&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">eggs&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">del&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">eggs&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Unused by vikings.&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">spam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">spam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">spam&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其他消除这个告警的方法还有使用&lt;code>_&lt;/code>标志未使用参数,或者给这些参数名加上前缀 &lt;code>unused_&lt;/code>, 或者直接把它们绑定到 &lt;code>_&lt;/code>.但这些方法都不推荐.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="导入">导入&lt;/h2>
&lt;p>仅对包和模块使用导入,而不单独导入函数或者类。&lt;a href="https://google.github.io/styleguide/pyguide.html#typing-imports">typing module&lt;/a>, &lt;a href="https://github.com/python/typing/tree/master/typing_extensions">typing_extensions module&lt;/a>, 及 &lt;a href="https://six.readthedocs.io/#module-six.moves">six.moves module&lt;/a>模块例外。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>模块间共享代码的重用机制.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>命名空间管理约定十分简单。每个标识符的源都用一种一致的方式指示，&lt;code>x.Obj&lt;/code>表示&lt;code>Obj&lt;/code>对象定义在模块&lt;code>x&lt;/code>中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>模块名仍可能冲突。有些模块名太长，不太方便。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>使用 &lt;code>import x&lt;/code> 来导入包和模块.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>from x import y&lt;/code> , 其中x是包前缀, y是不带前缀的模块名.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>from x import y as z&lt;/code>, 如果两个要导入的模块都叫做y或者y太长了.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>仅当缩写 &lt;code>z&lt;/code> 是通用缩写时才可使用 &lt;code>import y as z&lt;/code>.(比如 &lt;code>np&lt;/code> 代表 &lt;code>numpy&lt;/code>.)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>例如, 模块 &lt;code>sound.effects.echo&lt;/code> 可以用如下方式导入:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">sound.effects&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">echo&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000">echo&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">EchoFilter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">input&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">output&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">delay&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.7&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">atten&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入时不要使用相对名称。即使模块在同一个包中，也要使用完整包名。这能帮助你避免无意间导入一个包两次。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="包">包&lt;/h2>
&lt;p>使用模块的全路径名来导入每个模块&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>避免模块名冲突或是因非预期的模块搜索路径导致导入错误. 查找包更容易.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>部署代码变难, 因为你必须复制包层次.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>所有的新代码都应该用完整包名来导入每个模块.应该像下面这样导入:&lt;/p>
&lt;p>yes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># 在代码中引用完整名称 absl.flags (详细情况)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">absl.flags&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">doctor.who&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">jodie&lt;/span>
&lt;span style="color:#000">FLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">absl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">flags&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FLAGS&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># 在代码中仅引用模块名 flags (常见情况)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">absl&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">flags&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">doctor.who&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">jodie&lt;/span>
&lt;span style="color:#000">FLAGS&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">flags&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FLAGS&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>No: (假设当前文件和 jodie.py 都在目录 doctor/who/ 下)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># 没能清晰指示出作者想要导入的模块和最终被导入的模块&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 实际导入的模块将取决于`sys.path`&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">jodie&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不应假定主入口脚本所在的目录就在&lt;code>sys.path&lt;/code>中，虽然这种情况是存在的。当主入口脚本所在目录不在&lt;code>sys.path&lt;/code>中时，代码将假设&lt;code>import jodie&lt;/code>是导入的一个第三方库或者是一个名为&lt;code>jodie&lt;/code>的顶层包，而不是本地的&lt;code>jodie.py&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="异常">异常&lt;/h2>
&lt;p>允许使用异常, 但必须小心&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>异常是一种跳出代码块的正常控制流来处理错误或者其它异常条件的方式.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>正常操作代码的控制流不会和错误处理代码混在一起. 当某种条件发生时, 它也允许控制流跳过多个框架. 例如, 一步跳出N个嵌套的函数, 而不必继续执行错误的代码.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>可能会导致让人困惑的控制流. 调用库时容易错过错误情况.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>异常必须遵守特定条件:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>优先合理的使用内置异常类.比如 &lt;code>ValueError&lt;/code> 指示了一个程序错误, 比如在方法需要正数的情况下传递了一个负数错误.不要使用 &lt;code>assert&lt;/code> 语句来验证公共API的参数值. &lt;code>assert&lt;/code> 是用来保证内部正确性的,而不是用来强制纠正参数使用.若需要使用异常来指示某些意外情况,不要用 &lt;code>assert&lt;/code>,用 &lt;code>raise&lt;/code> 语句,例如:&lt;/p>
&lt;p>Yes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">connect_to_next_port&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">minimum&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Connects to the next available port.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Args:
&lt;/span>&lt;span style="color:#4e9a06"> minimum: A port value greater or equal to 1024.
&lt;/span>&lt;span style="color:#4e9a06"> Returns:
&lt;/span>&lt;span style="color:#4e9a06"> The new minimum port.
&lt;/span>&lt;span style="color:#4e9a06"> Raises:
&lt;/span>&lt;span style="color:#4e9a06"> ConnectionError: If no available port is found.
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">minimum&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Note that this raising of ValueError is not mentioned in the doc&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># string&amp;#39;s &amp;#34;Raises:&amp;#34; section because it is not appropriate to&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># guarantee this specific behavioral reaction to API misuse.&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">ValueError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Min. port must be at least 1024, not &lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">minimum&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_find_next_open_port&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">minimum&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">ConnectionError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Could not connect to service on port &lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">minimum&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06"> or higher.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span> &lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#000">minimum&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Unexpected port &lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">port&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06"> when minimum was &lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">minimum&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">port&lt;/span>&lt;span style="color:#a40000">`&lt;/span>&lt;span style="color:#000">No&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#a40000">`&lt;/span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">connect_to_next_port&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">minimum&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>No:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">connect_to_next_port&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">minimum&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Connects to the next available port.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Args:
&lt;/span>&lt;span style="color:#4e9a06"> minimum: A port value greater or equal to 1024.
&lt;/span>&lt;span style="color:#4e9a06"> Returns:
&lt;/span>&lt;span style="color:#4e9a06"> The new minimum port.
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span> &lt;span style="color:#000">minimum&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Minimum port must be at least 1024.&amp;#39;&lt;/span>
&lt;span style="color:#000">port&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_find_next_open_port&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">minimum&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">assert&lt;/span> &lt;span style="color:#000">port&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">port&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的Exception类继承. 模块的异常基类后缀应该叫做 &lt;code>Error&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>永远不要使用 &lt;code>except:&lt;/code> 语句来捕获所有异常, 也不要捕获 &lt;code>Exception&lt;/code> 或者 &lt;code>StandardError&lt;/code> , 除非:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>你打算重新触发该异常&lt;/p>
&lt;/li>
&lt;li>
&lt;p>或者你已经在当前线程的最外层(记得还是要打印一条错误消息).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在异常这方面, Python非常宽容, &lt;code>except:&lt;/code> 真的会捕获包括Python语法错误在内的任何错误. 使用 &lt;code>except:&lt;/code> 很容易隐藏真正的bug.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尽量减少try/except块中的代码量. try块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, try/except块将隐藏真正的错误.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用finally子句来执行那些无论try块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="全局变量">全局变量&lt;/h2>
&lt;p>避免全局变量&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>定义在模块级的变量或者类变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>偶尔有用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>导入时可能改变模块行为, 因为导入模块时会对模块级变量赋值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>避免使用全局变量. 鼓励使用模块级的常量，例如 &lt;code>MAX_HOLY_HANDGRENADE_COUNT = 3&lt;/code>。注意常量命名必须全部大写，用&lt;code>_&lt;/code>分隔，并在名称前&lt;code>_&lt;/code>使之成为模块内部变量，具体参见&lt;a href="../python_style_rules/#%E5%91%BD%E5%90%8D">Naming&lt;/a>。&lt;/p>
&lt;p>若必须要使用全局变量，应在模块内声明全局变量，外部访问必须通过模块级的公共函数.具体参见&lt;a href="../python_style_rules/#%E5%91%BD%E5%90%8D">Naming&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="嵌套局部内部类或函数">嵌套/局部/内部类或函数&lt;/h2>
&lt;p>使用内部类或者嵌套函数可以用来覆盖某些局部变量.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的. (译者注:即内嵌函数可以读外部函数中定义的变量,但是无法改写,除非使用 nonlocal)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>允许定义仅用于有效范围的工具类和函数.在装饰器中比较常用.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>嵌套类或局部类的实例不能序列化(pickled). 内嵌的函数和类无法直接测试.同时内嵌函数和类会使外部函数的可读性变差.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>使用内部类或者内嵌函数可以忽视一些警告.但是应该避免使用内嵌函数或类,除非是想覆盖某些值.若想对模块的用户隐藏某个函数,不要采用嵌套它来隐藏,应该在需要被隐藏的方法的模块级名称加&lt;code>_&lt;/code>前缀,这样它依然是可以被测试的.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="推导式生成式">推导式&amp;amp;生成式&lt;/h2>
&lt;p>可以在简单情况下使用&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>列表、字典和集合的推导&amp;amp;生成式提供了一种简洁高效的方式来创建容器和迭代器, 而不必借助map(), filter(), 或者lambda.(译者注: 元组是没有推导式的, &lt;code>()&lt;/code> 内加类似推导式的句式返回的是个生成器)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>简单的列表推导可以比其它的列表创建方法更加清晰简单. 生成器表达式可以十分高效, 因为它们避免了创建整个列表.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>复杂的列表推导或者生成器表达式可能难以阅读.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.&lt;/p>
&lt;p>Yes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">mapping_expr&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">value&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">iterable&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">filter_expr&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;key&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">value&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">iterable&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">a_long_filter_expression&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">complicated_transform&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">iterable&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">predicate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span>
&lt;span style="color:#000">descriptive_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">transform&lt;/span>&lt;span style="color:#000;font-weight:bold">({&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;key&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;value&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;black&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">value&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">generate_iterable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">some_input&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">complicated_condition_is_met&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">result&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">complicated_transform&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">long_generator_function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">parameter&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">squares_generator&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">unique_names&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">user&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">name&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">user&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">users&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">user&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">eat&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">jelly_bean&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">jelly_bean&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">jelly_beans&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">jelly_bean&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">color&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;black&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>No:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">complicated_transform&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">some_argument&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">iterable&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">predicate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)]&lt;/span>
&lt;span style="color:#000">result&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">range&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">((&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">z&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">xrange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">xrange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#000">y&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">z&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">xrange&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#000">z&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="默认迭代器和操作符">默认迭代器和操作符&lt;/h2>
&lt;p>如果类型支持, 就使用默认迭代器和操作符. 比如列表, 字典及文件等.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>容器类型, 像字典和列表, 定义了默认的迭代器和关系测试操作符(&amp;ldquo;in&amp;quot;和&amp;quot;not in&amp;rdquo;)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>默认操作符和迭代器简单高效, 它们直接表达了操作, 没有额外的方法调用. 使用默认操作符的函数是通用的. 它可以用于支持该操作的任何类型.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>你没法通过阅读方法名来区分对象的类型(例如, &lt;code>has_key()&lt;/code>意味着字典). 不过这也是优点.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了迭代器方法. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将不能修改容器.&lt;/p>
&lt;p>Yes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">key&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">adict&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">key&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">adict&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">obj&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">alist&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">line&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">afile&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">dict&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">iteritems&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">six&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">iteritems&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">adict&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>No:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">key&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">adict&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#000">adict&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">has_key&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">key&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">line&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">afile&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">readlines&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">k&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">v&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">dict&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">iteritems&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="生成器">生成器&lt;/h2>
&lt;p>按需使用生成器.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>所谓生成器函数, 就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>简化代码, 因为每次调用时, 局部变量和控制流的状态都会被保存. 比起一次创建一系列值的函数, 生成器使用的内存更少.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>没有.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>鼓励使用. 注意在生成器函数的文档字符串中使用&amp;quot;Yields:&amp;ldquo;而不是&amp;quot;Returns:&amp;rdquo;.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="lambda函数">Lambda函数&lt;/h2>
&lt;p>适用于单行函数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>与语句相反, lambda在一个表达式中定义匿名函数. 常用于为 &lt;code>map()&lt;/code> 和 &lt;code>filter()&lt;/code> 之类的高阶函数定义回调函数或者操作符.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>方便.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>比本地函数更难阅读和调试. 没有函数名意味着堆栈跟踪更难理解. 由于lambda函数通常只包含一个表达式, 因此其表达能力有限.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.对于常见的操作符，例如乘法操作符，使用 &lt;code>operator&lt;/code> 模块中的函数以代替lambda函数. 例如, 推荐使用 &lt;code>operator.mul&lt;/code> , 而不是 &lt;code>lambda x, y: x * y&lt;/code> .&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="条件表达式">条件表达式&lt;/h2>
&lt;p>适用于单行函数&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>条件表达式(又名三元运算符)是对于if语句的一种更为简短的句法规则. 例如: &lt;code>x = 1 if cond else 2&lt;/code> .&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>比if语句更加简短和方便.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>比if语句难于阅读. 如果表达式很长， 难于定位条件.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>适用于单行函数. 写法上推荐真实表达式,if表达式,else表达式每个独占一行.在其他情况下，推荐使用完整的if语句.&lt;/p>
&lt;p>Yes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">one_line&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;yes&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">predicate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;no&amp;#39;&lt;/span>
&lt;span style="color:#000">slightly_split&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;yes&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">predicate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;no, nein, nyet&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">the_longest_ternary_style_that_can_be_done&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;yes, true, affirmative, confirmed, correct&amp;#39;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">predicate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;no, false, negative, nay&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>No:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">bad_line_breaking&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;yes&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">predicate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">value&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;no&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">portion_too_long&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;yes&amp;#39;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">some_long_module&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">some_long_predicate_function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">really_long_variable_name&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;no, false, negative, nay&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#a40000">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="默认参数值">默认参数值&lt;/h2>
&lt;p>适用于大部分情况.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>你可以在函数参数列表的最后指定变量的值, 例如, &lt;code>def foo(a, b = 0):&lt;/code> . 如果调用foo时只带一个参数, 则b被设为0. 如果带两个参数, 则b的值等于第二个参数.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>你经常会碰到一些使用大量默认值的函数, 但偶尔(比较少见)你想要覆盖这些默认值. 默认参数值提供了一种简单的方法来完成这件事, 你不需要为这些罕见的例外定义大量函数. 同时, Python也不支持重载方法和函数, 默认参数是一种&amp;quot;仿造&amp;quot;重载行为的简单方式.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>默认参数只在模块加载时求值一次. 如果参数是列表或字典之类的可变类型, 这可能会导致问题. 如果函数修改了对象(例如向列表追加项), 默认值就被修改了.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>鼓励使用, 不过有如下注意事项:不要在函数或方法定义中使用可变对象作为默认值.&lt;/p>
&lt;p>Yes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Optional&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Sequence&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">b&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Sequence&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">()):&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Empty tuple OK since tuples are immutable&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>No:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">[]):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">time&lt;/span>&lt;span style="color:#000;font-weight:bold">()):&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># The time the module was loaded???&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">FLAGS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">my_thing&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># sys.argv has not yet been parsed...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Mapping&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{}):&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Could still get passed to unchecked code&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="特性properties">特性(properties)&lt;/h2>
&lt;p>(译者注:参照fluent python.这里将 &amp;ldquo;property&amp;rdquo; 译为&amp;quot;特性&amp;quot;,而 &amp;ldquo;attribute&amp;rdquo; 译为属性. python中数据的属性和处理数据的方法统称属性&amp;quot;(arrtibute)&amp;quot;, 而在不改变类接口的前提下用来修改数据属性的存取方法我们称为&amp;quot;特性(property)&amp;quot;.)&lt;/p>
&lt;p>访问和设置数据成员时, 你通常会使用简单, 轻量级的访问和设置函数.建议使用特性(properties)来代替它们.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>一种用于包装方法调用的方式. 当运算量不大, 它是获取和设置属性(attribute)的标准方式.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>通过消除简单的属性(attribute)访问时显式的get和set方法调用, 可读性提高了. 允许懒惰的计算. 用Pythonic的方式来维护类的接口. 就性能而言, 当直接访问变量是合理的, 添加访问方法就显得琐碎而无意义. 使用特性(properties)可以绕过这个问题. 将来也可以在不破坏接口的情况下将访问方法加上.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>特性(properties)是在get和set方法声明后指定, 这需要使用者在接下来的代码中注意: set和get是用于特性(properties)的(除了用 &lt;code>@property&lt;/code> 装饰器创建的只读属性). 必须继承自object类. 可能隐藏比如操作符重载之类的副作用. 继承时可能会让人困惑. (译者注:这里没有修改原始翻译,其实就是 @property 装饰器是不会被继承的)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>你通常习惯于使用访问或设置方法来访问或设置数据, 它们简单而轻量. 不过我们建议你在新的代码中使用属性. 只读属性应该用&lt;code>@property&lt;/code>&lt;a href="./#%E5%87%BD%E6%95%B0%E4%B8%8E%E6%96%B9%E6%B3%95%E8%A3%85%E9%A5%B0%E5%99%A8">装饰器&lt;/a> 来创建.
如果子类没有覆盖属性, 那么属性的继承可能看上去不明显. 因此使用者必须确保访问方法间接被调用, 以保证子类中的重载方法被属性调用(使用模板方法设计模式).&lt;/p>
&lt;p>Yes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">math&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">Square&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;A square with two properties: a writable area and a read-only perimeter.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> To use:
&lt;/span>&lt;span style="color:#4e9a06"> &amp;gt;&amp;gt;&amp;gt; sq = Square(3)
&lt;/span>&lt;span style="color:#4e9a06"> &amp;gt;&amp;gt;&amp;gt; sq.area
&lt;/span>&lt;span style="color:#4e9a06"> 9
&lt;/span>&lt;span style="color:#4e9a06"> &amp;gt;&amp;gt;&amp;gt; sq.perimeter
&lt;/span>&lt;span style="color:#4e9a06"> 12
&lt;/span>&lt;span style="color:#4e9a06"> &amp;gt;&amp;gt;&amp;gt; sq.area = 16
&lt;/span>&lt;span style="color:#4e9a06"> &amp;gt;&amp;gt;&amp;gt; sq.side
&lt;/span>&lt;span style="color:#4e9a06"> 4
&lt;/span>&lt;span style="color:#4e9a06"> &amp;gt;&amp;gt;&amp;gt; sq.perimeter
&lt;/span>&lt;span style="color:#4e9a06"> 16
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">__init__&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">side&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">side&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">side&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@property&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">area&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Area of the square.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_get_area&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@area&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setter&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">area&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">area&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">_set_area&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">area&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">_get_area&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Indirect accessor to calculate the &amp;#39;area&amp;#39; property.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">side&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">**&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">_set_area&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">area&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Indirect setter to set the &amp;#39;area&amp;#39; property.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">side&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">math&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sqrt&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">area&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@property&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">perimeter&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">side&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="truefalse的求值">True/False的求值&lt;/h2>
&lt;p>尽可能使用隐式false&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>Python在布尔上下文中会将某些值求值为false. 按简单的直觉来讲, 就是所有的&amp;quot;空&amp;quot;值都被认为是false. 因此0， None, [], {}, &amp;quot;&amp;quot; 都被认为是false.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>使用Python布尔值的条件语句更易读也更不易犯错. 大部分情况下, 也更快.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>对C/C++开发人员来说, 可能看起来有点怪.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>尽可能使用隐式的false, 例如: 使用 &lt;code>if foo:&lt;/code> 而不是 &lt;code>if foo != []:&lt;/code> . 不过还是有一些注意事项需要你铭记在心:&lt;/p>
&lt;ul>
&lt;li>对于判断单例对象的值是否为&lt;code>None&lt;/code>时,使用 &lt;code>if foo is None&lt;/code> 或者 &lt;code>is not None&lt;/code>.当你要测试一个默认值是&lt;code>None&lt;/code>的变量或参数是否被设为其它值. 这个值在布尔语义下可能是false!(译者注: &lt;code>is&lt;/code> 比较的是对象的id(), 这个函数返回的通常是对象的内存地址,考虑到CPython的对象重用机制,可能会出现生命周不重叠的两个对象会有相同的id)&lt;/li>
&lt;li>永远不要用==将一个布尔量与false相比较. 使用 &lt;code>if not x:&lt;/code> 代替. 如果你需要区分false和None, 你应该用像 &lt;code>if not x and x is not None:&lt;/code>&lt;/li>
&lt;li>这样的语句.对于序列(字符串, 列表, 元组), 要注意空序列是false. 因此 &lt;code>if not seq:&lt;/code> 或者 &lt;code>if seq:&lt;/code> 比 &lt;code>if len(seq):&lt;/code> 或 &lt;code>if not len(seq):&lt;/code> 要更好.&lt;/li>
&lt;li>处理整数时, 使用隐式false可能会得不偿失(即不小心将None当做0来处理). 你可以将一个已知是整型(且不是len()的返回结果)的值与0比较.&lt;/li>
&lt;/ul>
&lt;p>Yes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#000">users&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;no users&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">handle_zero&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">handle_multiple_of_ten&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>No:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">users&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;no users&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#204a87;font-weight:bold">is&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">handle_zero&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">handle_multiple_of_ten&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">or&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意&lt;code>'0'&lt;/code>(字符串&lt;code>0&lt;/code>)会被当做true.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="词法作用域lexical-scoping">词法作用域(Lexical Scoping)&lt;/h2>
&lt;p>推荐使用&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>嵌套的Python函数可以引用外层函数中定义的变量, 但是不能够对它们赋值. 变量绑定的解析是使用词法作用域, 也就是基于静态的程序文本. 对一个块中的某个名称的任何赋值都会导致Python将对该名称的全部引用当做局部变量, 甚至是赋值前的处理. 如果碰到global声明, 该名称就会被视作全局变量.
一个使用这个特性的例子:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">get_adder&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">summand1&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">float&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Callable&lt;/span>&lt;span style="color:#000;font-weight:bold">[[&lt;/span>&lt;span style="color:#204a87">float&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#204a87">float&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Returns a function that adds numbers to a given number.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">adder&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">summand2&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">float&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87">float&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">summand1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">summand2&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">adder&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>通常可以带来更加清晰，优雅的代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>可能导致让人迷惑的bug. 例如下面这个依据 &lt;a href="http://www.python.org/dev/peps/pep-0227/">PEP-0227&lt;/a> 的例子:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Iterable&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">]):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># A bunch of code here&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># ...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Ah, i *is* local to foo, so this is what bar sees&lt;/span>
&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">end&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因此&lt;code>foo([1, 2, 3])&lt;/code>会打印&lt;code>1 2 3 3&lt;/code>，而不是&lt;code>1 2 3 4&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>鼓励使用.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="函数与方法装饰器">函数与方法装饰器&lt;/h2>
&lt;p>好处很显然, 明智而谨慎的使用装饰器,避免使用 &lt;code>staticmethod&lt;/code>以及谨慎使用&lt;code>classmethod&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>&lt;a href="https://docs.python.org/3/glossary.html#term-decorator">用于函数及方法的装饰器&lt;/a> (也就是@标记). 最常见的装饰器是@classmethod 和@staticmethod, 用于将常规函数转换成类方法或静态方法. 不过, 装饰器语法也允许用户自定义装饰器. 特别地, 对于某个函数 &lt;code>my_decorator&lt;/code> , 下面的两段代码是等效的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">C&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@my_decorator&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># method body&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">C&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># method body&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000">method&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">my_decorator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">method&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>优雅的在函数上指定一些转换. 该转换可能减少一些重复代码, 保持已有函数不变(enforce invariants), 等.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>装饰器可以在函数的参数或返回值上执行任何操作, 这可能导致让人惊异的隐藏行为. 而且, 装饰器在导入时执行. 从装饰器代码中捕获错误并处理是很困难的.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>如果好处很显然, 就明智而谨慎的使用装饰器. 装饰器应该遵守和函数一样的导入和命名规则. 装饰器的python文档应该清晰的说明该函数是一个装饰器. 请为装饰器编写单元测试.&lt;/p>
&lt;p>避免装饰器自身对外界的依赖(即不要依赖于文件, socket, 数据库连接等), 因为装饰器运行时这些资源可能不可用(由 &lt;code>pydoc&lt;/code> 或其它工具导入). 应该保证一个用有效参数调用的装饰器在所有情况下都是成功的.&lt;/p>
&lt;p>装饰器是一种特殊形式的&amp;quot;顶级代码&amp;quot;. 参考后面关于 &lt;a href="../python_style_rules/#main">Main&lt;/a> 的话题.&lt;/p>
&lt;p>除非是为了将方法和现有的API集成，否则不要使用 &lt;code>staticmethod&lt;/code> .多数情况下，将方法封装成模块级的函数可以达到同样的效果.&lt;/p>
&lt;p>谨慎使用 &lt;code>classmethod&lt;/code> .通常只在定义备选构造函数，或者写用于修改诸如进程级缓存等必要的全局状态的特定类方法才用。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="线程">线程&lt;/h2>
&lt;p>不要依赖内建类型的原子性.&lt;/p>
&lt;p>虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的(即: 如果&lt;code>__hash__&lt;/code>或&lt;code>__eq__&lt;/code>被实现为Python方法)且它们的原子性是靠不住的. 你也不能指望原子变量赋值(因为这个反过来依赖字典).&lt;/p>
&lt;p>优先使用Queue模块的 &lt;code>Queue&lt;/code> 数据类型作为线程间的数据通信方式. 另外, 使用threading模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用 &lt;code>threading.Condition&lt;/code> 来取代低级别的锁了.&lt;/p>
&lt;h2 id="威力过大的特性">威力过大的特性&lt;/h2>
&lt;p>避免使用这些特性&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>Python是一种异常灵活的语言, 它为你提供了很多花哨的特性, 诸如元类(metaclasses), 字节码访问, 任意编译(on-the-fly compilation), 动态继承, 对象父类重定义(object reparenting), 导入黑客(import hacks), 反射(例如使用&lt;code>getattr()&lt;/code>), 系统内修改(modification of system internals), 实现&lt;code>__del__&lt;/code>方法‎定制清理‎等等.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>强大的语言特性, 能让你的代码更紧凑.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>使用这些很&amp;quot;酷&amp;quot;的特性十分诱人, 但不是绝对必要. 使用奇技淫巧的代码将更加难以阅读和调试. 开始可能还好(对原作者而言), 但当你回顾代码, 它们可能会比那些稍长一点但是很直接的代码更加难以理解.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>在你的代码中避免这些特性.当然，利用了这些特性的来编写的一些标准库是值得去使用的，比如&lt;code>abc.ABCMeta&lt;/code>、&lt;code>dataclasses&lt;/code>、&lt;code>enum&lt;/code>等.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="代码类型注释">代码类型注释&lt;/h2>
&lt;p>你可以根据 &lt;a href="https://www.python.org/dev/peps/pep-0484/">PEP-484&lt;/a> 来对 python3 代码进行注释,并使用诸如 &lt;a href="https://github.com/google/pytype">pytype&lt;/a> 之类的类型检查工具来检查代码. 类型注释既可以写在源码,也可以写在 &lt;a href="https://www.python.org/dev/peps/pep-0484/#stub-files">pyi&lt;/a> 中.推荐尽量写在源码里,对于第三方扩展包,可以写在pyi文件里.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>定义:&lt;/p>
&lt;p>用于函数参数和返回值的类型注释:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用 &lt;a href="https://www.python.org/dev/peps/pep-0526/">PEP-526&lt;/a> 中的语法来声明变量类型:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">SomeType&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">some_func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在必须支持老版本 python 运行的代码中则可以这样注释:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">some_func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># type: SomeType&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>优点:&lt;/p>
&lt;p>可以提高代码可读性和可维护性.同时一些类型检查器可以帮您提早发现一些运行时错误,并降低您使用大威力特性的必要.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缺点:&lt;/p>
&lt;p>必须时常更新类型声明.过时的类型声明可能会误导您.使用类型检查器会抑制您使用大威力特性.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>结论:&lt;/p>
&lt;p>强烈推荐您在更新代码时使用 python 类型分析.在添加或修改公共API时使用类型注释,在最终构建整个项目前使用 pytype 来进行检查.由于静态分析对于 python 来说还不够成熟,因此可能会出现一些副作用(例如错误推断的类型)可能会阻碍项目的部署.在这种情况下,建议作者添加一个 TODO 注释或者链接,来描述当前构建文件或是代码本身中使用类型注释导致的问题.(译者注: 代码类型注释在帮助IDE或是vim等进行补全倒是很有效)&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 你需要微服务么</title><link>/docs/automationintegrationstandards/testprocessstandards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/automationintegrationstandards/testprocessstandards/</guid><description/></item><item><title>Docs: 你需要微服务么</title><link>/docs/microservice/isneedmicroservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/microservice/isneedmicroservice/</guid><description>
&lt;p>你应该早已经看过许多介绍微服务优点的博文，但很少有人告诉你微服务的切分、微服务的管理和监测等要点如果处理不当，微服务的实施将会是一场噩梦。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>单体式架构&lt;/th>
&lt;th>微服务&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>开发&lt;/td>
&lt;td>初始开发速度更快；难以更改或添加功能&lt;/td>
&lt;td>早期设计至关重要；添加或更改服务较为容易&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>应用工作流&lt;/td>
&lt;td>易于将应用纳入工作流；可在单个位置实施功能（如身份验证或监控）&lt;/td>
&lt;td>在工作流中分配服务变得更加复杂；服务间的依赖关系或要求可能不明确&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>培训和维护&lt;/td>
&lt;td>架构简单；对环境和语言有着严格的开发要求&lt;/td>
&lt;td>架构灵活，设计复杂度得到提高；采用标准 API 或消息连接的多语言服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>灵活扩展&lt;/td>
&lt;td>难以扩展；依赖于硬件基础架构；为应对一个服务的高峰而需扩展整个应用&lt;/td>
&lt;td>易于扩展各个服务，而不会影响整体架构；使用软件定义的基础架构（容器、云）实现动态响应&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更新、故障转移、停机&lt;/td>
&lt;td>所有服务均紧密耦合；服务必须一起更新；版本耦合；如果单个服务出现故障，则存在系统故障的风险&lt;/td>
&lt;td>服务非耦合；可以独立添加或更新服务；故障风险仅限于一小部分服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>自动化&lt;/td>
&lt;td>很大程度上无须自动化&lt;/td>
&lt;td>需要自动化和编排&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在一个项目开始前，你应该按照以下步骤来思考你是否需要引入微服务架构：&lt;/p>
&lt;ol>
&lt;li>谁是您的客户或用户？&lt;/li>
&lt;li>他们想要做什么？&lt;/li>
&lt;li>您使用什么基础架构？&lt;/li>
&lt;li>该基础架构生命周期有多长？&lt;/li>
&lt;li>单个工作流有哪些服务或功能需求？&lt;/li>
&lt;li>该工作流的生命周期有多长？&lt;/li>
&lt;li>您的部署路径是什么？需要多久部署一次？&lt;/li>
&lt;li>这会影响哪些业务功能？&lt;/li>
&lt;/ol>
&lt;p>项目的成功衡量标准不是由开发人员来定义，而是由项目所面对的客户来评价。因此，客户看重什么、客户的期望结果、
客户如何评判成功才是项目架构设计前的首要考虑因素。应用的&lt;/p>
&lt;p>因此，选择单体式架构、微服务架构或是面向服务架构前，应首先考虑你想要做什么和客户需要什么。&lt;/p>
&lt;p>简单来说，单体式应用就是在单个应用中包含所有功能的应用堆栈。无论是服务之间的交互还是开发与交付方式，都采用紧密耦合的形式。
更新或扩展单体式应用的某个方面也会对整个应用及其基础架构产生影响。&lt;/p>
&lt;p>单体式应用存在的潜在问题是动态扩展和故障转移。这些问题通常可通过简单的扩展性设计来加以解决，
例如横向扩展(在集群中复制该功能)或纵向扩展(镜像实例和扩展硬件)。开发和运维团队也很少考虑可扩展性问题。
如果需要一个完整的 50 人团队每 6 到 9 个月发布一个单体式应用，那么通过让五个独立的团队提供五个较小的应用并每隔几周发布一次更新，
即可提高可扩展性。考虑到最初的简单性以及服务与依赖项之间的清晰关系，单体式架构可能称得上是最古老的应用架构。&lt;/p>
&lt;p>由于单体式是一种较为陈旧的架构形式，因此它们常常与传统应用相关联。相比而言，更为现代化的架构则尝试按功能或业务能力来拆分服务，
以带来更好的灵活性。这在面向客户的界面(如 API、移动应用或 Web 应用)中尤为常见。这些界面通常较小，需要更加频繁的更新才能满足客户的期望。&lt;/p>
&lt;p>分布式架构的最新定义之一是微服务。与其他模块化设计，像面向服务的架构(SOA)有一些相似之处，但微服务将服务之间的松散耦合转变为服务独立性。
通常，单个服务的定义较为明确，可以轻松地在较大的架构中添加、升级或删除服务。这对于动态可扩展性和容错能力都有一定的好处:
可以在不占用大量基础架构的情况下按需扩展单个服务，或者可以在不影响其他服务的情况下进行故障转移。&lt;/p></description></item><item><title>Docs: 团队文化</title><link>/docs/projectmanagementstandards/teamculture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/projectmanagementstandards/teamculture/</guid><description>
&lt;p>微服务、敏捷开发、&lt;a href="https://zh.wikipedia.org/wiki/DevOps">DevOps&lt;/a> 在软件和互联网行业大行其道，屹立潮头的企业们设计了许多精巧的软件架构、严密的开发流程来适应这些新事物。
事实上，&lt;a href="https://www.gartner.com/newsroom/id/3032517">Gartner&lt;/a> 曾做过统计，90%的DevOps 实践最终都走向了失败。人们逐渐发现，
即使你设计的再精美的系统架构图、再严密的流程，一旦涉及到诸如人的参与和或卷入传统企业流程，往往都会变形，并最终走向崩溃。&lt;/p>
&lt;p>康威定理指出：“任何采用系统设计的企业，其设计结构最终都会不可避免地与该企业的沟通结构相一致。”针对这方面，有两个彼此相关的解释：&lt;/p>
&lt;ul>
&lt;li>除非也改变沟通结构，否则单纯改变架构或基础架构不会带来任何改变；&lt;/li>
&lt;li>无论基础架构如何，改变沟通结构都会带来流程和基础架构的改进。&lt;/li>
&lt;/ul>
&lt;p>打造支持持续交付规范的团队（企业）文化，将是你实践 devSpec 的第一步。&lt;/p></description></item><item><title>Docs: 持续集成</title><link>/docs/automationintegrationstandards/continuesintegrationstandards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/automationintegrationstandards/continuesintegrationstandards/</guid><description/></item><item><title>Docs: 项目开发计划</title><link>/docs/documentationstyleguide/gb856t88/projectdevelopmentplan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/projectdevelopmentplan/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>说明：编写这份软件项目开发计划的目的，并指出预期的读者。&lt;/p>
&lt;h3 id="12-背景">1.2 背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>待开发的软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本项目的任务提出者、开发者、用户及实现该软件的计算中心或计算机网络；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该软件系统同其他系统或其他机构的基本的相互来往关系。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到的专门术语的定义和外文的首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出用得着的参考资料，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的经核准的计划任务书和合同、上级机关的批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表的文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处引用的文件、资料，包括所要用到的软件开发标准。列出这些文件资料的标题、文件编号、发表日期和出版单位，说明能够得到这些文件资料的来源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2项目概述">2项目概述&lt;/h2>
&lt;h3 id="21工作内容">2.1工作内容&lt;/h3>
&lt;p>简要地说明在本项目的开发中须进行的各项主要工作。&lt;/p>
&lt;h3 id="22主要参加人员">2.2主要参加人员&lt;/h3>
&lt;p>扼要说明参加本项目开发的主要人员的情况，包括他们的技术水平。&lt;/p>
&lt;h3 id="23产品">2.3产品&lt;/h3>
&lt;h4 id="231程序">2.3.1程序&lt;/h4>
&lt;p>列出须移交给用户的程序的名称、所用地编程语言及存储程序的媒体形式，并通过引用相关文件，逐项说明其功能和能力。&lt;/p>
&lt;h4 id="232文件">2.3.2文件&lt;/h4>
&lt;p>列出须移交用户的每种文件的名称及内容要点。&lt;/p>
&lt;h4 id="233服务">2.3.3服务&lt;/h4>
&lt;p>列出需向用户提供的各项服务，如培训安装、维护和运行支持等，应逐项规定开始日期、所提供支持的级别和服务的期限。&lt;/p>
&lt;h4 id="234非移交的产品">2.3.4非移交的产品&lt;/h4>
&lt;p>说明开发集体应向本单位交出但不必向用户移交的产品（文件甚至某些程序）。&lt;/p>
&lt;h3 id="24验收标准">2.4验收标准&lt;/h3>
&lt;p>对于上述这些应交出的产品和服务，逐项说明或引用资料说明验收标准。&lt;/p>
&lt;h3 id="25完成项目的最迟期限">2.5完成项目的最迟期限&lt;/h3>
&lt;h3 id="26本计划的批准者和批准日期">2.6本计划的批准者和批准日期&lt;/h3>
&lt;h2 id="3实施计划">3实施计划&lt;/h2>
&lt;h3 id="31工作任务的分解与人员分工">3.1工作任务的分解与人员分工&lt;/h3>
&lt;p>对于项目开发中需要完成的各项工作，从需求分析、设计、实现、测试直到维护，包括文件的编制、审批、打印、分发工作，用户培训工作，软件安装工作等，按层次进行分解，指明每项任务的负责人和参加人员。&lt;/p>
&lt;h3 id="32接口人员">3.2接口人员&lt;/h3>
&lt;p>说明负责接口工作的人员及他们的职责，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>负责本项目同用户的接口人员；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>负责本项目同本单位各管理机构，如合同计划管理部门、财务部门、质量管理部门等的接口人员；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>负责本项目同个份合同负责单位的接口人员等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="33进度">3.3进度&lt;/h3>
&lt;p>对于需求分析、设计、编码实现、测试、移交、培训和安装等工作，给出每项工作任务的预定开始日期、完成日期及所需资源，规定各项工作任务完成的先后顺序以及表征每项工作任务完成的标志性事件（即所谓“里程碑）。&lt;/p>
&lt;h3 id="34预算">3.4预算&lt;/h3>
&lt;p>逐项列出本开发项目所需要的劳务（包括人员的数量和时间）以及经费的预算（包括办公费、差旅费、机时费、资料费、通讯设备和专用设备的租金等）和来源。&lt;/p>
&lt;h3 id="35关键问题">3.5关键问题&lt;/h3>
&lt;p>逐项列出能够影响整个项目成败的关键问题、技术难点和风险，指出这些问题对项目的影响。&lt;/p>
&lt;h2 id="4支持条件">4支持条件&lt;/h2>
&lt;p>说明为支持本项目的开发所需要的各种条件和设施。&lt;/p>
&lt;h3 id="41计算机系统支持">4.1计算机系统支持&lt;/h3>
&lt;p>逐项列出开发中和运行时所需的计算机系统支持，包括计算机、外围设备、通讯设备、模拟器、编译（或汇编）程序、操作系统、数据管理程序包、数据存储能力和测试支持能力等，逐项给出有关到货日期、使用时间的要求。&lt;/p>
&lt;h3 id="42需由用户承担的工作">4.2需由用户承担的工作&lt;/h3>
&lt;p>逐项列出需要用户承担的工作和完成期限。包括需由用户提供的条件及提供时间。&lt;/p>
&lt;h3 id="43由外单位提供的条件">4.3由外单位提供的条件&lt;/h3>
&lt;p>逐项列出需要外单位分合同承包者承担的工作和完成的时间，包括需要由外单位提供的条件和提供的时间。&lt;/p>
&lt;h2 id="5专题计划要点">5专题计划要点&lt;/h2>
&lt;p>说明本项目开发中需制定的各个专题计划（如分合同计划、开发人员培训计划、测试计划、安全保密计划、质量保证计划、配置管理计划、用户培训计划、系统安装计划等）的要点。&lt;/p></description></item><item><title>Docs: Python风格规范</title><link>/docs/pythoncodingstyle/python_style_rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/pythoncodingstyle/python_style_rules/</guid><description>
&lt;h2 id="分号">分号&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 不要在行尾加分号, 也不要用分号将两条命令放在同一行.&lt;/p>
&lt;/blockquote>
&lt;h2 id="行长度">行长度&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 每行不超过80个字符&lt;/p>
&lt;/blockquote>
&lt;p>例外:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>长的导入模块语句&lt;/p>
&lt;/li>
&lt;li>
&lt;p>注释里的URL,路径以及其他的一些长标记&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不便于换行，不包含空格的模块级字符串常量，比如url或者路径&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>Pylint 禁用注释.（例如：&lt;a href="https://github.com/zh-google-styleguide/zh-google-styleguide/blob/master/google-python-styleguide/python_style_rules.rst#id3">``&lt;/a># pylint: disable=invalid-name）&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>除非是在 &lt;code>with&lt;/code> 语句需要三个以上的上下文管理器的情况下，否则不要使用反斜杠连接行.&lt;/p>
&lt;p>Python会将 &lt;a href="http://docs.python.org/2/reference/lexical_analysis.html#implicit-line-joining">圆括号, 中括号和花括号中的行隐式的连接起来&lt;/a> , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes: &lt;/span>
&lt;span style="color:#000">foo_bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">width&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">height&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">color&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;black&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">design&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;foo&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">emphasis&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">highlight&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">width&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">height&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span>
&lt;span style="color:#000">color&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;red&amp;#39;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">emphasis&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;strong&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;This will build a very long long &amp;#39;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#39;long long long long long long string&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在注释中，如果必要，将长的URL放在一行上。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes: &lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># See details at&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No: &lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># See details at&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># http://www.example.com/us/developer/documentation/api/content/\&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># v2.0/csv_file_name_extension_full_specification.html&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当 &lt;code>with&lt;/code> 表达式需要使用三个及其以上的上下文管理器时，可以使用反斜杠换行.若只需要两个，请使用嵌套的with.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">with&lt;/span> &lt;span style="color:#000">very_long_first_expression_function&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> \
&lt;span style="color:#000">very_long_second_expression_function&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> \
&lt;span style="color:#000">third_thing&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">eggs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">place_order&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">eggs&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">with&lt;/span> &lt;span style="color:#000">VeryLongFirstExpressionFunction&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> \
&lt;span style="color:#000">VeryLongSecondExpressionFunction&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">PlaceOrder&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">eggs&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">with&lt;/span> &lt;span style="color:#000">very_long_first_expression_function&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">with&lt;/span> &lt;span style="color:#000">very_long_second_expression_function&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">place_order&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意上面例子中的元素缩进; 你可以在本文的 &lt;a href="./#%E7%BC%A9%E8%BF%9B">&lt;code>缩进&lt;/code>&lt;/a> 部分找到解释.&lt;/p>
&lt;p>另外在其他所有情况下，若一行超过80个字符，但 &lt;a href="https://github.com/google/yapf/">yapf&lt;/a> 却无法将该行字数降至80个字符以下时，则允许该行超过80个字符长度.&lt;/p>
&lt;h2 id="括号">括号&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 宁缺毋滥的使用括号&lt;/p>
&lt;/blockquote>
&lt;p>除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用括号是可以的.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes: &lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#204a87;font-weight:bold">and&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># For a 1 item tuple the ()s are more visually obvious than the comma.&lt;/span>
&lt;span style="color:#000">onesie&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">,)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">foo&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">beans&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">beans&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#204a87">dict&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">items&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No: &lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87;font-weight:bold">not&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="缩进">缩进&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 用4个空格来缩进代码&lt;/p>
&lt;/blockquote>
&lt;p>绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素(见 &lt;a href="./#%E8%A1%8C%E9%95%BF%E5%BA%A6">&lt;code>行长度&lt;/code>&lt;/a> 部分的示例), 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Aligned with opening delimiter&lt;/span>
&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">long_function_name&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">var_one&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_two&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">var_three&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_four&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Aligned with opening delimiter in a dictionary&lt;/span>
&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">long_dictionary_key&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">value1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>
&lt;span style="color:#000">value2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 4-space hanging indent; nothing on first line&lt;/span>
&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">long_function_name&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">var_one&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_two&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_three&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">var_four&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 4-space hanging indent in a dictionary&lt;/span>
&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">long_dictionary_key&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">long_dictionary_value&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Stuff on first line forbidden&lt;/span>
&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">long_function_name&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">var_one&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_two&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">var_three&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_four&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 2-space hanging indent forbidden&lt;/span>
&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">long_function_name&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">var_one&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_two&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var_three&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">var_four&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No hanging indent in a dictionary&lt;/span>
&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">long_dictionary_key&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">long_dictionary_value&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="序列元素尾部逗号">序列元素尾部逗号&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 仅当 &lt;code>]&lt;/code>, &lt;code>)&lt;/code>, &lt;code>}&lt;/code> 和末位元素不在同一行时，推荐使用序列元素尾部逗号. 当末位元素尾部有逗号时，元素后的逗号可以指示 &lt;a href="https://pypi.org/project/yapf/">YAPF&lt;/a> 将序列格式化为每行一项.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">golomb3&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">golomb4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#000">golomb4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>
&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="空行">空行&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 顶级定义之间空两行, 方法定义之间空一行&lt;/p>
&lt;/blockquote>
&lt;p>顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.&lt;/p>
&lt;h2 id="空格">空格&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 按照标准的排版规范来使用标点两边的空格&lt;/p>
&lt;/blockquote>
&lt;p>括号内不要有空格.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ham&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">eggs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#000;font-weight:bold">[])&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span> &lt;span style="color:#000">ham&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span> &lt;span style="color:#000">eggs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes: &lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">x&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数列表, 索引或切片的左括号前不应加空格.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">spam&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># no:&lt;/span>
&lt;span style="color:#000">spam&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87">dict&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;key&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">list&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">index&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87">dict&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;key&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">list&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">index&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, &amp;lt;, &amp;gt;, !=, &amp;lt;&amp;gt;, &amp;lt;=, &amp;gt;=, in, not in, is, is not), 布尔(and, or, not). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当 &lt;code>=&lt;/code> 用于指示关键字参数或默认参数值时, 不要在其两侧使用空格. 但若存在类型注释的时候,需要在 &lt;code>=&lt;/code> 周围使用空格.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">complex&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">real&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">imag&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.0&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">magic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">real&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">imag&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">complex&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">real&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">imag&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">float&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.0&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Magic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">real&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">imag&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">complex&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">real&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">imag&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.0&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">magic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">real&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">imag&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">complex&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">real&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">imag&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">float&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0.0&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Magic&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">real&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">imag&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># comment&lt;/span>
&lt;span style="color:#000">long_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># comment that should not be aligned&lt;/span>
&lt;span style="color:#000">dictionary&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;long_name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#000">foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># comment&lt;/span>
&lt;span style="color:#000">long_name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># comment that should not be aligned&lt;/span>
&lt;span style="color:#000">dictionary&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;foo&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;long_name&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="shebang">Shebang&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 大部分.py文件不必以#!作为文件的开始. 根据 &lt;a href="http://www.python.org/dev/peps/pep-0394/">PEP-394&lt;/a> , 程序的main文件应该以 &lt;code>#!/usr/bin/python2&lt;/code> 或者 &lt;code>#!/usr/bin/python3&lt;/code> 开始.&lt;/p>
&lt;/blockquote>
&lt;p>(译者注: 在计算机科学中, &lt;a href="http://en.wikipedia.org/wiki/Shebang_(Unix)">Shebang&lt;/a> (也称为Hashbang)是一个由井号和叹号构成的字符串行(#!), 其出现在文本文件的第一行的前两个字符. 在文件中存在Shebang的情况下, 类Unix操作系统的程序载入器会分析Shebang后的内容, 将这些内容作为解释器指令, 并调用该指令, 并将载有Shebang的文件路径作为该解释器的参数. 例如, 以指令#!/bin/sh开头的文件在执行时会实际调用/bin/sh程序.)&lt;/p>
&lt;p>&lt;code>#!&lt;/code> 先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略. 因此只有被直接执行的文件中才有必要加入 &lt;code>#!&lt;/code> .&lt;/p>
&lt;h2 id="注释">注释&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 确保对模块, 函数, 方法和行内注释使用正确的风格&lt;/p>
&lt;/blockquote>
&lt;h3 id="文档字符串">文档字符串&lt;/h3>
&lt;blockquote>
&lt;p>Python有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的 &lt;code>__doc__&lt;/code> 成员被自动提取, 并且被pydoc所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号&amp;quot;&amp;quot;&amp;quot;( &lt;a href="http://www.python.org/dev/peps/pep-0257/">PEP-257&lt;/a> ). 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.&lt;/p>
&lt;/blockquote>
&lt;h3 id="模块">模块&lt;/h3>
&lt;blockquote>
&lt;p>每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板. 其开头应是对模块内容和用法的描述.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;A one line summary of the module or program, terminated by a period.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">Leave one blank line. The rest of this docstring should contain an
&lt;/span>&lt;span style="color:#4e9a06">overall description of the module or program. Optionally, it may also
&lt;/span>&lt;span style="color:#4e9a06">contain a brief description of exported classes and functions and/or usage
&lt;/span>&lt;span style="color:#4e9a06">examples.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">Typical usage example:
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">foo = ClassFoo()
&lt;/span>&lt;span style="color:#4e9a06">bar = foo.FunctionBar()
&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数和方法">函数和方法&lt;/h3>
&lt;blockquote>
&lt;p>下文所指的函数,包括函数, 方法, 以及生成器.&lt;/p>
&lt;p>一个函数必须要有文档字符串, 除非它满足以下条件:&lt;/p>
&lt;ol>
&lt;li>外部不可见&lt;/li>
&lt;li>非常短小&lt;/li>
&lt;li>简单明了&lt;/li>
&lt;/ol>
&lt;p>文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述&amp;quot;怎么做&amp;quot;, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义. 覆盖基类的子类方法应有一个类似 &lt;code>See base class&lt;/code> 的简单注释来指引读者到基类方法的文档注释.若重载的子类方法和基类方法有很大不同,那么注释中应该指明这些信息.&lt;/p>
&lt;p>关于函数的几个方面应该在特定的小节中进行描述记录， 这几个方面如下文所述. 每节应该以一个标题行开始. 标题行以冒号结尾. 除标题行外, 节的其他内容应被缩进2个空格.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Args:&lt;/p>
&lt;p>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受&lt;em>foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出&lt;/em>foo和**bar.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Returns: (或者 Yields: 用于生成器)&lt;/p>
&lt;p>描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Raises:&lt;/p>
&lt;p>列出与接口有关的所有异常.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">fetch_smalltable_rows&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">table_handle&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">smalltable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Table&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Sequence&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Union&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span>
&lt;span style="color:#000">require_all_keys&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">bool&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Mapping&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Tuple&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">]]:&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Fetches rows from a Smalltable.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Retrieves rows pertaining to the given keys from the Table instance
&lt;/span>&lt;span style="color:#4e9a06"> represented by table_handle. String keys will be UTF-8 encoded.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Args:
&lt;/span>&lt;span style="color:#4e9a06"> table_handle: An open smalltable.Table instance.
&lt;/span>&lt;span style="color:#4e9a06"> keys: A sequence of strings representing the key of each table
&lt;/span>&lt;span style="color:#4e9a06"> row to fetch. String keys will be UTF-8 encoded.
&lt;/span>&lt;span style="color:#4e9a06"> require_all_keys: Optional; If require_all_keys is True only
&lt;/span>&lt;span style="color:#4e9a06"> rows with values set for all keys will be returned.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Returns:
&lt;/span>&lt;span style="color:#4e9a06"> A dict mapping keys to the corresponding table row data
&lt;/span>&lt;span style="color:#4e9a06"> fetched. Each row is represented as a tuple of strings. For
&lt;/span>&lt;span style="color:#4e9a06"> example:
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> {b&amp;#39;Serak&amp;#39;: (&amp;#39;Rigel VII&amp;#39;, &amp;#39;Preparer&amp;#39;),
&lt;/span>&lt;span style="color:#4e9a06"> b&amp;#39;Zim&amp;#39;: (&amp;#39;Irk&amp;#39;, &amp;#39;Invader&amp;#39;),
&lt;/span>&lt;span style="color:#4e9a06"> b&amp;#39;Lrrr&amp;#39;: (&amp;#39;Omicron Persei 8&amp;#39;, &amp;#39;Emperor&amp;#39;)}
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Returned keys are always bytes. If a key from the keys argument is
&lt;/span>&lt;span style="color:#4e9a06"> missing from the dictionary, then that row was not found in the
&lt;/span>&lt;span style="color:#4e9a06"> table (and require_all_keys must have been False).
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Raises:
&lt;/span>&lt;span style="color:#4e9a06"> IOError: An error occurred accessing the smalltable.
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>Args:&lt;/code> 上进行换行也是可以的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">fetch_smalltable_rows&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">table_handle&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">smalltable&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Table&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">keys&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Sequence&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Union&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span>
&lt;span style="color:#000">require_all_keys&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">bool&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">False&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Mapping&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Tuple&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">]]:&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Fetches rows from a Smalltable.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Retrieves rows pertaining to the given keys from the Table instance
&lt;/span>&lt;span style="color:#4e9a06"> represented by table_handle. String keys will be UTF-8 encoded.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Args:
&lt;/span>&lt;span style="color:#4e9a06"> table_handle:
&lt;/span>&lt;span style="color:#4e9a06"> An open smalltable.Table instance.
&lt;/span>&lt;span style="color:#4e9a06"> keys:
&lt;/span>&lt;span style="color:#4e9a06"> A sequence of strings representing the key of each table row to
&lt;/span>&lt;span style="color:#4e9a06"> fetch. String keys will be UTF-8 encoded.
&lt;/span>&lt;span style="color:#4e9a06"> require_all_keys:
&lt;/span>&lt;span style="color:#4e9a06"> Optional; If require_all_keys is True only rows with values set
&lt;/span>&lt;span style="color:#4e9a06"> for all keys will be returned.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Returns:
&lt;/span>&lt;span style="color:#4e9a06"> A dict mapping keys to the corresponding table row data
&lt;/span>&lt;span style="color:#4e9a06"> fetched. Each row is represented as a tuple of strings. For
&lt;/span>&lt;span style="color:#4e9a06"> example:
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> {b&amp;#39;Serak&amp;#39;: (&amp;#39;Rigel VII&amp;#39;, &amp;#39;Preparer&amp;#39;),
&lt;/span>&lt;span style="color:#4e9a06"> b&amp;#39;Zim&amp;#39;: (&amp;#39;Irk&amp;#39;, &amp;#39;Invader&amp;#39;),
&lt;/span>&lt;span style="color:#4e9a06"> b&amp;#39;Lrrr&amp;#39;: (&amp;#39;Omicron Persei 8&amp;#39;, &amp;#39;Emperor&amp;#39;)}
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Returned keys are always bytes. If a key from the keys argument is
&lt;/span>&lt;span style="color:#4e9a06"> missing from the dictionary, then that row was not found in the
&lt;/span>&lt;span style="color:#4e9a06"> table (and require_all_keys must have been False).
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Raises:
&lt;/span>&lt;span style="color:#4e9a06"> IOError: An error occurred accessing the smalltable.
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="类">类&lt;/h3>
&lt;blockquote>
&lt;p>类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">SampleClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Summary of class here.
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Longer class information....
&lt;/span>&lt;span style="color:#4e9a06"> Longer class information....
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> Attributes:
&lt;/span>&lt;span style="color:#4e9a06"> likes_spam: A boolean indicating if we like SPAM or not.
&lt;/span>&lt;span style="color:#4e9a06"> eggs: An integer count of the eggs we have laid.
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">__init__&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">likes_spam&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">False&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Inits SampleClass with blah.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">likes_spam&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">likes_spam&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">eggs&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">public_method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Performs operation blah.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="块注释和行注释">块注释和行注释&lt;/h3>
&lt;blockquote>
&lt;p>最需要写注释的是代码中那些技巧性的部分. 如果你在下次 &lt;a href="http://en.wikipedia.org/wiki/Code_review">代码审查&lt;/a> 的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># We use a weighted dictionary search to find out where i is in&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># the array. We extrapolate position based on the largest num&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># in the array and the array size and then do binary search to&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># get the exact number.&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># True if i is 0 or a power of 2.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了提高可读性, 注释应该至少离开代码2个空格.&lt;/p>
&lt;p>另一方面, 绝不要描述代码. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># BAD COMMENT: Now go through the b array and make sure whenever i occurs&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># the next element is i+1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h2 id="标点符号拼写和语法">标点符号,拼写和语法&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 注意标点符号,拼写和语法&lt;/p>
&lt;/blockquote>
&lt;p>注释应有适当的大写和标点,句子应该尽量完整.对于诸如在行尾上的较短注释,可以不那么正式,但是也应该尽量保持风格抑制.&lt;/p>
&lt;h2 id="类-1">类&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.(除非是为了和 python2 兼容)&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">SampleClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">OuterClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">InnerClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">object&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">ChildClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ParentClass&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Explicitly inherits from another class already.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">SampleClass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">OuterClass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">InnerClass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">pass&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>继承自 &lt;code>object&lt;/code> 是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受 &lt;a href="http://www.python.org/dev/peps/pep-3000/">PEP-3000&lt;/a> 的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括 &lt;code>__new__, __init__, __delattr__, __getattribute__, __setattr__, __hash__, __repr__, and __str__&lt;/code> .&lt;/p>
&lt;h2 id="字符串">字符串&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">, &lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">!&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">imperative&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">expletive&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{}&lt;/span>&lt;span style="color:#4e9a06">, &lt;/span>&lt;span style="color:#4e9a06">{}&lt;/span>&lt;span style="color:#4e9a06">!&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">imperative&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">expletive&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;name: &lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">; score: &lt;/span>&lt;span style="color:#4e9a06">%d&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;name: &lt;/span>&lt;span style="color:#4e9a06">{}&lt;/span>&lt;span style="color:#4e9a06">; score: &lt;/span>&lt;span style="color:#4e9a06">{}&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">n&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">%s%s&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># use + in this case&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{}{}&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># use + in this case&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">imperative&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;, &amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">expletive&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;!&amp;#39;&lt;/span>
&lt;span style="color:#000">x&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;name: &amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">name&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;; score: &amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">n&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>避免在循环中用+和+=操作符来累加字符串. 由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用 &lt;code>.join&lt;/code> 连接列表. (也可以将每个子串写入一个 &lt;code>cStringIO.StringIO&lt;/code> 缓存中.)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">items&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;lt;table&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">last_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">first_name&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">employee_list&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">items&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">, &lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">last_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">first_name&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#000">items&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">append&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;lt;/table&amp;gt;&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">employee_table&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">join&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">items&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#000">employee_table&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;lt;table&amp;gt;&amp;#39;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">last_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">first_name&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">employee_list&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">employee_table&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">, &lt;/span>&lt;span style="color:#4e9a06">%s&lt;/span>&lt;span style="color:#4e9a06">&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">%&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">last_name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">first_name&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">employee_table&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;&amp;lt;/table&amp;gt;&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在同一个文件中, 保持使用字符串引号的一致性. 使用单引号&amp;rsquo;或者双引号&amp;quot;之一用以引用字符串, 并在同一文件中沿用. 在字符串内可以使用另外一种引号, 以避免在字符串中使用.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">Python&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Why are you hiding your eyes?&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">Gollum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;I&amp;#39;m scared of lint errors.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">Narrator&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;#34;Good!&amp;#34; thought a happy Python reviewer.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#000">Python&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Why are you hiding your eyes?&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">Gollum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;The lint. It burns. It burns us.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">Gollum&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Always the great lint. Watching. Watching.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为多行字符串使用三重双引号&amp;quot;&amp;ldquo;&amp;ldquo;而非三重单引号'''. 当且仅当项目中使用单引号&amp;rsquo;来引用字符串时, 才可能会使用三重'&amp;lsquo;&amp;lsquo;为非文档字符串的多行字符串来标识引用. 文档字符串必须使用三重双引号&amp;rdquo;&amp;quot;&amp;rdquo;. 多行字符串不应随着代码其他部分缩进的调整而发生位置移动. 如果需要避免在字符串中嵌入额外的空间,可以使用串联的单行字符串或者使用 &lt;a href="https://docs.python.org/zh-cn/3/library/textwrap.html#textwrap.dedent">textwrap.dedent()&lt;/a> 来删除每行多余的空间.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#000">long_string&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;This is pretty ugly.
&lt;/span>&lt;span style="color:#4e9a06">Don&amp;#39;t do this.
&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">long_string&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;This is fine if your use case can accept
&lt;/span>&lt;span style="color:#4e9a06"> extraneous leading spaces.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">long_string&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;And this is fine if you cannot accept&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;extraneous leading spaces.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#000">long_string&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;And this too is fine if you cannot accept&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;extraneous leading spaces.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">textwrap&lt;/span>
&lt;span style="color:#000">long_string&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">textwrap&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dedent&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>&lt;span style="color:#4e9a06"> This is also fine, because textwrap.dedent()
&lt;/span>&lt;span style="color:#4e9a06"> will collapse common leading spaces in each line.&amp;#34;&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="文件和sockets">文件和sockets&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 在文件和sockets结束时, 显式的关闭它.&lt;/p>
&lt;/blockquote>
&lt;p>除文件外, sockets或其他类似文件的对象在没有必要的情况下打开, 会有许多副作用, 例如:&lt;/p>
&lt;ol>
&lt;li>它们可能会消耗有限的系统资源, 如文件描述符. 如果这些资源在使用后没有及时归还系统, 那么用于处理这些对象的代码会将资源消耗殆尽.&lt;/li>
&lt;li>持有文件将会阻止对于文件的其他诸如移动、删除之类的操作.&lt;/li>
&lt;li>仅仅是从逻辑上关闭文件和sockets, 那么它们仍然可能会被其共享的程序在无意中进行读或者写操作. 只有当它们真正被关闭后, 对于它们尝试进行读或者写操作将会抛出异常, 并使得问题快速显现出来.&lt;/li>
&lt;/ol>
&lt;p>而且, 幻想当文件对象析构时, 文件和sockets会自动关闭, 试图将文件对象的生命周期和文件的状态绑定在一起的想法, 都是不现实的. 因为有如下原因:&lt;/p>
&lt;ol>
&lt;li>没有任何方法可以确保运行环境会真正的执行文件的析构. 不同的Python实现采用不同的内存管理技术, 比如延时垃圾处理机制. 延时垃圾处理机制可能会导致对象生命周期被任意无限制的延长.&lt;/li>
&lt;li>对于文件意外的引用,会导致对于文件的持有时间超出预期(比如对于异常的跟踪, 包含有全局变量等).&lt;/li>
&lt;/ol>
&lt;p>推荐使用 &lt;a href="http://docs.python.org/reference/compound_stmts.html#the-with-statement">&amp;ldquo;with&amp;quot;语句&lt;/a> 以管理文件:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">with&lt;/span> &lt;span style="color:#204a87">open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hello.txt&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">hello_file&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">line&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">hello_file&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87">print&lt;/span> &lt;span style="color:#000">line&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于不支持使用&amp;quot;with&amp;quot;语句的类似文件的对象,使用 contextlib.closing():&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">contextlib&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">with&lt;/span> &lt;span style="color:#000">contextlib&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">closing&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">urllib&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">urlopen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://www.python.org/&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">front_page&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">line&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">front_page&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87">print&lt;/span> &lt;span style="color:#000">line&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Legacy AppEngine 中Python 2.5的代码如使用&amp;quot;with&amp;quot;语句, 需要添加 &lt;code>from __future__ import with_statement&lt;/code> .&lt;/p>
&lt;h2 id="todo注释">TODO注释&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.&lt;/p>
&lt;/blockquote>
&lt;p>TODO注释应该在所有开头处包含&amp;quot;TODO&amp;quot;字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># TODO(kl@gmail.com): Use a &amp;#34;*&amp;#34; here for string repetition.&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># TODO(Zeke) Change this to use relations.&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你的TODO是&amp;quot;将来做某事&amp;quot;的形式, 那么请确保你包含了一个指定的日期(&amp;ldquo;2009年11月解决&amp;rdquo;)或者一个特定的事件(&amp;ldquo;等到所有的客户都可以处理XML请求就移除这些代码&amp;rdquo;).&lt;/p>
&lt;h2 id="导入格式">导入格式&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 每个导入应该独占一行, &lt;code>typing&lt;/code> 的导入除外&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes: &lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">typing&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Mapping&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Sequence&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:&lt;/p>
&lt;ol>
&lt;li>&lt;code>__future__&lt;/code> 导入&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">__future__&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">absolute_import&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">__future__&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">division&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">__future__&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">print_function&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>标准库导入&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>第三方库导入&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">tensorflow&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">tf&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>本地代码子包导入&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">otherproject.ai&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">mind&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">collections&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">queue&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">absl&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">app&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">absl&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">flags&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">bs4&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">cryptography&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">tensorflow&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">tf&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">book.genres&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">scifi&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">myproject.backend&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">huxley&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">myproject.backend.hgwells&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">time_machine&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">myproject.backend.state_machine&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">main_loop&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">otherproject.ai&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">body&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">otherproject.ai&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">mind&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">otherproject.ai&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">soul&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Older style code may have these imports down here instead:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#from myproject.backend.hgwells import time_machine&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">#from myproject.backend.state_machine import main_loop&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="语句">语句&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 通常每个语句应该独占一行&lt;/p>
&lt;/blockquote>
&lt;p>不过, 如果测试结果与测试语句在一行放得下, 你也可以将它们放在同一行. 如果是if语句, 只有在没有else时才能这样做. 特别地, 绝不要对 &lt;code>try/except&lt;/code> 这样做, 因为try和except不能放在同一行.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">else&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">baz&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">except&lt;/span> &lt;span style="color:#c00;font-weight:bold">ValueError&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">baz&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">try&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">bar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">except&lt;/span> &lt;span style="color:#c00;font-weight:bold">ValueError&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">baz&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="访问控制">访问控制&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(property)来保持语法的一致性.&lt;/p>
&lt;/blockquote>
&lt;p>(译者注: 重视封装的面向对象程序员看到这个可能会很反感, 因为他们一直被教育: 所有成员变量都必须是私有的! 其实, 那真的是有点麻烦啊. 试着去接受Pythonic哲学吧)&lt;/p>
&lt;p>另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 &lt;code>get_foo()&lt;/code> 和 &lt;code>set_foo()&lt;/code> 这样的函数调用. 如果之前的代码行为允许通过属性(property)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.&lt;/p>
&lt;h2 id="命名">命名&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 模块名写法: &lt;code>module_name&lt;/code> ;包名写法: &lt;code>package_name&lt;/code> ;类名: &lt;code>ClassName&lt;/code> ;方法名: &lt;code>method_name&lt;/code> ;异常名: &lt;code>ExceptionName&lt;/code> ;函数名: &lt;code>function_name&lt;/code> ;全局常量名: &lt;code>GLOBAL_CONSTANT_NAME&lt;/code> ;全局变量名: &lt;code>global_var_name&lt;/code> ;实例名: &lt;code>instance_var_name&lt;/code> ;函数参数名: &lt;code>function_parameter_name&lt;/code> ;局部变量名: &lt;code>local_var_name&lt;/code> . 函数名,变量名和文件名应该是描述性的,尽量避免缩写,特别要避免使用非项目人员不清楚难以理解的缩写,不要通过删除单词中的字母来进行缩写. 始终使用 &lt;code>.py&lt;/code> 作为文件后缀名,不要用破折号.&lt;/p>
&lt;/blockquote>
&lt;h3 id="应该避免的名称">应该避免的名称&lt;/h3>
&lt;blockquote>
&lt;ol>
&lt;li>单字符名称, 除了计数器和迭代器,作为 &lt;code>try/except&lt;/code> 中异常声明的 &lt;code>e&lt;/code>,作为 &lt;code>with&lt;/code> 语句中文件句柄的 &lt;code>f&lt;/code>.&lt;/li>
&lt;li>包/模块名中的连字符(-)&lt;/li>
&lt;li>双下划线开头并结尾的名称(Python保留, 例如__init__)&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="命名约定">命名约定&lt;/h3>
&lt;blockquote>
&lt;ol>
&lt;li>所谓&amp;quot;内部(Internal)&amp;ldquo;表示仅模块内可用, 或者, 在类内是保护或私有的.&lt;/li>
&lt;li>用单下划线(_)开头表示模块变量或函数是protected的(使用from module import *时不会包含).&lt;/li>
&lt;li>用双下划线(__)开头的实例变量或方法表示类内私有.&lt;/li>
&lt;li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.&lt;/li>
&lt;li>对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="文件名">文件名&lt;/h3>
&lt;blockquote>
&lt;p>所有python脚本文件都应该以 &lt;code>.py&lt;/code> 为后缀名且不包含 &lt;code>-&lt;/code>.若是需要一个无后缀名的可执行文件,可以使用软联接或者包含 &lt;code>exec &amp;quot;$0.py&amp;quot; &amp;quot;$@&amp;quot;&lt;/code> 的bash脚本.&lt;/p>
&lt;/blockquote>
&lt;h3 id="python之父guido推荐的规范">Python之父Guido推荐的规范&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Public&lt;/th>
&lt;th>Internal&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Modules&lt;/td>
&lt;td>lower_with_under&lt;/td>
&lt;td>_lower_with_under&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Packages&lt;/td>
&lt;td>lower_with_under&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Classes&lt;/td>
&lt;td>CapWords&lt;/td>
&lt;td>_CapWords&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Exceptions&lt;/td>
&lt;td>CapWords&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Functions&lt;/td>
&lt;td>lower_with_under()&lt;/td>
&lt;td>_lower_with_under()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Global/Class Constants&lt;/td>
&lt;td>CAPS_WITH_UNDER&lt;/td>
&lt;td>_CAPS_WITH_UNDER&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Global/Class Variables&lt;/td>
&lt;td>lower_with_under&lt;/td>
&lt;td>_lower_with_under&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Instance Variables&lt;/td>
&lt;td>lower_with_under&lt;/td>
&lt;td>_lower_with_under (protected) or __lower_with_under (private)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Method Names&lt;/td>
&lt;td>lower_with_under()&lt;/td>
&lt;td>_lower_with_under() (protected) or __lower_with_under() (private)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Function/Method Parameters&lt;/td>
&lt;td>lower_with_under&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Local Variables&lt;/td>
&lt;td>lower_with_under&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="main">Main&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.&lt;/p>
&lt;/blockquote>
&lt;p>在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查 &lt;code>if __name__ == '__main__'&lt;/code> , 这样当模块被导入时主程序就不会被执行.&lt;/p>
&lt;p>若使用 &lt;a href="https://github.com/abseil/abseil-py">absl&lt;/a>, 请使用 &lt;code>app.run&lt;/code> :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">absl&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">app&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">argv&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># process non-flag arguments&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">__name__&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">app&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">run&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>否则,使用:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">():&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">__name__&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.&lt;/p>
&lt;h2 id="函数长度">函数长度&lt;/h2>
&lt;blockquote>
&lt;p>Tip: 推荐函数功能尽量集中,简单,小巧&lt;/p>
&lt;/blockquote>
&lt;p>不对函数长度做硬性限制.但是若一个函数超过来40行,推荐考虑一下是否可以在不损害程序结构的情况下对其进行分解. 因为即使现在长函数运行良好,但几个月后可能会有人修改它并添加一些新的行为,这容易产生难以发现的bug.保持函数的简练,使其更加容易阅读和修改. 当遇到一些很长的函数时,若发现调试比较困难或是想在其他地方使用函数的一部分功能,不妨考虑将这个场函数进行拆分.&lt;/p>
&lt;h2 id="类型注释">类型注释&lt;/h2>
&lt;h3 id="通用规则">通用规则&lt;/h3>
&lt;blockquote>
&lt;ol>
&lt;li>
&lt;p>请先熟悉下 &amp;lsquo;PEP-484 &lt;a href="https://www.python.org/dev/peps/pep-0484/">https://www.python.org/dev/peps/pep-0484/&lt;/a>'_&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于方法，仅在必要时才对 &lt;code>self&lt;/code> 或 &lt;code>cls&lt;/code> 注释&lt;/p>
&lt;/li>
&lt;li>
&lt;p>若对类型没有任何显示，请使用 &lt;code>Any&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;ul>
&lt;li>
&lt;p>无需注释模块中的所有函数&lt;/p>
&lt;p>公共的API需要注释在代码的安全性，清晰性和灵活性上进行权衡是否注释对于容易出现类型相关的错误的代码进行注释难以理解的代码请进行注释若代码中的类型已经稳定，可以进行注释. 对于一份成熟的代码，多数情况下，即使注释了所有的函数，也不会丧失太多的灵活性.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="换行">换行&lt;/h2>
&lt;blockquote>
&lt;p>尽量遵守既定的缩进规则.注释后，很多函数签名将会变成每行一个参数.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">my_method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">first_var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">second_var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Foo&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">third_var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Optional&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Bar&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>尽量在变量之间换行而不是在变量和类型注释之间.当然,若所有东西都在一行上,也可以接受.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">my_method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">first_var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>若是函数名,末位形参和返回值的类型注释太长,也可以进行换行,并在新行进行4格缩进.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">my_method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">first_var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Tuple&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">MyLongType1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">MyLongType1&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>若是末位形参和返回值类型注释不适合在同一行上,可以换行,缩进为4空格,并保持闭合的括号 &lt;code>)&lt;/code> 和 &lt;code>def&lt;/code> 对齐&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">my_method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">other_arg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Optional&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">MyLongType&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Dict&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">OtherLongType&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">MyLongType&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pylint&lt;/code> 允许闭合括号 &lt;code>)&lt;/code> 换至新行并与 开启括号 &lt;code>(&lt;/code> 对齐,但这样的可读性不好.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">my_method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">other_arg&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Optional&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">MyLongType&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Dict&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">OtherLongType&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">MyLongType&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如上所示,尽量不要在一个类型注释中进行换行.但是有时类型注释过长需要换行时,请尽量保持子类型中不被换行.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">my_method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">first_var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Tuple&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">MyLongType1&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>
&lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">MyLongType2&lt;/span>&lt;span style="color:#000;font-weight:bold">]],&lt;/span>
&lt;span style="color:#000">second_var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Dict&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;span style="color:#000">MyLongType3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">MyLongType4&lt;/span>&lt;span style="color:#000;font-weight:bold">]])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>若一个类型注释确实太长,则应优先考虑对过长的类型使用别名 &lt;a href="https://google.github.io/styleguide/pyguide.html#typing-aliases">alias&lt;/a>. 其次是考虑在冒号后 &lt;a href="https://github.com/zh-google-styleguide/zh-google-styleguide/blob/master/google-python-styleguide/python_style_rules.rst#id30">&lt;code>](https://github.com/zh-google-styleguide/zh-google-styleguide/blob/master/google-python-styleguide/python_style_rules.rst#id28):[&lt;/code>&lt;/a>进行换行并添加4格空格缩进.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">my_function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">long_variable_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#000">long_module_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LongTypeName&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">my_function&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">long_variable_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">long_module_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>
&lt;span style="color:#000">LongTypeName&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="预先声明">预先声明&lt;/h3>
&lt;blockquote>
&lt;p>若需要使用一个当前模块尚未定义的类名,比如想在类声明中使用类名,请使用类名的字符串&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">MyClass&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">__init__&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">stack&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;MyClass&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="参数默认值">参数默认值&lt;/h3>
&lt;blockquote>
&lt;p>依据 &lt;a href="https://www.python.org/dev/peps/pep-0008/#other-recommendations">PEP-008&lt;/a> ,仅对同时具有类型注释和默认值的参数的 &lt;code>=&lt;/code> 周围加空格.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">int&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="nonetype">NoneType&lt;/h3>
&lt;blockquote>
&lt;p>在python的类型系统中, &lt;code>NoneType&lt;/code> 是 &amp;ldquo;一等对象&amp;rdquo;,为了输入方便, &lt;code>None&lt;/code> 是 &lt;code>NoneType&lt;/code> 的别名.一个变量若是 &lt;code>None&lt;/code>,则该变量必须被声明.我们可以使用 &lt;code>Union&lt;/code>, 但若类型仅仅只是对应另一个其他类型,建议使用 &lt;code>Optional&lt;/code>. 尽量显式而非隐式的使用 &lt;code>Optional&lt;/code>.在PEP-484的早期版本中允许使用 &lt;code>a: Text = None&lt;/code> 来替代 &lt;code>a: Optional[Text] = None&lt;/code>,当然,现在不推荐这么做了.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># Yes:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Optional&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Optional&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">multiple_nullable_union&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Union&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Text&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">nullable_union&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Union&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">implicit_optional&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Text&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="类型别名">类型别名&lt;/h3>
&lt;blockquote>
&lt;p>复杂类型应使用别名,别名的命名可参照帕斯卡命名.若别名仅在当前模块使用,应在名称前加&lt;code>_&lt;/code>变为私有的. 如下例子中,模块名和类型名连一起过长:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">_ShortName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">module_with_long_name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TypeWithLongName&lt;/span>
&lt;span style="color:#000">ComplexMap&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Mapping&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Tuple&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">]]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="忽略类型注释">忽略类型注释&lt;/h3>
&lt;blockquote>
&lt;p>可以使用特殊的行尾注释 &lt;code># type: ignore&lt;/code> 来禁用该行的类型检查. &lt;code>pytype&lt;/code> 针对特定错误有一个禁用选项(类似lint):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># pytype: disable=attribute-error&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="变量类型注解">变量类型注解&lt;/h3>
&lt;blockquote>
&lt;p>当一个内部变量难以推断其类型时,可以有以下方法来指示其类型:&lt;/p>
&lt;p>**类型注释&lt;/p>
&lt;p>使用行尾注释 &lt;code># type:&lt;/code>:&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">SomeUndecoratedFunction&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># type: Foo&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;strong>带类型注解的复制&lt;/strong> 如函数形参一样,在变量名和等号间加入冒号和类型:&lt;/p>
&lt;blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Foo&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">SomeUndecoratedFunction&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;/blockquote>
&lt;h3 id="tuples-vs-lists">Tuples vs Lists&lt;/h3>
&lt;blockquote>
&lt;p>类型化的Lists只能包含单一类型的元素.但类型化的Tuples可以包含单一类型的元素或者若干个不同类型的元素,通常被用来注解返回值的类型. (译者注: 注意这里是指的类型注解中的写法,实际python中,list和tuple都是可以在一个序列中包含不同类型元素的,当然,本质其实list和tuple中放的是元素的引用)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># type: List[int]&lt;/span>
&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># type: Tuple[int, ...]&lt;/span>
&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3.5&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># type: Tuple[int, Text, float]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="typevars">TypeVars&lt;/h3>
&lt;blockquote>
&lt;p>python的类型系统是支持泛型的.一种常见的方式就是使用工厂函数 &lt;code>TypeVars&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">typing&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">TypeVar&lt;/span>
&lt;span style="color:#000">T&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">TypeVar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;T&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">l&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">l&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pop&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>TypeVar也可以被限定成若干种类型&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">AddableType&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">TypeVar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;AddableType&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">float&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">add&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">AddableType&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">AddableType&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">AddableType&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">b&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>typing&lt;/code> 模块中一个常见的预定义类型变量是 &lt;code>AnyStr&lt;/code>.它可以用来注解类似 &lt;code>bytes&lt;/code>, &lt;code>unicode&lt;/code> 以及一些相似类型.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">typing&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">AnyStr&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">check_length&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">AnyStr&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">AnyStr&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">len&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">x&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">raise&lt;/span> &lt;span style="color:#c00;font-weight:bold">ValueError&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="字符串类型">字符串类型&lt;/h3>
&lt;blockquote>
&lt;p>如何正确的注释字符串的相关类型和要使用的python版本有关. 对于仅在 python3 下运行的代码,首选使用 &lt;code>str&lt;/code>. 使用 &lt;code>Text&lt;/code> 也可以.但是两个不要混用,保持风格一致. 对于需要兼容 python2 的代码,使用 &lt;code>Text&lt;/code>.在少数情况下,使用 &lt;code>str&lt;/code> 也许更加清晰.不要使用 &lt;code>unicode&lt;/code>,因为 python3 里没有这个类型. 造成这种差异的原因是因为,在不同的python版本中,&lt;code>str&lt;/code> 意义不同.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#8f5902;font-style:italic"># No:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">py2_code&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">unicode&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于需要处理二进制数据的代码,使用 &lt;code>bytes&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">deals_with_binary_data&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>python2 中的文本类数据类型包括&lt;code>str&lt;/code>和&lt;code>unicode&lt;/code>,而python3 中仅有 &lt;code>str&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">typing&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Text&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">py2_compatible&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">py3_only&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>若类型既可以是二进制也可以是文本,那么就使用 &lt;code>Union&lt;/code> 进行注解,并按照之前规则使用合适的文本类型注释.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">typing&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Union&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">py2_compatible&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Union&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Union&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">py3_only&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">Union&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Union&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">bytes&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">str&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>若一个函数中的字符串类型始终相同,比如上述函数中返回值类型和形参类型都一样,使用 &lt;a href="https://google.github.io/styleguide/pyguide.html#typing-type-var">AnyStr&lt;/a>. 这样写可以方便将代码移植到 python3&lt;/p>
&lt;/blockquote>
&lt;h3 id="类型的导入">类型的导入&lt;/h3>
&lt;blockquote>
&lt;p>对于 &lt;code>typing&lt;/code> 模块中类的导入,请直接导入类本身.你可以显式的在一行中从 &lt;code>typing&lt;/code> 模块导入多个特定的类,例如:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">typing&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Any&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Dict&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Optional&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以此方式导入的类将被加入到本地的命名空间,因此所有 &lt;code>typing&lt;/code> 模块中的类都应被视为关键字,不要在代码中定义并覆盖它们.若这些类和现行代码中的变量或者方法发生命名冲突,可以考虑使用 [&lt;code>](https://github.com/zh-google-styleguide/zh-google-styleguide/blob/master/google-python-styleguide/python_style_rules.rst#id32)import x as y&lt;/code>的导入形式:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">typing&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Any&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">AnyType&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="条件导入">条件导入&lt;/h3>
&lt;blockquote>
&lt;p>在一些特殊情况下,比如当在运行时需要避免类型检查所需的一些导入时,可能会用到条件导入.但这类方法并不推荐,首选方法应是重构代码使类型检查所需的模块可以在顶层导入. 仅用于类型注解的导入可以放在 &lt;code>if TYPE_CHECKING:&lt;/code> 语句块内.&lt;/p>
&lt;ol>
&lt;li>通过条件导入引入的类的注解须是字符串string,这样才能和python3.6之前的代码兼容.因为python3.6之前,类型注解是会进行求值的.&lt;/li>
&lt;li>条件导入引入的包应仅仅用于类型注解,别名也是如此.否则,将引起运行错误,条件导入的包在运行时是不会被实际导入的.&lt;/li>
&lt;li>条件导入的语句块应放在所有常规导入的语句块之后.&lt;/li>
&lt;li>在条件导入的语句块的导入语句之间不应有空行.&lt;/li>
&lt;li>和常规导入一样,请对该导入语句进行排序.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">typing&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">typing&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TYPE_CHECKING&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">sketch&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">f&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;sketch.Sketch&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="循环依赖">循环依赖&lt;/h3>
&lt;blockquote>
&lt;p>由类型注释引起的循环依赖可能会导致代码异味,应对其进行重构.虽然从技术上我们可以兼容循环依赖,但是 &lt;a href="https://google.github.io/styleguide/pyguide.html#typing-build-deps">构建系统&lt;/a> 是不会容忍这样做的,因为每个模块都需要依赖一个其他模块. 将引起循环依赖的导入模块使用 &lt;code>Any&lt;/code> 导入.使用 &lt;code>alias&lt;/code> 来起一个有意义的别名,推荐使用真正模块的类型名的字符串作为别名(Any的任何属性依然是Any,使用字符串只是帮助我们理解代码).别名的定义应该和最后的导入语句之间空一行.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">typing&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">Any&lt;/span>
&lt;span style="color:#000">some_mod&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Any&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># some_mod.py imports this module.&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">my_method&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">var&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;some_mod.SomeType&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">None&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;h3 id="泛型">泛型&lt;/h3>
&lt;blockquote>
&lt;p>在注释时,尽量将泛型类型注释为类型参数.否则, &lt;a href="https://www.python.org/dev/peps/pep-0484/#the-any-type">泛型参数将被视为是 Any&lt;/a> .&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">get_names&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">employee_ids&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Dict&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">int&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Any&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># These are both interpreted as get_names(employee_ids: List[Any]) -&amp;gt; Dict[Any, Any]&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">get_names&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">employee_ids&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#204a87">list&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Dict&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">get_names&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">employee_ids&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Dict&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>若实在要用 Any 作为泛型类型,请显式的使用它.但在多数情况下, &lt;code>TypeVar&lt;/code> 通常可能是更好的选择.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">get_names&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">employee_ids&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Any&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Dict&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">Any&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Returns a mapping from employee ID to employee name for given IDs.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#000">T&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">TypeVar&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;T&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">get_names&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">employee_ids&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">List&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#000">Dict&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">T&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">Text&lt;/span>&lt;span style="color:#000;font-weight:bold">]:&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&amp;#34;Returns a mapping from employee ID to employee name for given IDs.&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote></description></item><item><title>Docs: WebAPI参考文档</title><link>/docs/documentationstyleguide/codecomment/grpcapireference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/codecomment/grpcapireference/</guid><description/></item><item><title>Docs: WebAPI参考文档</title><link>/docs/documentationstyleguide/codecomment/webapireference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/codecomment/webapireference/</guid><description/></item><item><title>Docs: 使用 GitHub 参与社区活动</title><link>/docs/about/contributing/github/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/about/contributing/github/</guid><description>
&lt;p>devSpec 文档协作遵循标准的 &lt;a href="https://guides.github.com/introduction/flow/">GitHub 协作流&lt;/a>。这种成熟的协作模式有助于开源项目管理以下类型的贡献：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/zh/about/contribute/addContent">添加&lt;/a>新文件到存储库。&lt;/li>
&lt;li>&lt;a href="#quick-edit">编辑&lt;/a>现有文件。&lt;/li>
&lt;li>&lt;a href="/zh/about/contribute/review">审阅&lt;/a>添加或修改的文件。&lt;/li>
&lt;li>管理多个发布或开发&lt;a href="#branching-strategy">分支&lt;/a>。&lt;/li>
&lt;/ul>
&lt;p>该贡献指南假定您可以完成以下任务：&lt;/p>
&lt;ul>
&lt;li>Fork &lt;a href="https://github.com/istio/istio.io">Istio 文档存储库&lt;/a>。&lt;/li>
&lt;li>为您的更改创建分支。&lt;/li>
&lt;li>向该分支添加提交。&lt;/li>
&lt;li>打开一个 PR 分享您的贡献。&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-contribute">开始之前&lt;/h2>
&lt;p>要为 devSpec 贡献文档，您需要：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建 &lt;a href="https://github.com">GitHub 帐户&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装 &lt;a href="https://www.docker.com/get-started">Docker&lt;/a>，以预览和测试您的文档更改。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>文档是根据 &lt;a href="https://github.com/TaibiaoGuo/devSpec/blob/master/LICENSE">MIT&lt;/a> 协议许可发布的。&lt;/p>
&lt;h2 id="quick-edit">快速编辑&lt;/h2>
&lt;p>任何GitHub 帐户，都可以对 devSpec 网站上的任何页面进行修改并提交贡献。这个过程非常简单：&lt;/p>
&lt;ol>
&lt;li>访问您要编辑的页面。&lt;/li>
&lt;li>单击 &lt;code>编辑此页&lt;/code> 或 &lt;code>添加子页面&lt;/code> 按钮。&lt;/li>
&lt;li>在 GitHub UI 上进行编辑。&lt;/li>
&lt;li>创建 Pull Request 提交您的修改。&lt;/li>
&lt;/ol>
&lt;p>请参阅我们在&lt;a href="/zh/about/contribute/addContent">贡献新内容&lt;/a>或&lt;a href="/zh/about/contribute/review">内容审查&lt;/a>中的指南，
以了解有关提交更多实质性更改的详细信息。&lt;/p>
&lt;h2 id="branching-strategy">分支策略&lt;/h2>
&lt;p>文档内容的维护在 &lt;code>TaibiaoGuo/devSpec&lt;/code> 仓库 Master 分支进行，Istio 发布当天，我们基于 Master 创建发布分支。以下链接指向我们在 GitHub 上的存储库：&lt;/p>
&lt;p>&lt;a class="btn" href="https://github.com/TaibiaoGuo/devSpec/">查看站点源码&lt;/a>&lt;/p>
&lt;p>devSpec 文档存储库使用多个分支发布所有 devSpec 版本的文档。每个 devSpec 发布都有相应的文档分支。例如，类似 &lt;code>release-1.0&lt;/code>、&lt;code>release-1.1&lt;/code>、&lt;code>release-1.2&lt;/code> 等分支，都是在相应的发布日创建的。&lt;/p>
&lt;p>这种分支策略允许我们提供以下 Istio 在线资源：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>发布站点提供当前最新发布分支的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>存档站点提供所有已发布分支的内容。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>考虑到分支的工作原理，如果您提交修改到 master 分支，在 Istio 的下一个 major 版本发布前，这些更改都不会被应用到文档网站。
如果您的文档更改和当前 Istio 版本密切相关，也可以将更改应用到当前版本的 Release 分支。您可以通过在文档的 PR 上使用 cherry-pick 标签，自动地执行此操作。
例如，如果您在 PR 中向 master 分支引入了更正，则可以通过 &lt;code>cherrypick/release-1.4&lt;/code> 标签以将此更改合并到 &lt;code>release-1.4&lt;/code> 分支。
请注意，我们只会在当前版本的 Release 分支中应用更改，而不会在旧版本中进行。较旧的分支被视为已归档，并且通常不再接收任何更改。&lt;/p></description></item><item><title>Docs: 团队架构</title><link>/docs/projectmanagementstandards/teamarchitecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/projectmanagementstandards/teamarchitecture/</guid><description>
&lt;p>在明确团队文化后，下一步就是明确团队架构。团队中所有 DevOps、敏捷的主要目标都是改进客户和业务的价值交付，而不是降低成本、
提升自动化或者配置管理驱动一切。 这意味着，为了实现有效的 Dev 和 Ops 协同，不同的组织可能需要不同的团队结构。
&lt;a href="https://web.devopstopologies.com/index.html">DevOpsTopologies&lt;/a> 给出了大量的团队架构范式，
但对于 devSpec 的读者（初创小型团队、分布式团队）来说，我们需要考虑的点则少得多：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>团队是否自建基础设施服务？&lt;/strong>&lt;/p>
&lt;p>大型团队往往需要保证服务的高可用和高并发，服务器、代码管理平台、消息队列、数据库、缓存等基础设施服务往往有专人进行维护。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队成员是否时间一致？&lt;/strong>&lt;/p>
&lt;p>团队成员时间不一致会给开发和沟通带来挑战，分布式团队对组织的流程和成员素质提出了更高的要求。对于一些问题，团队
成员可能会倾向于独立解决，因为沟通的成本相对来说会变得更高；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队是否是分布式团队？&lt;/strong>&lt;/p>
&lt;p>很高兴的，随着居家办公和分布式办公的流行，阻碍团队成为分布式的约束正变得越来越弱。
但一般情况下，集中办公的效率总是高于分布式办公的，但对于初创团队而言，可能需要付出更多的团队运营成本。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="现状">现状&lt;/h2>
&lt;p>很多组织将开发和系统管理划分成不同的部门。开发部门的驱动力通常是“频繁交付新特性”，而运维部门则更关注IT服务的可靠性和IT成本投入的效率。两者目标的不匹配，就在开发与运维部门之间造成了鸿沟，从而减慢了IT交付业务价值的速度。&lt;/p>
&lt;ul>
&lt;li>开发人员经常不考虑自己写的代码会对运维造成什么影响。他们在交付代码之前，并不邀请运维人员参与架构决策或代码评审。&lt;/li>
&lt;li>开发人员对配置或环境进行修改之后，经常没有及时与运维人员沟通，导致新的代码不能运行。&lt;/li>
&lt;li>开发人员在自己的机器上手工修改配置，而没有记录所有需要的步骤。想找到必要的配置参数，通常需要尝试很多不同的参数；在得到一个可工作的状态后，往往很难识别出通过哪些最小步骤就能到达该状态。&lt;/li>
&lt;li>开发人员倾向于使用有利于快速开发的工具：对代码修改更快的反馈，更低的内存消耗，等等。这样的工具集与运维人员面对的目标运行时环境非常不同：后者对稳定性和性能的要求远胜于灵活性。&lt;/li>
&lt;li>由于开发人员平时使用桌面电脑，他们倾向于使用为桌面用户优化的操作系统。生产环境的运行时系统通常都运行服务器操作系统上。&lt;/li>
&lt;li>在开发过程中，系统在开发者的本地机器上运行。在运维过程中，系统经常分布在多台服务器上，例如web服务器、应用服务器、数据库服务器等等。&lt;/li>
&lt;li>开发是由功能性需求（通常与业务需求直接相关）驱动的。&lt;/li>
&lt;li>运维是由非功能性需求（例如可获得性、可靠性、性能等）驱动的。&lt;/li>
&lt;li>运维人员希望尽量避免修改功能，从而降低满足非功能性需求的风险&lt;/li>
&lt;li>如果拒绝了小的修改，但给定时间段内需要修改的总量不变，那么每次变更的规模就会变大&lt;/li>
&lt;li>变更规模越大，风险也越大，因为其中涉及的区域越多&lt;/li>
&lt;li>由于运维人员尝试避免变更，新功能流入生产环境的速度因此被延缓，从而延缓了开发人员将特性交付给用户使用的速度。&lt;/li>
&lt;li>运维人员可能对应用程序内部缺乏了解，从而难以正确地选择运行时环境和发布流程。&lt;/li>
&lt;li>开发人员可能对运行时环境缺乏了解，从而难以正确地对代码进行调整。&lt;/li>
&lt;/ul>
&lt;h2 id="角色定义">角色定义&lt;/h2>
&lt;h3 id="开发类">开发类&lt;/h3>
&lt;h3 id="产品类">产品类&lt;/h3>
&lt;h3 id="质量管理类">质量管理类&lt;/h3>
&lt;h3 id="项目管理类">项目管理类&lt;/h3>
&lt;h2 id="devspec-推荐的组织架构模板">devSpec 推荐的组织架构模板&lt;/h2>
&lt;h3 id="容器驱动协作架构">容器驱动协作架构&lt;/h3>
&lt;p>容器技术在开发中的广泛应用催生出了容器驱动协作架构，容器驱动写作架构是 devSpec 最为推崇的初创团队协作架构模式。在容器驱动协作架构中，
软件的部署和运行要求被封装到了容器中，可以避免 Dev 和 Ops 的很多多余的协作需求，容器充当了Dev 和 Ops 的责任边界。
容器驱动协作架构使得软件的迁徙变得非常容器，同时可以借助自动化工具来进一步加速软件的交付速度。 在良好的工程文化中，
容器驱动协作架构将会运转得很好。但是，一旦 Dev 开始忽略运维给出的注意事项清单，那么容器驱动协作架构下Dev 和 Ops 的多余的协作需求又将卷土重来。&lt;/p>
&lt;h3 id="devops-作为外部服务架构">DevOps 作为外部服务架构&lt;/h3>
&lt;p>初创组织的财力、经验或人力往往不足以支撑其运维其开发的软件。有一些服务提供者如 华为云 可能提供相关的服务帮助他们构建测试环境及自动化基础设施和监控，
并就他们在软件开发周期中实现何种运维特性提供建议。众多平台提供了工具来实施 DevOps 作为外部服务架构。&lt;/p>
&lt;p>随着初创组织的发展，可能会有更多的人专注于运维工作，他们可能会将 Ops 工作放入基础设施中，甚至独立出专门的Ops 团队来负责运维工作。这时，
使用 DevOps 即服务可能是一种有效且务实的组织架构方式。&lt;/p>
&lt;h3 id="完全共担-ops-职责架构">完全共担 Ops 职责架构&lt;/h3>
&lt;p>如果你的初创团队是一个精英团队或产品形态比较单一，例如Web服务，那么完全共担 Ops 职责架构可能会适合你。在这种组织架构中，
团队 Dev 和 Ops 成员必须只有一个目标，运维人员将被整合到产品开发团队。&lt;/p>
&lt;p>Netflix 和 Facebook 这种产品形态较为单一的组织已经实现了完全共担 Ops 职责架构。但如果你的团队包含多个产品流的研发任务，
例如初创团队同时进行多个最小可行产品的论证工作，那么完全共担 Ops 职责架构最终将导致成员目标的分散，
最终导致完全共担 Ops 职责架构的实施变形或失败。&lt;/p>
&lt;h2 id="devspec-强烈反对的组织架构模板">devSpec 强烈反对的组织架构模板&lt;/h2></description></item><item><title>Docs: 软件需求说明书</title><link>/docs/documentationstyleguide/gb856t88/softwarerequirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/softwarerequirements/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>说明编写这份软件需求说明书的目的，指出预期的读者。&lt;/p>
&lt;h3 id="12背景">1.2背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>待开发的软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本项目的任务提出者、开发者、用户及实现该软件的计算中心或计算机网络；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该软件系统同其他系统或其他机构的基本的相互来往关系。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到的专门术语的定义和外文首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出用得着的参考资料，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的经核准的计划任务书或合同、上级机关的批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表的文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处引用的文件、资料、包括所要用到的软件开发标准。
列出这些文件资料的标题、文件编号、发表日期和出版单位，说明能够得到这些文件资料的来源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2任务概述">2任务概述&lt;/h2>
&lt;h3 id="21目标">2.1目标&lt;/h3>
&lt;p>叙述该项软件开发的意图、应用目标、作用范围以及其他应向读者说明的有关该软件开发的背景材料。解释被开发软件与其他有关软件之间的关系。如果本软件产品是一项独立的软件，而且全部内容自含，则说明这一点。如果所定义的产品是一个更大的系统的一个组成部分，则应说明本产品与该系统中其他各组成部分之间的关系，为此可使用一张方框图来说明该系统的组成和本产品同其他各部分的联系和接口。|&lt;/p>
&lt;h3 id="22用户的特点">2.2用户的特点&lt;/h3>
&lt;p>列出本软件的最终用户的特点，充分说明操作人员、维护人员的教育水平和技术专长，以及本软件的预期使甩频度。这些是软件设计工作的重要约束&lt;/p>
&lt;h3 id="23假定和约束">2.3假定和约束&lt;/h3>
&lt;p>列出进行本软件开发工作的假定和约束，例如经费限制、开发期限等。&lt;/p>
&lt;h2 id="3需求规定">3需求规定&lt;/h2>
&lt;h3 id="31对功能的规定">3.1对功能的规定&lt;/h3>
&lt;p>用列表的方式（例如IPO表即输入、处理、输出表的形式），逐项定量和定性地叙述对软件所提出的功能要求，说明输入什么量、经怎样的处理、得到什么输出，说明软件应支持的终端数和应支持的并行操作的用户数。&lt;/p>
&lt;h3 id="32对性能的规定">3.2对性能的规定&lt;/h3>
&lt;h4 id="321精度">3.2.1精度&lt;/h4>
&lt;p>说明对该软件的输入、输出数据精度的要求，可能包括传输过程中的精度。&lt;/p>
&lt;h4 id="322时间特性要求">3.2.2时间特性要求&lt;/h4>
&lt;p>说明对于该软件的时间特性要求，如对：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>响应时间；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>更新处理时间；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据的转换和传送时间；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解题时间；等的要求。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="323灵活性">3.2.3灵活性&lt;/h4>
&lt;p>说明对该软件的灵活性的要求，即当需求发生某些变化时，该软件对这些变化的适应能力，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>操作方式上的变化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>运行环境的变化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>同其他软件的接口的变化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>精度和有效时限的变化；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计划的变化或改进。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>对于为了提供这些灵活性而进行的专门设计的部分应该加以标明。&lt;/p>
&lt;h3 id="33输人输出要求">3.3输人输出要求&lt;/h3>
&lt;p>解释各输入输出数据类型，并逐项说明其媒体、格式、数值范围、精度等。对软件的数据输出及必须标明的控制输出量进行解释并举例，包括对硬拷贝报告（正常结果输出、状态输出及异常输出）以及图形或显示报告的描述。&lt;/p>
&lt;h3 id="34数据管理能力要求">3.4数据管理能力要求&lt;/h3>
&lt;p>说明需要管理的文卷和记录的个数、表和文卷的大小规模，要按可预见的增长对数据及其分量的存储要求作出估算。&lt;/p>
&lt;h3 id="35故障处理要求">3.5故障处理要求&lt;/h3>
&lt;p>列出可能的软件、硬件故障以及对各项性能而言所产生的后果和对故障处理的要求。&lt;/p>
&lt;h3 id="36其他专门要求">3.6其他专门要求&lt;/h3>
&lt;p>如用户单位对安全保密的要求，对使用方便的要求，对可维护性、可补充性、易读性、可靠性、运行环境可转换性的特殊要求等。&lt;/p>
&lt;h2 id="4运行环境规定">4运行环境规定&lt;/h2>
&lt;h3 id="41设备">4.1设备&lt;/h3>
&lt;p>列出运行该软件所需要的硬设备。说明其中的新型设备及其专门功能，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>处理器型号及内存容量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>外存容量、联机或脱机、媒体及其存储格式，设备的型号及数量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输入及输出设备的型号和数量，联机或脱机；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据通信设备的型号和数量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>功能键及其他专用硬件&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="42支持软件">4.2支持软件&lt;/h3>
&lt;p>列出支持软件,包括要用到的操作系统、编译（或汇编）程序、测试支持软件等。&lt;/p>
&lt;h3 id="43接口">4.3接口&lt;/h3>
&lt;p>说明该软件同其他软件之间的接口、数据通信协议等。&lt;/p>
&lt;h3 id="44控制">4.4控制&lt;/h3>
&lt;p>说明控制该软件的运行的方法和控制信号，并说明这些控制信号的来源。&lt;/p></description></item><item><title>Docs: Git工作流</title><link>/docs/codestandards/gitflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/codestandards/gitflow/</guid><description>
&lt;p>目前基于 &lt;code>git&lt;/code> 协作工作流的模式非常多，对于初创团队可以借鉴 &lt;code>gitflow&lt;/code> 构建协作方式。此外，通过统一的协作工作流程和开发工作流，
保证团队高效地协作开发，保持项目开发迭代周期井井有序。&lt;/p>
&lt;p>团队开发与维护主要是针对项目去开发、迭代甚至是维护，使用分支能够有效地避免不同开发工作之间的相关干扰。&lt;/p>
&lt;p>&lt;img src="/images/gitflow.png" alt="gitflow">&lt;/p>
&lt;h2 id="git提交规范">Git提交规范&lt;/h2>
&lt;p>当一个团队在协作开发时，针对 &lt;strong>git commit&lt;/strong> 规范是十分必须的，每一次提交都务必带上说明信息，同时说明信息亦要有格式规范，
即团队要有良好的约定。目的是制定统一的标准，使得提交历史信息条理清晰，更是为了项目有条不絮地迭代以及提高开发者的效率。&lt;/p>
&lt;blockquote>
&lt;p>统一团队 git commit 日志标准，便于后续代码 review ，版本发布以及日志自动化生成等等。&lt;/p>
&lt;/blockquote>
&lt;p>提交格式包含提交类别、范围模块、描述说明三部分：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git commit -m &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>type&lt;span style="color:#ce5c00;font-weight:bold">](&lt;/span>:scope&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>subject&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>例子&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git commit -m &lt;span style="color:#4e9a06">&amp;#34;feature:log:algo log by using websocket&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>&lt;strong>提交类别&lt;/strong>包括：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>feature&lt;/code>: 新功能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>fixed&lt;/code> : 修复bug&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>update&lt;/code> : 更新&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>docs&lt;/code> : 文档改变&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>style&lt;/code> : 代码格式改变&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>refactor&lt;/code> : 某个已有功能重构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>perf&lt;/code> : 性能优化&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>test&lt;/code> : 增加测试&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>build&lt;/code> : 改变了build工具 如 grunt换成了 npm&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>revert&lt;/code> : 撤销上一次的 commit&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>chore&lt;/code> : 构建过程或辅助工具的变动&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>范围模块&lt;/strong>，应该使用一个词语涵盖此次提交的改动。&lt;/p>
&lt;p>&lt;strong>描述说明&lt;/strong>，应该简洁明了，同时更加能突出此次改动的内容即可。&lt;/p>
&lt;h2 id="git分支规范">Git分支规范&lt;/h2>
&lt;ul>
&lt;li>长期存在分支或标签&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>&lt;code>master&lt;/code> | 主分支&lt;/p>
&lt;p>主分支属于线上部署的分支，是项目生产稳定运行的项目分支，该分支自能合并开发分支或热修复分支。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>develop&lt;/code> | 开发分支&lt;/p>
&lt;p>开发分支与主分支必须是并行的，此分支基于运行于开发环境与测试环境。同时，从规范上面来说，尽量不要在开发分支上直接做开发，
开发分支是由功能分支或修复分支合并叠成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>release&lt;/code>| 发行标签&lt;/p>
&lt;p>发行分支即是项目版本可以稳定发行的版本，可看作为一个版本迭代的分水岭，譬如&lt;code>1.0.0&lt;/code>、&lt;code>2.0.0&lt;/code>等。注意、此发行分支是基于主分支构建而来，
主要用于记录版本的节点，必须基于 &lt;code>master&lt;/code> 分支构建。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>短期存在分支&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>&lt;code>feature&lt;/code> | 功能分支&lt;/p>
&lt;p>功能分支由需求确立而成，每新增一个需求或功能就必须建立一个功能分支，好处是各个功能独立开发不受影响，同时团队成员之间的实现协作隔离不容易产生冲突。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>hotfix&lt;/code> | 热修复分支&lt;/p>
&lt;p>热修复分支（补丁分支）假设生产分支出现异常等 &lt;code>bug&lt;/code> 危急的情况，需要建议一个修复分支，使得主分支合并进而解决 &lt;code>bug&lt;/code>则需要创建热修复分支。&lt;/p>
&lt;blockquote>
&lt;p>注意:修复分支在主分支合并的同时必须同时与开发分支合并，发行版也要合并构建成小版本的发行版，测试通过后需要基于热修复分支打标签。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>分支名&lt;/th>
&lt;th>分支定位&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>权限控制&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>master&lt;/td>
&lt;td>发布分支&lt;/td>
&lt;td>master应处于随时可发布的状态，用于对外发布正式版本。ps: 应配置此分支触发CI/CD，部署至生产环境。&lt;/td>
&lt;td>Maintainer可发起merge request&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>develop&lt;/td>
&lt;td>开发分支&lt;/td>
&lt;td>不可以在develop分支push代码，应新建feature/xxx进行需求开发。迭代功能开发完成后的代码都会merge到develop分支。&lt;/td>
&lt;td>Develper不可直接push，可发起merge request&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>feature/xxx&lt;/td>
&lt;td>特性分支&lt;/td>
&lt;td>针对每一项需求，新建feature分支，如feature/user_login，用于开发用户登录功能。&lt;/td>
&lt;td>Develper可直接push&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>release&lt;/td>
&lt;td>提测分支&lt;/td>
&lt;td>由develop分支合入release分支。ps: 应配置此分支触发CI/CD，部署至测试环境。&lt;/td>
&lt;td>Maintainer可发起merge request&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bug/xxx&lt;/td>
&lt;td>缺陷分支&lt;/td>
&lt;td>提测后发现的bug，应基于develop分支创建bug/xxx分支修复缺陷，修改完毕后应合入develop分支等待回归测试。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hotfix/xxx&lt;/td>
&lt;td>热修复分支&lt;/td>
&lt;td>处理线上最新版本出现的bug&lt;/td>
&lt;td>Develper可直接push&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fix/xxx&lt;/td>
&lt;td>旧版本修复分支&lt;/td>
&lt;td>处理线上旧版本的bug&lt;/td>
&lt;td>Develper可直接push&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="提交习惯">提交习惯&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>高频率、细粒度地提交&lt;/strong>&lt;/p>
&lt;p>必须把大功能的实现尽可能分解成相对独立的小模块，每个小模块需要完成测试后提交到代码库，再开始下一个模块的开发。
这样做能保证每次提交的内容高度相关，方便定位错误、解决合并冲突。
相比之下，如果每次提交的东西很多、改动很大、时间间隔很长，那么在代码合并过程中产生的冲突就很难解决。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>约定: 如果代码有改动，一天至少提交一次。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>提交之前需进行自测与单元测试&lt;/strong>&lt;/p>
&lt;p>提交代码前需要针对改动的代码进行自测和单元测试，确保在测试环境能平稳正常运行，否则代码提交后将无法通过持续集成的测试。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>分支合并&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>主分支合并&lt;/strong>&lt;/p>
&lt;p>主分支合并必须经过测试组测试，验收通过后才能合并。一般而言、每次迭代上线前一起合并。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>开发分支合并&lt;/strong>&lt;/p>
&lt;p>开发分支合并功能分支，尽量做到 &lt;strong>频繁合并&lt;/strong>，也就是说尽量将功能需求分解成 &lt;code>N&lt;/code> 个功能模块，
每一个功能模块完成就提交代码合并到开发分支，这样可以减少分支合并而造成冲突。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="代码提交的实例">代码提交的实例&lt;/h2>
&lt;p>当前存在版本(tag) &lt;code>1.0.0&lt;/code>，并规划推出新版本 &lt;code>1.1.0&lt;/code>，那么应该基于 &lt;code>1.0.0&lt;/code> 新建版本开发分支：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git checkout -b 1.1.0_develop
&lt;/code>&lt;/pre>&lt;/div>&lt;p>该开发版本有很多功能并且有多人参与。研发 a 参与视频模块开发，需要从 &lt;code>1.1.0_develop&lt;/code> 创建一个功能分支，
参考的分支命名规范是 &lt;code>{version}_{function}__{author}_{datetime}&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git checkout -b 1.1.0_video_a_20200806
&lt;/code>&lt;/pre>&lt;/div>&lt;p>研发 b 参与朋友圈模块开发，需要从 &lt;code>1.1.0_develop&lt;/code> 创建一个功能分支：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git checkout -b 1.1.0_friends_group_b_20200805
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>切记千万不要在开发分支直接提交代码 开发分支是合并分支&lt;/p>
&lt;/blockquote>
&lt;p>开发完毕合并功能分支，处于不断合并的过程&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git merge 1.1.0_video_a_20200806
git merge 1.1.0_friends_group_b_20200805
&lt;/code>&lt;/pre>&lt;/div>&lt;p>自测完成后，没有问题那就将功能分支删除&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git branch -d 1.1.0_video_a_20200806
git branch -d 1.1.0_friends_group_b_20200805
&lt;/code>&lt;/pre>&lt;/div>&lt;p>提测发现有缺陷，需要基于版本迭代分支创建缺陷修复分支&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git checkout -b 1.1.0_fixed_video_upload_bug_alicfeng_20200808
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修复完成再合并到迭代分支&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git merge 1.1.0_fixed_video_upload_bug_alicfeng_20200808
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试通过后 通过约定的方式 &lt;code>tag&lt;/code> 即为发布版本 发布 &lt;code>1.1.0&lt;/code> 版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git tag -a 1.1.0 -m &lt;span style="color:#4e9a06">&amp;#34;release:version:1.1.0&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="线上发现缺陷后的仓库操作与协作约定">线上发现缺陷后的仓库操作与协作约定&lt;/h2>
&lt;ol>
&lt;li>基于版本标签新建热修复分支&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git checkout 1.1.0
git checkout -b hotfix_video_alicfeng_20200809
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>开发分支合并热修复分支&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git checkout develop
git merge hotfix_video_alicfeng_20200809
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>主分支合并开发分支&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git checkout master
git merge develop
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>基于主分支新建新的版本标签,务必在&lt;code>git&lt;/code>上编写更新内容&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git checkout hotfix_video_alicfeng_20200809
git tag -a 1.1.1 -m &lt;span style="color:#4e9a06">&amp;#34;fixed:video:upload&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>测试通过后推送到代码仓库&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 代码审阅</title><link>/docs/codestandards/codereview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/codestandards/codereview/</guid><description>
&lt;p>代码审阅（Code Review） 是项目中的必需项。代码审阅有助于提升代码的质量，尽早发现潜在的缺陷，降低修复的成本，
同时可以促进开发团队内部知识的共享，帮助开发者更好理解系统的业务与实现对于代码审阅的原则而言，
不定期地从小版本迭代(version) 或 新功能(feature)进行团队或者相关人员进行评审，评审的从架构、业务实现、技术等维度着手分析。&lt;/p>
&lt;h2 id="代码审阅流程">代码审阅流程&lt;/h2>
&lt;p>大致的审阅流程大致如下流程图所示，即&lt;/p>
&lt;ol>
&lt;li>
&lt;p>开发者完成开发后，将功能分支提交并提醒审阅者进行代码审阅；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>评审者审阅代码，假设没有存在问题则让开发者将功能分支合并至开发分支，否则组织评审会，指出相应的不合理之处并讨论出可行方案进行更改；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发者根据修改方案进行代码修复，完成后再次提交。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">graph TB
subgraph 团队协作仓库
wait[稳住稳住]--&amp;gt;merge_code[合并功能分支]
end
subgraph 审阅者
review_code[评审提交代码]
is_modify{看看是否要修改}
review_code--&amp;gt;is_modify
is_modify-- 否 --&amp;gt;merge_code
is_modify-- 是 --&amp;gt;modify_code
end
subgraph 开发者
push_code[提交分支代码]
modify_code[修改代码]
modify_code-- 重新提交 --&amp;gt;push_code
push_code--&amp;gt;review_code
end
&lt;/code>&lt;/pre>&lt;h2 id="代码审阅范围">代码审阅范围&lt;/h2>
&lt;p>代码审阅应确保业务定义的功能正常运行以及业务后续的可迭代性：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>业务处理&lt;/p>
&lt;p>即功能实现是否能正常运行、满足预期的效果，同时确保业务的合理性与可迭代性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>业务规范&lt;/p>
&lt;p>使用正确的姿势正确处理业务，尽量禁止特殊处理或者歧义方式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>规范习惯&lt;/p>
&lt;p>必须编写并更新项目文档、接口文档。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>代码审阅必须遵循项目规范，主要是从项目规范审阅，详细查看其它规范章节：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>命名规范&lt;/p>
&lt;/li>
&lt;li>
&lt;p>日志输出&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码注释&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码优化&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库规范&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务处理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码复用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>效率与性能 (稳定性、健壮性)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务处理&lt;/p>
&lt;/li>
&lt;li>
&lt;p>项目架构目录定义规范&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可读性、可维护性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码安全性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单元测试&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="代码评审会">代码评审会&lt;/h2>
&lt;p>代码评审会类似于技术分享会，从中我们可以获取高级的技术用法以提高自身代码要求。合理安排代码审阅时间，一般安排1~2个小时。
根据项目规范与产品规划&lt;strong>指出问题&lt;/strong>、&lt;strong>讨论问题&lt;/strong>、&lt;strong>解决问题&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>devSpec 已经给出了 Go的编码规范与指南，可以根据指南来指导代码评审会。&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: 发行和版本控制</title><link>/docs/codestandards/version/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/codestandards/version/</guid><description>
&lt;h2 id="版本控制">版本控制&lt;/h2>
&lt;h3 id="语义化版本控制规范">语义化版本控制规范&lt;/h3>
&lt;p>版本号格式为 x.y.z，其中 x 为大版本号，y 为小版本号，z 为补丁版本号。 版本号格式遵循 &lt;a href="https://semver.org/">Semantic Versioning&lt;/a>。&lt;/p>
&lt;p>以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用语义化版本控制的软件必须（MUST）定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标准的版本号必须（MUST）采用 X.Y.Z 的格式，其中 X、Y 和 Z 为非负的整数，且禁止（MUST NOT）在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素必须（MUST）以数值来递增。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>例如：1.9.1 -&amp;gt; 1.10.0 -&amp;gt; 1.11.0。&lt;/p>
&lt;/blockquote>
&lt;ol start="3">
&lt;li>
&lt;p>标记版本号的软件发行后，禁止（MUST NOT）改变该版本软件的内容。任何修改都必须（MUST）以新版本发行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修订号 Z（x.y.Z | x &amp;gt; 0）必须（MUST）在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>次版本号 Y（x.Y.z | x &amp;gt; 0）必须（MUST）在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也必须（MUST）递增。也可以（MAY）在内部程序有大量新功能或改进被加入时递增，其中可以（MAY）包括修订级别的改变。每当次版本号递增时，修订号必须（MUST）归零。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主版本号 X（X.y.z | X &amp;gt; 0）必须（MUST）在有任何不兼容的修改被加入公共 API 时递增。其中可以（MAY）包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号必须（MUST）归零。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先行版本号可以（MAY）被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符来修饰。标识符必须（MUST）由 ASCII 字母数字和连接号 [0-9A-Za-z-] 组成，且禁止（MUST NOT）留白。数字型的标识符禁止（MUST NOT）在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法满足预期的兼容性需求。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。&lt;/p>
&lt;/blockquote>
&lt;ol start="10">
&lt;li>版本编译元数据可以（MAY）被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符来修饰。标识符必须（MUST）由 ASCII 字母数字和连接号 [0-9A-Za-z-] 组成，且禁止（MUST NOT）留白。当判断版本的优先层级时，版本编译元数据可（SHOULD）被忽略。因此当两个版本只有在版本编译元数据有差别时，属于相同的优先层级。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。&lt;/p>
&lt;/blockquote>
&lt;ol start="11">
&lt;li>版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，必须（MUST）把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译元数据不在这份比较的列表中）。由左到右依序比较每个标识符，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &amp;lt; 2.0.0 &amp;lt; 2.1.0 &amp;lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &amp;lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级必须（MUST）透过由左到右的每个被句点分隔的标识符来比较，直到找到一个差异值后决定：只有数字的标识符以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符比非数字的标识符优先层级低。若开头的标识符都相同时，栏位比较多的先行版本号优先层级比较高。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>范例：1.0.0-alpha &amp;lt; 1.0.0-alpha.1 &amp;lt; 1.0.0-alpha.beta &amp;lt; 1.0.0-beta &amp;lt; 1.0.0-beta.2 &amp;lt; 1.0.0-beta.11 &amp;lt; 1.0.0-rc.1 &amp;lt; 1.0.0。&lt;/p>
&lt;/blockquote>
&lt;h3 id="版本控制常见问题回答">版本控制常见问题回答&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>在 0.y.z 初始开发阶段，我该如何进行版本控制？&lt;/strong>
最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>如何判断发布 1.0.0 版本的时机？&lt;/strong>
当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>这不会阻碍快速开发和迭代吗？&lt;/strong>
主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？&lt;/strong>
这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为整个公共 API 写文件太费事了！&lt;/strong>
为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？&lt;/strong>
一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>如果我更新了自己的依赖但没有改变公共 API 该怎么办？&lt;/strong>
由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的包有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）&lt;/strong>
自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>我该如何处理即将弃用的功能？&lt;/strong>
弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>语义化版本对于版本的字串长度是否有限制呢？&lt;/strong>
没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: 开发方法论与框架</title><link>/docs/projectmanagementstandards/devmethod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/projectmanagementstandards/devmethod/</guid><description/></item><item><title>Docs: 日志</title><link>/docs/codestandards/log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/codestandards/log/</guid><description/></item><item><title>Docs: 概要设计说明书</title><link>/docs/documentationstyleguide/gb856t88/outlinedesign/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/outlinedesign/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>说明编写这份概要设计说明书的目的，指出预期的读者。&lt;/p>
&lt;h3 id="12背景">1.2背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>待开发软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列出此项目的任务提出者、开发者、用户以及将运行该软件的计算站（中心）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到的专门术语的定义和外文首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出有关的参考文件，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的经核准的计划任务书或合同，上级机关的批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处引用的文件、资料，包括所要用到的软件开发标准。列出这些文件的标题、文件编号、发表日期和出版单位，说明能够得到这些文件资料的来源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2总体设计">2总体设计&lt;/h2>
&lt;h3 id="21需求规定">2.1需求规定&lt;/h3>
&lt;p>说明对本系统的主要的输入输出项目、处理的功能性能要求，详细的说明可参见附录C。&lt;/p>
&lt;h3 id="22运行环境">2.2运行环境&lt;/h3>
&lt;p>简要地说明对本系统的运行环境（包括硬件环境和支持环境）的规定，详细说明参见附录C。&lt;/p>
&lt;h3 id="23基本设计概念和处理流程">2.3基本设计概念和处理流程&lt;/h3>
&lt;p>说明本系统的基本设计概念和处理流程，尽量使用图表的形式。&lt;/p>
&lt;h3 id="24结构">2.4结构&lt;/h3>
&lt;p>用一览表及框图的形式说明本系统的系统元素（各层模块、子程序、公用程序等）的划分，扼要说明每个系统元素的标识符和功能，分层次地给出各元素之间的控制与被控制关系.&lt;/p>
&lt;h3 id="25功能器求与程序的关系">2.5功能器求与程序的关系&lt;/h3>
&lt;p>本条用一张如下的矩阵图说明各项功能需求的实现同各块程序的分配关系：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>程序1&lt;/td>
&lt;td>程序2&lt;/td>
&lt;td>……&lt;/td>
&lt;td>程序n&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>功能需求1&lt;/td>
&lt;td>√&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>功能需求2&lt;/td>
&lt;td>&lt;/td>
&lt;td>√&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>……&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>功能需求n&lt;/td>
&lt;td>&lt;/td>
&lt;td>√&lt;/td>
&lt;td>&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="26人工处理过程">2.6人工处理过程&lt;/h3>
&lt;p>说明在本软件系统的工作过程中不得不包含的人工处理过程（如果有的话）。&lt;/p>
&lt;h3 id="27尚未问决的问题">2.7尚未问决的问题&lt;/h3>
&lt;p>说明在概要设计过程中尚未解决而设计者认为在系统完成之前必须解决的各个问题。&lt;/p>
&lt;h2 id="3接口设计">3接口设计&lt;/h2>
&lt;h3 id="31用户接口">3.1用户接口&lt;/h3>
&lt;p>说明将向用户提供的命令和它们的语法结构，以及软件的回答信息。&lt;/p>
&lt;h3 id="32外部接口">3.2外部接口&lt;/h3>
&lt;p>说明本系统同外界的所有接口的安排包括软件与硬件之间的接口、本系统与各支持软件之间的接口关系。&lt;/p>
&lt;h3 id="33内部接口">3.3内部接口&lt;/h3>
&lt;p>说明本系统之内的各个系统元素之间的接口的安排。&lt;/p>
&lt;h2 id="4运行设计">4运行设计&lt;/h2>
&lt;h3 id="41运行模块组合">4.1运行模块组合&lt;/h3>
&lt;p>说明对系统施加不同的外界运行控制时所引起的各种不同的运行模块组合，说明每种运行所历经的内部模块和支持软件。&lt;/p>
&lt;h3 id="42运行控制">4.2运行控制&lt;/h3>
&lt;p>说明每一种外界的运行控制的方式方法和操作步骤。&lt;/p>
&lt;h3 id="43运行时间">4.3运行时间&lt;/h3>
&lt;p>说明每种运行模块组合将占用各种资源的时间。&lt;/p>
&lt;h2 id="5系统数据结构设计">5系统数据结构设计&lt;/h2>
&lt;h3 id="51逻辑结构设计要点">5.1逻辑结构设计要点&lt;/h3>
&lt;p>给出本系统内所使用的每个数据结构的名称、标识符以及它们之中每个数据项、记录、文卷和系的标识、定义、长度及它们之间的层次的或表格的相互关系。&lt;/p>
&lt;h3 id="52物理结构设计要点">5.2物理结构设计要点&lt;/h3>
&lt;p>给出本系统内所使用的每个数据结构中的每个数据项的存储要求，访问方法、存取单位、存取的物理关系（索引、设备、存储区域）、设计考虑和保密条件。&lt;/p>
&lt;h3 id="53数据结构与程序的关系">5.3数据结构与程序的关系&lt;/h3>
&lt;p>说明各个数据结构与访问这些数据结构的形式:&lt;/p>
&lt;h2 id="6系统出错处理设计">6系统出错处理设计&lt;/h2>
&lt;h3 id="61出错信息">6.1出错信息&lt;/h3>
&lt;p>用一览表的方式说朗每种可能的出错或故障情况出现时，系统输出信息的形式、含意及处理方法。&lt;/p>
&lt;h3 id="62补救措施">6.2补救措施&lt;/h3>
&lt;p>说明故障出现后可能采取的变通措施，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>后备技术说明准备采用的后备技术，当原始系统数据万一丢失时启用的副本的建立和启动的技术，例如周期性地把磁盘信息记录到磁带上去就是对于磁盘媒体的一种后备技术；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>降效技术说明准备采用的后备技术，使用另一个效率稍低的系统或方法来求得所需结果的某些部分，例如一个自动系统的降效技术可以是手工操作和数据的人工记录；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>恢复及再启动技术说明将使用的恢复再启动技术，使软件从故障点恢复执行或使软件从头开始重新运行的方法。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="63系统维护设计">6.3系统维护设计&lt;/h3>
&lt;p>说明为了系统维护的方便而在程序内部设计中作出的安排，包括在程序中专门安排用于系统的检查与维护的检测点和专用模块。
各个程序之间的对应关系，可采用如下的矩阵图的形式；&lt;/p></description></item><item><title>Docs: 注释</title><link>/docs/codestandards/comment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/codestandards/comment/</guid><description/></item><item><title>Docs: 测试</title><link>/docs/codestandards/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/codestandards/test/</guid><description/></item><item><title>Docs: 项目生命周期</title><link>/docs/projectmanagementstandards/projectlifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/projectmanagementstandards/projectlifecycle/</guid><description>
&lt;p>软件开发过程(software process) 是软件开发的开发生命周期(software development life cycle)，
其各个阶段实现了软件的需求定义与分析、设计、实现、测试、交付和维护。软件过程是在开发与构建系统时应遵循的步骤，是软件开发的路线图。&lt;/p></description></item><item><title>Docs: 详细设计说明书</title><link>/docs/documentationstyleguide/gb856t88/detaileddesignspecification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/detaileddesignspecification/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>说明编写这份详细设计说明书的目的，指出预期的读者。&lt;/p>
&lt;h3 id="12背景">1.2背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>待开发软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本项目的任务提出者、开发者、用户和运行该程序系统的计算中心。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到专门术语的定义和外文首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出有关的参考资料，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的经核准的计划任务书或合同、上级机关的批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表的文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处引用到的文件资料，包括所要用到的软件开发标准。列出这些文件的标题、文件编号、发表日期和出版单位，说明能够取得这些文件的来源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2程序系统的结构">2程序系统的结构&lt;/h2>
&lt;p>用一系列图表列出本程序系统内的每个程序（包括每个模块和子程序）的名称、标识符和它们之间
的层次结构关系。&lt;/p>
&lt;h2 id="3程序1标识符设计说明">3程序1（标识符）设计说明&lt;/h2>
&lt;p>从本章开始，逐个地给出各个层次中的每个程序的设计考虑。以下给出的提纲是针对一般情况的。对于一个具体的模块，尤其是层次比较低的模块或子程序，其很多条目的内容往往与它所隶属的上一层
模块的对应条目的内容相同，在这种情况下，只要简单地说明这一点即可。&lt;/p>
&lt;h3 id="31程序描述">3.1程序描述&lt;/h3>
&lt;p>给出对该程序的简要描述，主要说明安排设计本程序的目的意义，并且，还要说明本程序的特点（如
是常驻内存还是非常驻？是否子程序？是可重人的还是不可重人的？有无覆盖要求？是顺序处理还是并发处理等）。&lt;/p>
&lt;h3 id="32功能">3.2功能&lt;/h3>
&lt;p>说明该程序应具有的功能，可采用IPO图（即输入一处理一输出图）的形式。&lt;/p>
&lt;h3 id="33性能">3.3性能&lt;/h3>
&lt;p>说明对该程序的全部性能要求，包括对精度、灵活性和时间特性的要求。&lt;/p>
&lt;h3 id="34输人项">3.4输人项&lt;/h3>
&lt;p>给出对每一个输入项的特性，包括名称、标识、数据的类型和格式、数据值的有效范围、输入的方式。数量和频度、输入媒体、输入数据的来源和安全保密条件等等。&lt;/p>
&lt;h3 id="35输出项">3.5输出项&lt;/h3>
&lt;p>给出对每一个输出项的特性，包括名称、标识、数据的类型和格式，数据值的有效范围，输出的形式、数量和频度，输出媒体、对输出图形及符号的说明、安全保密条件等等。&lt;/p>
&lt;h3 id="36算法">3.6算法&lt;/h3>
&lt;p>详细说明本程序所选用的算法，具体的计算公式和计算步骤。&lt;/p>
&lt;h3 id="37流程逻辑">3.7流程逻辑&lt;/h3>
&lt;p>用图表（例如流程图、判定表等）辅以必要的说明来表示本程序的逻辑流程。&lt;/p>
&lt;h3 id="38接口">3.8接口&lt;/h3>
&lt;p>用图的形式说明本程序所隶属的上一层模块及隶属于本程序的下一层模块、子程序，说明参数赋值和调用方式，说明与本程序相直接关联的数据结构（数据库、数据文卷）。&lt;/p>
&lt;h3 id="39存储分配">3.9存储分配&lt;/h3>
&lt;p>根据需要，说明本程序的存储分配。&lt;/p>
&lt;h3 id="310注释设计">3.10注释设计&lt;/h3>
&lt;p>说明准备在本程序中安排的注释，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>加在模块首部的注释；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>加在各分枝点处的注释；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对各变量的功能、范围、缺省条件等所加的注释；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对使用的逻辑所加的注释等等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="311限制条件">3.11限制条件&lt;/h3>
&lt;p>说明本程序运行中所受到的限制条件。&lt;/p>
&lt;h3 id="312测试计划">3.12测试计划&lt;/h3>
&lt;p>说明对本程序进行单体测试的计划，包括对测试的技术要求、输入数据、预期结果、进度安排、人员职责、设备条件驱动程序及桩模块等的规定。&lt;/p>
&lt;h3 id="313尚未解决的问题">3.13尚未解决的问题&lt;/h3>
&lt;p>说明在本程序的设计中尚未解决而设计者认为在软件完成之前应解决的问题。&lt;/p>
&lt;h2 id="4程序2标识符设计说明">4程序2（标识符）设计说明&lt;/h2>
&lt;p>用类似F．3的方式，说明第2个程序乃至第N个程序的设计考虑。&lt;/p>
&lt;p>&amp;hellip;&amp;hellip;&lt;/p></description></item><item><title>Docs: 用户操作手册</title><link>/docs/documentationstyleguide/gb856t88/usermanual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/usermanual/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>说明编写这份用户手册的目的，指出预期的读者。&lt;/p>
&lt;h3 id="12背景">1.2背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>这份用户手册所描述的软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该软件项目的任务提出者、开发者、用户（或首批用户）及安装此软件的计算中心。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到的专门术语的定义和外文首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出有用的参考资料，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>项目的经核准的计划任务书或合同、上级机关的批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处引用的文件、资料，包括所要用到的软件开发标准。列出这些文件资料的标题、文件编号、发表日期和出版单位，说明能够取得这些文件资料的来源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2用途">2用途&lt;/h2>
&lt;h3 id="21功能">2.1功能&lt;/h3>
&lt;p>结合本软件的开发目的逐项地说明本软件所具有各项功能以及它们的极限范围。&lt;/p>
&lt;h3 id="22性能">2.2性能&lt;/h3>
&lt;h4 id="221精度">2.2.1精度&lt;/h4>
&lt;p>逐项说明对各项输入数据的精度要求和本软件输出数据达到的精度，包括传输中的精度要求。&lt;/p>
&lt;h4 id="222时间特性">2.2.2时间特性&lt;/h4>
&lt;p>定量地说明本软件的时间特性，如响应时间，更新处理时间，数据传输、转换时间，计算时间等。&lt;/p>
&lt;h4 id="223灵活性">2.2.3灵活性&lt;/h4>
&lt;p>说明本软件所具有的灵活性，即当用户需求（如对操作方式、运行环境、结果精度、时间特性等的要求）有某些变化时，本软件的适应能力。&lt;/p>
&lt;h3 id="23安全保密">2.3安全保密&lt;/h3>
&lt;p>说明本软件在安全、保密方面的设计考虑和实际达到的能力。&lt;/p>
&lt;h2 id="3运行环境">3运行环境&lt;/h2>
&lt;h3 id="31硬设备">3.1硬设备&lt;/h3>
&lt;p>列出为运行本软件所要求的硬设备的最小配置，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>处理机的型号、内存容量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所要求的外存储器、媒体、记录格式、设备的型号和台数、联机／脱机；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I／O设备（联机／脱机？）；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据传输设备和转换设备的型号、台数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="32支持软件">3.2支持软件&lt;/h3>
&lt;p>说明为运行本软件所需要的支持软件，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>操作系统的名称、版本号；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序语言的编译／汇编系统的名称和版本号；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库管理系统的名称和版本号；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他支持软件。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="33数据结构">3.3数据结构&lt;/h3>
&lt;p>列出为支持本软件的运行所需要的数据库或数据文卷。&lt;/p>
&lt;h2 id="4使用过程">4使用过程&lt;/h2>
&lt;p>在本章，首先用图表的形式说明软件的功能同系统的输入源机构、输出接收机构之间的关系。&lt;/p>
&lt;h3 id="41安装与初始化">4.1安装与初始化&lt;/h3>
&lt;p>一步一步地说明为使用本软件而需进行的安装与初始化过程，包括程序的存储形式、安装与初始化过程中的全部操作命令、系统对这些命令的反应与答复。表征安装工作完成的测试实例等。如果有的话，还应说明安装过程中所需用到的专用软件。&lt;/p>
&lt;h3 id="42输入">4.2输入&lt;/h3>
&lt;p>规定输入数据和参量的准备要求。&lt;/p>
&lt;h4 id="421输入数据的现实背景">4.2.1输入数据的现实背景&lt;/h4>
&lt;p>说明输入数据的现实背景，主要是&lt;/p>
&lt;ol>
&lt;li>
&lt;p>情况——例如人员变动、库存缺货；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>情况出现的频度——例如是周期性的、随机的、一项操作状态的函数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>情况来源—一例如人事部门、仓库管理部门；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输入媒体———例如键盘、穿孔卡片、磁带；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>限制——出于安全、保密考虑而对访问这些输入数据所加的限制；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>质量管理——例如对输入数据合理性的检验以及当输入数据有错误时应采取的措施，如建立出错情况的记录等；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支配——例如如何确定输入数据是保留还是废弃，是否要分配给其他的接受者等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="422输入格式">4.2.2输入格式&lt;/h4>
&lt;p>说明对初始输入数据和参量的格式要求，包括语法规则和有关约定，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>长度—一例如字符数／行，字符数／项；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>格式基准——例如以左面的边沿为基准；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标号——例如标记或标识符；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>顺序——例如各个数据项的次序及位置；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标点——例如用来表示行、数据组等的开始或结束而使用的空格、斜线、星号、字符组等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>词汇表——给出允许使用的字符组合的列表，禁止使用＊的字符组合的列表等；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>省略和重复——给出用来表示输人元素可省略或重复的表示方式；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>控制——给出用来表示输入开始或结束的控制信息。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="423输入举例">4.2.3输入举例&lt;/h4>
&lt;p>为每个完整的输入形式提供样本，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>控制或首部——例如用来表示输入的种类和类型的信息，标识符输入日期，正文起点和对所用编码的规定；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主体——输入数据的主体，包括数据文卷的输入表述部分；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尾部——用来表示输入结束的控制信息，累计字符总数等；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>省略——指出哪些输入数据是可省略的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重复——指出哪些输入数据是重复的。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="43输出对每项输出作出说明">4.3输出对每项输出作出说明&lt;/h3>
&lt;h4 id="431输出数据的现实背景">4.3.1输出数据的现实背景&lt;/h4>
&lt;p>说明输出数据的现实背景，主要是：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用——这些输出数据是给谁的，用来干什么；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用频度——例如每周的、定期的或备查阅的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>媒体——打印、CRI显示、磁带、卡片、磁盘，&lt;/p>
&lt;/li>
&lt;li>
&lt;p>质量管理—一例如关于合理性检验、出错纠正的规定；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支配——例如如何确定输出数据是保留还是废弃，是否要分配给其他接受者等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="432输出格式">4.3.2输出格式&lt;/h4>
&lt;p>给出对每一类输出信息的解释，主要是：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首部——如输出数据的标识符，输出日期和输出编号；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>主体——输出信息的主体，包括分栏标题；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>尾部——包括累计总数，结束标记。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="433输出举例">4.3.3输出举例&lt;/h4>
&lt;p>为每种输出类型提供例子。对例子中的每一项，说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>定义——每项输出信息的意义和用途；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>来源——是从特定的输入中抽出、从数据库文卷中取出、或从软件的计算过程中得到；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特性——输出的值域、计量单位、在什么情况下可缺省等。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="44文卷查询">4.4文卷查询&lt;/h3>
&lt;p>这一条的编写针对具有查询能力的软件，内容包括：同数据库查询有关的初始化、准备、及处理所需
要的详细规定，说明查询的能力、方式，所使用的命令和所要求的控制规定。&lt;/p>
&lt;h3 id="45出错处理和恢复">4.5出错处理和恢复&lt;/h3>
&lt;p>列出由软件产生的出错编码或条件以及应由用户承担的修改纠正工作。指出为了确保再启动和恢复的能力，用户必须遵循的处理过程。&lt;/p>
&lt;h3 id="46终端操作">4.6终端操作&lt;/h3>
&lt;p>当软件是在多终端系统上工作时，应编写本条，以说明终端的配置安排、连接步释、数据和参数输入步骤以及控制规定．说明通过终端操作进行查询、检索、修改数据文卷的能力、语言、过程以及辅助性程序等。&lt;/p></description></item><item><title>Docs: 测试计划</title><link>/docs/documentationstyleguide/gb856t88/testplan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/testplan/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>本测试计划的具体编写目的，指出预期的读者范围。&lt;/p>
&lt;h3 id="12背景">1.2背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>测试计划所从属的软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该开发项目的历史，列出用户和执行此项目测试的计算中心，说明在开始执行本测试计划之前必须完成的各项工作。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到的专门术语的定义和外文首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出要用到的参考资料，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的经核准的计划任务书或合同、上级机关的批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表的文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处引用的文件、资料，包括所要用到的软件开发标准。列出这些文件的标题、文件编号、发表日期和出版单位，说明能够得到这些文件资料的来源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2计划">2计划&lt;/h2>
&lt;h3 id="21软件说明">2.1软件说明&lt;/h3>
&lt;p>提供一份图表，并逐项说明被测软件的功能、输入和输出等质量指标，作为叙述测试计划的提纲。&lt;/p>
&lt;h3 id="22测试内容">2.2测试内容&lt;/h3>
&lt;p>列出组装测试和确认测试中的每一项测试内容的名称标识符、这些测试的进度安排以及这些测试的内容和目的，例如模块功能测试、接口正确性测试、数据文卷存取的测试、运行时间的测试、设计约束和极限的测试等。&lt;/p>
&lt;h3 id="23测试1标识符">2.3测试1（标识符）&lt;/h3>
&lt;p>给出这项测试内容的参与单位及被测试的部位。&lt;/p>
&lt;h4 id="231进度安排">2.3.1进度安排&lt;/h4>
&lt;p>给出对这项测试的进度安排，包括进行测试的日期和工作内容（如熟悉环境。培训、准备输入数据等）。&lt;/p>
&lt;h4 id="232条件">2.3.2条件&lt;/h4>
&lt;p>陈述本项测试工作对资源的要求，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>设备所用到的设备类型、数量和预定使用时间；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>软件列出将被用来支持本项测试过程而本身又并不是被测软件的组成部分的软件，如测试驱动程序、测试监控程序、仿真程序、桩模块等等；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>人员列出在测试工作期间预期可由用户和开发任务组提供的工作人员的人数。技术水平及有关的预备知识，包括一些特殊要求，如倒班操作和数据键入人员。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="233测试资料">2.3.3测试资料&lt;/h4>
&lt;p>列出本项测试所需的资料，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>有关本项任务的文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>被测试程序及其所在的媒体；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>测试的输入和输出举例；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>有关控制此项测试的方法、过程的图表。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="234测试培训">2.3.4测试培训&lt;/h4>
&lt;p>说明或引用资料说明为被测软件的使用提供培训的计划。规定培训的内容、受训的人员及从事培训的工作人员。&lt;/p>
&lt;h3 id="24测试2标识符">2.4测试2（标识符）&lt;/h3>
&lt;p>用与本测试计划2.3条相类似的方式说明用于另一项及其后各项测试内容的测试工作计划。&lt;/p>
&lt;h2 id="3测试设计说明">3测试设计说明&lt;/h2>
&lt;h3 id="31测试1标识符">3.1测试1（标识符）&lt;/h3>
&lt;p>说明对第一项测试内容的测试设计考虑。&lt;/p>
&lt;h4 id="311控制">3.1.1控制&lt;/h4>
&lt;p>说明本测试的控制方式，如输入是人工、半自动或自动引入、控制操作的顺序以及结果的记录方法。&lt;/p>
&lt;h4 id="312输入">3.1.2输入&lt;/h4>
&lt;p>说明本项测试中所使用的输入数据及选择这些输入数据的策略。&lt;/p>
&lt;h4 id="313输出">3.1.3输出&lt;/h4>
&lt;p>说明预期的输出数据，如测试结果及可能产生的中间结果或运行信息。&lt;/p>
&lt;h3 id="314过程">3.1.4过程&lt;/h3>
&lt;p>说明完成此项测试的一个个步骤和控制命令，包括测试的准备、初始化、中间步聚和运行结束方式。&lt;/p>
&lt;h3 id="32测试2标识符">3.2测试2（标识符）&lt;/h3>
&lt;p>用与本测试计划3.l条相类似的方式说明第2项及其后各项测试工作的设计考虑。&lt;/p>
&lt;h2 id="4评价准则">4评价准则&lt;/h2>
&lt;h3 id="41范围">4.1范围&lt;/h3>
&lt;p>说明所选择的测试用例能够接查的范围及其局限性。&lt;/p>
&lt;h3 id="42数据整理">4.2数据整理&lt;/h3>
&lt;p>陈述为了把测试数据加工成便于评价的适当形式，使得测试结果可以同，已知结果进行比较而要用到的转换处理技术，如手工方式或自动方式；如果是用自动方式整理数据，还要说明为进行处理而要用到的硬件、软件资源。&lt;/p>
&lt;h3 id="43尺度">4.3尺度&lt;/h3>
&lt;p>说明用来判断测试工作是否能通过的评价尺度，如合理的输出结果的类型、测试输出结果与预期输出之间的容许偏离范围、允许中断或停机的最大次数。&lt;/p></description></item><item><title>Docs: 概要设计说明书</title><link>/docs/documentationstyleguide/gb856t88/databasedesign/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/databasedesign/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>说明编写这份数据库设计说明书的目的，指出预期的读者。&lt;/p>
&lt;h3 id="12背景">1.2背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>说明待开发的数据库的名称和使用此数据库的软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>列出该软件系统开发项目的任务提出者、用户以及将安装该软件和这个数据库的计算站（中心）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到的专门术语的定义、外文首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出有关的参考资料：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的经核准的计划任务书或合同、上级机关批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表的文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处引用到的文件资料，包括所要用到的软件开发标准。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>列出这些文件的标题、文件编号、发表日期和出版单位，说明能够取得这些文件的来源。&lt;/p>
&lt;h2 id="2外部设计">2外部设计&lt;/h2>
&lt;h3 id="21标识符和状态">2.1标识符和状态&lt;/h3>
&lt;p>联系用途，详细说明用于唯一地标识该数据库的代码、名称或标识符，附加的描述性信息亦要给出。如果该数据库属于尚在实验中、尚在测试中或是暂时使用的，则要说明这一特点及其有效时间范围。&lt;/p>
&lt;h3 id="22使用它的程序">2.2使用它的程序&lt;/h3>
&lt;p>列出将要使用或访问此数据库的所有应用程序，对于这些应用程序的每一个，给出它的名称和版本号。&lt;/p>
&lt;h3 id="23约定">2.3约定&lt;/h3>
&lt;p>陈述一个程序员或一个系统分析员为了能使用此数据库而需要了解的建立标号、标识的约定，例如用于标识数据库的不同版本的约定和用于标识库内各个文卷、、记录、数据项的命名约定等。&lt;/p>
&lt;h3 id="24专门指导">2.4专门指导&lt;/h3>
&lt;p>向准备从事此数据库的生成、从事此数据库的测试、维护人员提供专门的指导，例如将被送入数据库的数据的格式和标准、送入数据库的操作规程和步骤，用于产生、修改、更新或使用这些数据文卷的操作指导。如果这些指导的内容篇幅很长，列出可参阅的文件资料的名称和章条。&lt;/p>
&lt;h3 id="25支持软件">2.5支持软件&lt;/h3>
&lt;p>简单介绍同此数据库直接有关的支持软件，如数据库管理系统、存储定位程序和用于装入、生成、修
改、更新数据库的程序等。说明这些软件的名称、版本号和主要功能特性，如所用数据模型的类型、允许
的数据容量等。列出这些支持软件的技术文件的标题、编号及来源。&lt;/p>
&lt;h2 id="3结构设计">3结构设计&lt;/h2>
&lt;h3 id="31概念结构设计">3.1概念结构设计&lt;/h3>
&lt;p>说明本数据库将反映的现实世界中的实体、属性和它们之间的关系等的原始数据形式，包括各数据项、记录、系、文卷的标识符、定义、类型、度量单位和值域，建立本数据库的每一幅用户视图。&lt;/p>
&lt;h3 id="32逻辑结构设计">3.2逻辑结构设计&lt;/h3>
&lt;p>说明把上述原始数据进行分解、合并后重新组织起来的数据库全局逻辑结构，包括所确定的关键字和属性、重新确定的记录结构和文卷结构、所建立的各个文卷之间的相互关系，形成本数据库的数据库管理员视图。&lt;/p>
&lt;h3 id="33物理结构设计">3.3物理结构设计&lt;/h3>
&lt;p>建立系统程序员视图，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>数据在内存中的安排，包括对索引区、缓冲区的设计；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所使用的外存设备及外存空间的组织，包括索引区、数据块的组织与划分；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>访问数据的方式方法。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="4运用设计">4运用设计&lt;/h2>
&lt;h3 id="41数据字典设计">4.1数据字典设计&lt;/h3>
&lt;p>对数据库设计中涉及到的各种项目，如数据项、记录、系、文卷、模式、子模式等一般要建立起数据字典，以说明它们的标识符、同义名及有关信息。在本节中要说明对此数据字典设计的基本考虑。&lt;/p>
&lt;h3 id="42安全保密设计">4.2安全保密设计&lt;/h3>
&lt;p>说明在数据库的设计中，将如何通过区分不同的访问者、不同的访问类型和不同的数据对象，进行分别对待而获得的数据库安全保密的设计考虑。&lt;/p></description></item><item><title>Docs: 测试分析报告</title><link>/docs/documentationstyleguide/gb856t88/testanalysisreport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/testanalysisreport/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>说明这份测试分析报告的具体编写目的，指出预期的阅读范围。&lt;/p>
&lt;h3 id="12背景">1.2背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>被测试软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>该软件的任务提出者、开发者、用户及安装此软件的计算中心，指出测试环境与实际运行环境
之间可能存在的差异以及这些差异对测试结果的影响。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到的专问术语的定义和外文首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出要用到的参考资料，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的经核准的计划任务书或合同、上级机关的批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表的文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处引用的文件、资料，包括所要用到的软件开发标准。列出这些文件的标题、文件编号、发表日期和出版单位，说明能够得到这些文件资料的来源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2测试概要">2测试概要&lt;/h2>
&lt;p>用表格的形式列出每一项测试的标识符及其测试内容，并指明实际进行的测试工作内容与测试计划中预先设计的内容之间的差别，说明作出这种改变的原因。&lt;/p>
&lt;h2 id="3测试结果及发现">3测试结果及发现&lt;/h2>
&lt;h3 id="31测试1标识符">3.1测试1（标识符）&lt;/h3>
&lt;p>把本项测试中实际得到的动态输出（包括内部生成数据输出）结果同对于动态输出的要求进行比较，陈述其中的各项发现。&lt;/p>
&lt;h3 id="32测试2标识符">3.2测试2（标识符）&lt;/h3>
&lt;p>用类似本报告3.1条的方式给出第 2项及其后各项测试内容的测试结果和发现。&lt;/p>
&lt;h2 id="4对软件功能的结论">4对软件功能的结论&lt;/h2>
&lt;h3 id="41功能1标识符">4.1功能1（标识符）&lt;/h3>
&lt;h4 id="411能力">4.1.1能力&lt;/h4>
&lt;p>简述该项功能，说明为满足此项功能而设计的软件能力以及经过一项或多项测试已证实的能力。&lt;/p>
&lt;h4 id="412限制">4.1.2限制&lt;/h4>
&lt;p>说明测试数据值的范围（包括动态数据和静态数据），列出就这项功能而言，测试期间在该软件中查出的缺陷、局限性。&lt;/p>
&lt;h3 id="42功能2标识符">4.2功能2（标识符）&lt;/h3>
&lt;p>用类似本报告4.l的方式给出第2项及其后各项功能的测试结论。&lt;/p>
&lt;p>．．．．．．&lt;/p>
&lt;h2 id="5分析摘要">5分析摘要&lt;/h2>
&lt;h3 id="51能力">5.1能力&lt;/h3>
&lt;p>陈述经测试证实了的本软件的能力。如果所进行的测试是为了验证一项或几项特定性能要求的实现，应提供这方面的测试结果与要求之间的比较，并确定测试环境与实际运行环境之间可能存在的差异
对能力的测试所带来的影响。&lt;/p>
&lt;h3 id="52缺陷和限制">5.2缺陷和限制&lt;/h3>
&lt;p>陈述经测试证实的软件缺陷和限制，说明每项缺陷和限制对软件性能的影响，并说明全部测得的性能缺陷的累积影响和总影响。&lt;/p>
&lt;h3 id="53建议">5.3建议&lt;/h3>
&lt;p>对每项缺陷提出改进建议，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>各项修改可采用的修改方法；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各项修改的紧迫程度；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各项修改预计的工作量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>各项修改的负责人。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="54评价">5.4评价&lt;/h3>
&lt;p>说明该项软件的开发是否已达到预定目标，能否交付使用。&lt;/p>
&lt;h2 id="6测试资源消耗">6测试资源消耗&lt;/h2>
&lt;p>总结测试工作的资源消耗数据，如工作人员的水平级别数量、机时消耗等。&lt;/p></description></item><item><title>Docs: 开发进度月报</title><link>/docs/documentationstyleguide/gb856t88/monthlydevelopmentprogressreport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/monthlydevelopmentprogressreport/</guid><description>
&lt;h2 id="1标题">1标题&lt;/h2>
&lt;p>开发中的软件系统的名称和标识符&lt;/p>
&lt;p>分项目名称和标识符&lt;/p>
&lt;p>分项目负责人签名&lt;/p>
&lt;p>本期月报编写人签名&lt;/p>
&lt;p>本期月报的编号及所报告的年月&lt;/p>
&lt;h2 id="2工程进度与状态">2工程进度与状态&lt;/h2>
&lt;h3 id="21进度">2.1进度&lt;/h3>
&lt;p>列出本月内进行的各项主要活动，并且说明本月内遇到的重要事件，这里所说的重要事件是指一个开发阶段（即软件生存周期内各个阶段中的某一个，例如需求分析阶段）的开始或结束，要说明阶段名称及开始（或结束）的日期。&lt;/p>
&lt;h3 id="22状态">2.2状态&lt;/h3>
&lt;p>说明本月的实际工作进度与计划相比，是提前了、按期完成了、或是推迟了？如果与计划不一致，说
明原因及准备采取的措施。&lt;/p>
&lt;h2 id="3资额耗用与状态">3资额耗用与状态&lt;/h2>
&lt;h3 id="31资额耗用">3.1资额耗用&lt;/h3>
&lt;p>主要说明本月份内耗用的工时与机时。&lt;/p>
&lt;h4 id="311工时">3.1.1工时&lt;/h4>
&lt;p>分为三类：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>管理用工时包括在项目管理（制订计划、布置工作、收集数据、检查汇报工作等）方面耗用的工时；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务工时包括为支持项目开发所必须的服务工作及非直接的开发工作所耗用的工时；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>开发用工时要分各个开发阶段填写。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="312机时">3.1.2机时&lt;/h4>
&lt;p>说明本月内耗用的机时，以小时为单位，说明计算机系统的型号。&lt;/p>
&lt;h3 id="32状态">3.2状态&lt;/h3>
&lt;p>说明本月内实际耗用的资源与计划相比，是超出了、相一致、还是不到计划数？如果与计划不一致，说明原因及准备采取的措施。&lt;/p>
&lt;h2 id="4经费支出与状态">4经费支出与状态&lt;/h2>
&lt;h3 id="41经费支出">4.1经费支出&lt;/h3>
&lt;h4 id="411支持性费用">4.1.1支持性费用&lt;/h4>
&lt;p>列出本月内支出的支持性费用，一般可按如下七类列出，并给出本月支持费用的总和：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>房租或房屋折旧费；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>社工资、奖金、补贴；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>培训费包括给教师的酬金及教室租金；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>资料费包括复印及购买参考资料的费用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>会议费召集有关业务会议的费用；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>旅差费；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他费用。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="412设备购置费">4.1.2设备购置费&lt;/h4>
&lt;p>列出本月内支出的设备购置费，一般可分如下三类：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>购买软件的名称与金额；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>购买硬设备的名称、型号、数量及金额；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>已有硬设备的折旧费。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="42状态">4.2状态&lt;/h3>
&lt;p>说明本月内实际支出的经费与计划相比较，是超过了。相符合、还是不到计划数？如果与计划不一致，说明原因及准备采取的措施。&lt;/p>
&lt;h2 id="5下个月的工作计划">5下个月的工作计划&lt;/h2>
&lt;h2 id="6建议">6建议&lt;/h2>
&lt;p>本月遇到的重要问题和应引起重视的问题以及因此产生的建议。&lt;/p></description></item><item><title>Docs: 项目开发总结报告</title><link>/docs/documentationstyleguide/gb856t88/projectdevelopmentsummaryreport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/projectdevelopmentsummaryreport/</guid><description>
&lt;h2 id="1引言">1引言&lt;/h2>
&lt;h3 id="11编写目的">1.1编写目的&lt;/h3>
&lt;p>说明编写这份项目开发总结报告的目的，指出预期的阅读范围。&lt;/p>
&lt;h3 id="12背景">1.2背景&lt;/h3>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的名称和所开发出来的软件系统的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>此软件的任务提出者、开发者、用户及安装此软件的计算中心。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="13定义">1.3定义&lt;/h3>
&lt;p>列出本文件中用到的专门术语的定义和外文首字母组词的原词组。&lt;/p>
&lt;h3 id="14参考资料">1.4参考资料&lt;/h3>
&lt;p>列出要用到的参考资料，如：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>本项目的已核准的计划任务书或合同、上级机关的批文；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>属于本项目的其他已发表的文件；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本文件中各处所引用的文件、资料，包括所要用到的软件开发标准。列出这些文件的标题、文件编号、发表日期和出版单位，说明能够得到这些文件资料的来源。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2实际开发结果">2实际开发结果&lt;/h2>
&lt;h3 id="21产品">2.1产品&lt;/h3>
&lt;p>说明最终制成的产品，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>程序系统中各个程序的名字，它们之间的层次关系，以千字节为单位的各个程序的程序量、存储媒体的形式和数量；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>程序系统共有哪几个版本，各自的版本号及它们之间的区别；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个文件的名称；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所建立的每个数据库。
如果开发中制订过配置管理计划，要同这个计划相比较。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="22主要功能和性能">2.2主要功能和性能&lt;/h3>
&lt;p>逐项列出本软件产品所实际具有的主要功能和性能，对照可行性研究报告、项目开发计划、功能需求说明书的有关内容，说明原定的开发目标是达到了、未完全达到、或超过了。&lt;/p>
&lt;h3 id="23基本流程">2.3基本流程&lt;/h3>
&lt;p>用图给出本程序系统的实际的基本的处理流程。&lt;/p>
&lt;h3 id="24进度">2.4进度&lt;/h3>
&lt;p>列出原定计划进度与实际进度的对比，明确说明，实际进度是提前了、还是延迟了，分析主要原因。&lt;/p>
&lt;h3 id="25费用">2.5费用&lt;/h3>
&lt;p>列出原定计划费用与实际支出费用的对比，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>工时，以人月为单位，并按不同级别统计；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算机的使用时间，区别CPU时间及其他设备时间；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>物料消耗、出差费等其他支出。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>明确说明，经费是超出了、还是节余了，分析其主要原因。&lt;/p>
&lt;h2 id="3开发工作评价">3开发工作评价&lt;/h2>
&lt;h3 id="31对生产效率的评价">3.1对生产效率的评价&lt;/h3>
&lt;p>给出实际生产效率，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>程序的平均生产效率，即每人月生产的行数；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>文件的平均生产效率，即每人月生产的千字数；&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="32对产品质量的评价">3.2对产品质量的评价&lt;/h3>
&lt;p>说明在测试中检查出来的程序编制中的错误发生率，即每干条指令（或语句）中的错误指令数（或语句数）。如果开发中制订过质量保证计划或配置管理计划，要同这些计划相比较。&lt;/p>
&lt;h3 id="33对技术方法的评价">3.3对技术方法的评价&lt;/h3>
&lt;p>给出对在开发中所使用的技术、方法、工具、手段的评价。&lt;/p>
&lt;h3 id="34出错原因的分析">3.4出错原因的分析&lt;/h3>
&lt;p>给出对于开发中出现的错误的原因分析。&lt;/p>
&lt;h2 id="4经验与教训">4经验与教训&lt;/h2>
&lt;p>列出从这项开发工作中所得到的最主要的经验与教训及对今后的项目开发工作的建议。&lt;/p></description></item><item><title>Docs: 模块开发卷宗</title><link>/docs/documentationstyleguide/gb856t88/softwaremaintenancemanual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/softwaremaintenancemanual/</guid><description>
&lt;h2 id="1标题">1标题&lt;/h2>
&lt;p>软件系统名称和标识符&lt;/p>
&lt;p>模块名称和标识符（如果本卷宗包含多于一个的模块，则用这组模块的功能标识代替模块名）&lt;/p>
&lt;p>程序编制员签名&lt;/p>
&lt;p>卷宗的修改文本序号&lt;/p>
&lt;p>修改完成日期&lt;/p>
&lt;p>卷宗序号（说明本卷宗在整个卷宗中的序号）&lt;/p>
&lt;p>编排日期（说明整个卷宗最近的一次编排日期）&lt;/p>
&lt;h2 id="2模块开发情况表">2模块开发情况表&lt;/h2>
&lt;h2 id="3功能说明">3功能说明&lt;/h2>
&lt;p>扼要说明本模块（或本组模块）的功能，主要是输入、要求的处理、输出。可以从系统设计说明书中摘录。同时列出在软件需求说明书中对这些功能的说明的章、条、款。&lt;/p>
&lt;h2 id="4设计说明">4设计说明&lt;/h2>
&lt;p>说明本模块（或本组模块）的设计考虑，包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在系统设计说明书中有关对本模块（或本组模块）设计考虑的叙述，包括本模块在软件系统中所处的层次，它同其他模块的接口；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在程序设计说明书中有关对本模块（或本组模块）的设计考虑，包括本模块的算法、处理流程、牵涉到的数据文卷设计限制、驱动方式和出错信息等；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在编制目前已通过全部测试的源代码时实际使用的设计考虑。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="5原代码清单">5原代码清单&lt;/h2>
&lt;p>要给出所产生的本模块（或本组模块）的第一份无语法错的源代码清单以及已通过全部测试的当前有效的源代码清单。&lt;/p>
&lt;h2 id="6测试说明">6测试说明&lt;/h2>
&lt;p>说明直接要经过本模块（或本组模块）的每一项测试，包括这些测试各自的标识符和编号、进行这些测试的目的、所用的配置和输入、预期的输出及实际的输出。&lt;/p>
&lt;h2 id="7复审的结论">7复审的结论&lt;/h2>
&lt;p>把实际测试的结果，同软件需求说明书、系统设计说明书、程序设计说明书中规定的要求进行比较和给出结论。&lt;/p></description></item><item><title>Docs: 软件问题报告</title><link>/docs/documentationstyleguide/gb856t88/softwareproblemreport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/softwareproblemreport/</guid><description/></item><item><title>Docs: 软件修改报告</title><link>/docs/documentationstyleguide/gb856t88/softwaremodificationreport/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/documentationstyleguide/gb856t88/softwaremodificationreport/</guid><description/></item><item><title>Docs:</title><link>/docs/iaas/userinterface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/iaas/userinterface/</guid><description/></item></channel></rss>