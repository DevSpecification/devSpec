<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>开发规范 – 开发规范</title><link>https://taibiaoguo.github.io/devSpec/docs/</link><description>Recent content on 开发规范</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://taibiaoguo.github.io/devSpec/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 你需要微服务么</title><link>https://taibiaoguo.github.io/devSpec/docs/automationintegrationstandards/testprocessstandards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://taibiaoguo.github.io/devSpec/docs/automationintegrationstandards/testprocessstandards/</guid><description/></item><item><title>Docs: 你需要微服务么</title><link>https://taibiaoguo.github.io/devSpec/docs/microservice/isneedmicroservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://taibiaoguo.github.io/devSpec/docs/microservice/isneedmicroservice/</guid><description>
&lt;p>你应该早已经看过许多介绍微服务优点的博文，但很少有人告诉你微服务的切分、微服务的管理和监测等要点如果处理不当，微服务的实施将会是一场噩梦。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>单体式架构&lt;/th>
&lt;th>微服务&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>开发&lt;/td>
&lt;td>初始开发速度更快；难以更改或添加功能&lt;/td>
&lt;td>早期设计至关重要；添加或更改服务较为容易&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>应用工作流&lt;/td>
&lt;td>易于将应用纳入工作流；可在单个位置实施功能（如身份验证或监控）&lt;/td>
&lt;td>在工作流中分配服务变得更加复杂；服务间的依赖关系或要求可能不明确&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>培训和维护&lt;/td>
&lt;td>架构简单；对环境和语言有着严格的开发要求&lt;/td>
&lt;td>架构灵活，设计复杂度得到提高；采用标准 API 或消息连接的多语言服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>灵活扩展&lt;/td>
&lt;td>难以扩展；依赖于硬件基础架构；为应对一个服务的高峰而需扩展整个应用&lt;/td>
&lt;td>易于扩展各个服务，而不会影响整体架构；使用软件定义的基础架构（容器、云）实现动态响应&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>更新、故障转移、停机&lt;/td>
&lt;td>所有服务均紧密耦合；服务必须一起更新；版本耦合；如果单个服务出现故障，则存在系统故障的风险&lt;/td>
&lt;td>服务非耦合；可以独立添加或更新服务；故障风险仅限于一小部分服务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>自动化&lt;/td>
&lt;td>很大程度上无须自动化&lt;/td>
&lt;td>需要自动化和编排&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在一个项目开始前，你应该按照以下步骤来思考你是否需要引入微服务架构：&lt;/p>
&lt;ol>
&lt;li>谁是您的客户或用户？&lt;/li>
&lt;li>他们想要做什么？&lt;/li>
&lt;li>您使用什么基础架构？&lt;/li>
&lt;li>该基础架构生命周期有多长？&lt;/li>
&lt;li>单个工作流有哪些服务或功能需求？&lt;/li>
&lt;li>该工作流的生命周期有多长？&lt;/li>
&lt;li>您的部署路径是什么？需要多久部署一次？&lt;/li>
&lt;li>这会影响哪些业务功能？&lt;/li>
&lt;/ol>
&lt;p>项目的成功衡量标准不是由开发人员来定义，而是由项目所面对的客户来评价。因此，客户看重什么、客户的期望结果、
客户如何评判成功才是项目架构设计前的首要考虑因素。应用的&lt;/p>
&lt;p>因此，选择单体式架构、微服务架构或是面向服务架构前，应首先考虑你想要做什么和客户需要什么。&lt;/p>
&lt;p>简单来说，单体式应用就是在单个应用中包含所有功能的应用堆栈。无论是服务之间的交互还是开发与交付方式，都采用紧密耦合的形式。
更新或扩展单体式应用的某个方面也会对整个应用及其基础架构产生影响。&lt;/p>
&lt;p>单体式应用存在的潜在问题是动态扩展和故障转移。这些问题通常可通过简单的扩展性设计来加以解决，
例如横向扩展(在集群中复制该功能)或纵向扩展(镜像实例和扩展硬件)。开发和运维团队也很少考虑可扩展性问题。
如果需要一个完整的 50 人团队每 6 到 9 个月发布一个单体式应用，那么通过让五个独立的团队提供五个较小的应用并每隔几周发布一次更新，
即可提高可扩展性。考虑到最初的简单性以及服务与依赖项之间的清晰关系，单体式架构可能称得上是最古老的应用架构。&lt;/p>
&lt;p>由于单体式是一种较为陈旧的架构形式，因此它们常常与传统应用相关联。相比而言，更为现代化的架构则尝试按功能或业务能力来拆分服务，
以带来更好的灵活性。这在面向客户的界面(如 API、移动应用或 Web 应用)中尤为常见。这些界面通常较小，需要更加频繁的更新才能满足客户的期望。&lt;/p>
&lt;p>分布式架构的最新定义之一是微服务。与其他模块化设计，像面向服务的架构(SOA)有一些相似之处，但微服务将服务之间的松散耦合转变为服务独立性。
通常，单个服务的定义较为明确，可以轻松地在较大的架构中添加、升级或删除服务。这对于动态可扩展性和容错能力都有一定的好处:
可以在不占用大量基础架构的情况下按需扩展单个服务，或者可以在不影响其他服务的情况下进行故障转移。&lt;/p></description></item><item><title>Docs: 团队文化</title><link>https://taibiaoguo.github.io/devSpec/docs/projectmanagementstandards/teamculture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://taibiaoguo.github.io/devSpec/docs/projectmanagementstandards/teamculture/</guid><description>
&lt;p>微服务、敏捷开发、DevOps 在软件和互联网行业大行其道，屹立潮头的企业们设计了许多精巧的软件架构、严密的开发流程来适应这些新事物。
事实上，&lt;a href="https://www.gartner.com/newsroom/id/3032517">Gartner&lt;/a> 曾做过统计，90%的DevOps 实践最终都走向了失败。人们逐渐发现，
即使你设计的再精美的系统架构图、再严密的流程，一旦涉及到诸如人的参与和或卷入传统企业流程，往往都会变形，并最终走向崩溃。&lt;/p>
&lt;p>康威定理指出：“任何采用系统设计的企业，其设计结构最终都会不可避免地与该企业的沟通结构相一致。”针对这方面，有两个彼此相关的解释：&lt;/p>
&lt;ul>
&lt;li>除非也改变沟通结构，否则单纯改变架构或基础架构不会带来任何改变；&lt;/li>
&lt;li>无论基础架构如何，改变沟通结构都会带来流程和基础架构的改进。&lt;/li>
&lt;/ul>
&lt;p>打造支持持续交付规范的团队（企业）文化，将是你实践 devSpec 的第一步。&lt;/p></description></item><item><title>Docs: 持续集成</title><link>https://taibiaoguo.github.io/devSpec/docs/automationintegrationstandards/continuesintegrationstandards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://taibiaoguo.github.io/devSpec/docs/automationintegrationstandards/continuesintegrationstandards/</guid><description/></item><item><title>Docs: 团队架构</title><link>https://taibiaoguo.github.io/devSpec/docs/projectmanagementstandards/teamarchitecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://taibiaoguo.github.io/devSpec/docs/projectmanagementstandards/teamarchitecture/</guid><description>
&lt;p>在明确团队文化后，下一步就是明确团队架构。团队中所有 DevOps、敏捷的主要目标都是改进客户和业务的价值交付，而不是降低成本、
提升自动化或者配置管理驱动一切。 这意味着，为了实现有效的 Dev 和 Ops 协同，不同的组织可能需要不同的团队结构。
&lt;a href="https://web.devopstopologies.com/index.html">DevOpsTopologies&lt;/a> 给出了大量的团队架构范式，
但对于 devSpec 的读者（初创小型团队、分布式团队）来说，我们需要考虑的点则少得多：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>团队是否自建基础设施服务？&lt;/strong>&lt;/p>
&lt;p>大型团队往往需要保证服务的高可用和高并发，服务器、代码管理平台、消息队列、数据库、缓存等基础设施服务往往有专人进行维护。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队成员是否时间一致？&lt;/strong>&lt;/p>
&lt;p>团队成员时间不一致会给开发和沟通带来挑战，分布式团队对组织的流程和成员素质提出了更高的要求。对于一些问题，团队
成员可能会倾向于独立解决，因为沟通的成本相对来说会变得更高；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>团队是否是分布式团队？&lt;/strong>&lt;/p>
&lt;p>很高兴的，随着居家办公和分布式办公的流行，阻碍团队成为分布式的约束正变得越来越弱。
但一般情况下，集中办公的效率总是高于分布式办公的，但对于初创团队而言，可能需要付出更多的团队运营成本。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="好的-devspec-标准组织架构">好的 devSpec 标准组织架构&lt;/h2>
&lt;h3 id="容器驱动协作架构">容器驱动协作架构&lt;/h3>
&lt;p>容器将应用程序的部署和运行要求封装到了容器中，消除了 Dev 和 Ops 之间的某些协作需求。在这种情况下，容器充当了 Dev 和 Ops 的责任边界。
在良好的工程文化中，容器驱动协作架构运转良好，但是，如果 Dev 开始忽视运维注意事项，那么，这个模型就会向敌对的“我们和他们”回归。&lt;/p>
&lt;h3 id="devops-作为外部服务架构">DevOps 作为外部服务架构&lt;/h3>
&lt;p>初创组织的财力、经验或人力往往不足以支撑其运维其开发的软件。有一些服务提供者如 华为云 可能提供相关的服务帮助他们构建测试环境及自动化
基础设施和监控，并就他们在软件开发周期中实现何种运维特性提供建议。&lt;/p>
&lt;p>随着初创组织的发展，可能会有更多的人专注于运维工作，他们可能会将 Ops 工作放入基础设施中，甚至独立出专门的Ops 团队来负责运维工作。这时，
使用 DevOps 即服务可能是一种有效且务实的组织架构方式。&lt;/p>
&lt;h3 id="完全共担-ops-职责架构">完全共担 Ops 职责架构&lt;/h3>
&lt;p>如果你的初创团队是一个精英团队或产品形态比较单一，例如Web服务，那么完全共担 Ops 职责架构可能会适合你。在这种组织架构中，
团队 Dev 和 Ops 成员必须只有一个目标，运维人员将被整合到产品开发团队。&lt;/p>
&lt;p>Netflix 和 Facebook 这种产品形态较为单一的组织已经实现了完全共担 Ops 职责架构。但如果你的团队包含多个产品流的研发任务，
例如初创团队同时进行多个最小可行产品的论证工作，那么完全共担 Ops 职责架构最终将导致成员目标的分散，
最终导致完全共担 Ops 职责架构的实施变形或失败。&lt;/p>
&lt;h2 id="坏的组织架构">坏的组织架构&lt;/h2></description></item><item><title>Docs: 项目生命周期</title><link>https://taibiaoguo.github.io/devSpec/docs/projectmanagementstandards/projectlifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://taibiaoguo.github.io/devSpec/docs/projectmanagementstandards/projectlifecycle/</guid><description/></item></channel></rss>